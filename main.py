"""
Bot de Trading Scalping Automatis√© - CAPITAL DYNAMIQUE
Strat√©gie multi-paires EUR avec gestion avanc√©e des risques
"""

import asyncio
import json
import logging
import os
import time
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from typing import Dict, List, Optional, Tuple

# Trading & APIs
import ccxt
import gspread
import numpy as np
import pandas as pd
import talib
# Notifications & Logging
import telegram
from binance.client import Client
from binance.enums import (ORDER_TYPE_LIMIT, ORDER_TYPE_MARKET, SIDE_BUY, SIDE_SELL,
                           TIME_IN_FORCE_GTC)
from binance.exceptions import BinanceAPIException, BinanceOrderException
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Bot

# Configuration
from config import API_CONFIG, TradingConfig
from utils.database import TradingDatabase
from utils.logger import setup_logger
from utils.risk_manager import RiskManager
from utils.sheets_logger import SheetsLogger
from utils.technical_indicators import TechnicalAnalyzer
from utils.telegram_notifier import TelegramNotifier


class TradeDirection(Enum):
    LONG = "LONG"
    SHORT = "SHORT"

class TradeStatus(Enum):
    OPEN = "OPEN"
    CLOSED = "CLOSED"
    CANCELLED = "CANCELLED"

@dataclass
class Trade:
    id: str
    pair: str
    direction: TradeDirection
    size: float
    entry_price: float
    stop_loss: float
    take_profit: float
    trailing_stop: float
    timestamp: datetime
    status: TradeStatus = TradeStatus.OPEN
    exit_price: Optional[float] = None
    exit_timestamp: Optional[datetime] = None
    pnl: float = 0.0
    duration: Optional[timedelta] = None
    exit_reason: str = ""
    db_id: Optional[int] = None

@dataclass
class PairScore:
    pair: str
    volatility: float
    volume: float
    score: float
    spread: float
    atr: float = 0.0

class ScalpingBot:
    def __init__(self):
        self.logger = setup_logger("ScalpingBot")
        self.config = TradingConfig()
        
        # Initialize APIs
        self.binance_client = Client(
            API_CONFIG.BINANCE_API_KEY,
            API_CONFIG.BINANCE_SECRET_KEY,
            testnet=API_CONFIG.TESTNET
        )
        
        # Initialize utilities
        self.risk_manager = RiskManager(self.config)
        self.technical_analyzer = TechnicalAnalyzer()
        self.telegram_notifier = TelegramNotifier(
            API_CONFIG.TELEGRAM_BOT_TOKEN, 
            API_CONFIG.TELEGRAM_CHAT_ID, 
            trading_config=self.config
        )
        
        # Initialize Google Sheets optionally
        if API_CONFIG.ENABLE_GOOGLE_SHEETS:
            try:
                self.sheets_logger = SheetsLogger(
                    API_CONFIG.GOOGLE_SHEETS_CREDENTIALS, 
                    API_CONFIG.GOOGLE_SHEETS_SPREADSHEET_ID
                )
                logging.info(f"üìä Google Sheets activ√© - ID: {API_CONFIG.GOOGLE_SHEETS_SPREADSHEET_ID}")
            except Exception as e:
                logging.error(f"‚ùå Erreur Google Sheets: {e}")
                self.sheets_logger = None
        else:
            self.sheets_logger = None
            logging.info("üìä Google Sheets d√©sactiv√©")
        
        # Bot state
        self.is_running = False
        self.daily_pnl = 0.0
        self.daily_trades = 0
        self.open_positions: Dict[str, Trade] = {}  # Une position par ID unique
        self.start_capital = 0.0
        self.current_capital = 0.0
        self.daily_target_reached = False
        self.daily_stop_loss_hit = False
        
        # Base de donn√©es
        self.database = TradingDatabase()
        
        # Compteur pour m√©triques temps r√©el
        self.metrics_counter = 0
        
        self.logger.info("üöÄ Bot de Trading Scalping initialis√©")

    async def start(self):
        """Lance le bot de trading"""
        self.logger.info("üü¢ [STARTING] D√©marrage du bot...")
        
        # Initialisation de la base de donn√©es
        await self.database.initialize_database()
        
        # Nettoyage des positions fant√¥mes
        await self.cleanup_phantom_positions()
        
        # Initialisation du capital
        await self.initialize_capital()
        
        # Notification de d√©marrage
        await self.telegram_notifier.send_start_notification(self.start_capital)
        
        self.is_running = True
        self.logger.info("üü¢ [RUNNING] Bot lanc√© avec succ√®s")
        
        # Boucle principale
        await self.main_loop()

    def detect_phantom_positions(self) -> List[str]:
        """D√©tecte les positions fant√¥mes (positions ouvertes sans solde correspondant)"""
        phantom_positions = []
        
        for trade_id, trade in self.open_positions.items():
            symbol = trade.pair
            try:
                base_asset = symbol.replace('EUR', '')
                available_balance = self.get_asset_balance(base_asset)
                
                # Position fant√¥me si solde pratiquement nul mais position ouverte
                if available_balance < self.config.PHANTOM_POSITION_THRESHOLD and trade.size > 0.001:
                    phantom_positions.append(trade_id)
                    self.logger.warning(f"üëª Position fant√¥me d√©tect√©e: {symbol}")
                    self.logger.warning(f"   Position size: {trade.size:.8f} {base_asset}")
                    self.logger.warning(f"   Solde disponible: {available_balance:.8f} {base_asset}")
                    
            except Exception as e:
                self.logger.error(f"‚ùå Erreur v√©rification position fant√¥me {symbol}: {e}")
                
        return phantom_positions
    
    async def cleanup_phantom_positions(self):
        """Nettoie automatiquement les positions fant√¥mes"""
        phantom_positions = self.detect_phantom_positions()
        
        if phantom_positions:
            self.logger.info(f"üßπ Nettoyage de {len(phantom_positions)} position(s) fant√¥me(s)")
            
            for trade_id in phantom_positions:
                try:
                    trade = self.open_positions[trade_id]
                    symbol = trade.pair
                    ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                    current_price = float(ticker['price'])
                    await self.close_position_virtually(trade_id, current_price, "PHANTOM_CLEANUP")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur nettoyage position fant√¥me {trade_id}: {e}")
                    
        return len(phantom_positions)

    async def initialize_capital(self):
        """Initialise le capital √† partir de l'API Binance (EUR + valeur crypto)"""
        try:
            account_info = self.binance_client.get_account()
            eur_balance = 0.0
            crypto_value = 0.0
            significant_balances = []
            self.logger.info("üí∞ Soldes disponibles:")
            for balance in account_info['balances']:
                free_balance = float(balance['free'])
                asset = balance['asset']
                if free_balance > 0:
                    if asset == 'EUR':
                        eur_balance = free_balance
                        self.logger.info(f"   üí∂ {asset}: {free_balance:.2f}")
                    elif free_balance > 0.001:
                        # Conversion en EUR pour le capital initial
                        try:
                            symbol = asset + 'EUR'
                            ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                            price_eur = float(ticker['price'])
                            value_eur = free_balance * price_eur
                            crypto_value += value_eur
                            significant_balances.append(f"{asset}: {free_balance:.8f} ({value_eur:.2f} EUR)")
                        except Exception:
                            significant_balances.append(f"{asset}: {free_balance:.8f}")
            if significant_balances:
                self.logger.info(f"   ü™ô Autres: {', '.join(significant_balances[:5])}")
            if eur_balance == 0.0 and crypto_value == 0.0:
                raise ValueError("Aucun solde EUR ou crypto trouv√© dans le compte")
            total_capital = eur_balance + crypto_value
            self.start_capital = total_capital
            self.current_capital = total_capital
            self.logger.info(f"üí∞ Capital initial total: {self.start_capital:.2f} EUR (EUR: {eur_balance:.2f}, Crypto: {crypto_value:.2f})")
            self.logger.info(f"üìä Taille de position configur√©e: {self.config.BASE_POSITION_SIZE_PERCENT}% = {self.calculate_position_size():.2f} EUR")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur initialisation capital: {e}")
            raise

    async def main_loop(self):
        """Boucle principale du bot"""
        while self.is_running:
            try:
                # V√©rification des conditions d'arr√™t quotidien
                if self.should_stop_daily_trading():
                    await self.handle_daily_stop()
                    break
                
                # Scan des paires EUR
                top_pairs = await self.scan_eur_pairs()
                
                # Recherche de signaux
                for pair_info in top_pairs:
                    if len(self.open_positions) >= self.config.MAX_OPEN_POSITIONS:
                        break
                    
                    signal = await self.analyze_pair(pair_info.pair)
                    if signal:
                        await self.execute_trade(pair_info.pair, signal)
                
                # Gestion des positions ouvertes
                await self.manage_open_positions()
                
                # Enregistrement p√©riodique des m√©triques (toutes les 10 it√©rations)
                self.metrics_counter += 1
                if self.metrics_counter % 10 == 0:
                    await self.save_realtime_metrics()
                
                # V√©rification de coh√©rence des positions (toutes les 50 it√©rations)
                if self.metrics_counter % 50 == 0:
                    await self.check_positions_consistency()
                
                # Pause avant le prochain scan
                await asyncio.sleep(self.config.SCAN_INTERVAL)
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur dans la boucle principale: {e}")
                await asyncio.sleep(5)

    async def scan_eur_pairs(self) -> List[PairScore]:
        """Scanne et classe les paires EUR par score"""
        try:
            self.logger.info("üîé Scan des paires EUR en cours...")
            
            # R√©cup√©ration des tickers
            tickers = self.binance_client.get_ticker()
            eur_pairs = [t for t in tickers if t['symbol'].endswith('EUR')]
            
            pair_scores = []
            
            for ticker in eur_pairs:
                symbol = ticker['symbol']
                
                # V√©rification volume minimum
                volume_eur = float(ticker['quoteVolume'])
                if volume_eur < self.config.MIN_VOLUME_EUR:
                    continue
                
                # Calcul spread
                bid = float(ticker['bidPrice'])
                ask = float(ticker['askPrice'])
                spread = (ask - bid) / bid * 100
                
                if spread > self.config.MAX_SPREAD_PERCENT:
                    continue
                
                # Calcul volatilit√©
                price_change = abs(float(ticker['priceChangePercent']))
                
                # Calcul ATR (optionnel)
                atr = await self.calculate_atr(symbol)
                
                # Score de s√©lection
                score = (0.6 * price_change + 0.4 * (volume_eur / 1000000))
                
                pair_scores.append(PairScore(
                    pair=symbol,
                    volatility=price_change,
                    volume=volume_eur,
                    score=score,
                    spread=spread,
                    atr=atr
                ))
            
            # Tri par score d√©croissant
            pair_scores.sort(key=lambda x: x.score, reverse=True)
            top_pairs = pair_scores[:self.config.MAX_PAIRS_TO_ANALYZE]
            
            self.logger.info(f"üìä Top {len(top_pairs)} paires s√©lectionn√©es:")
            for i, pair in enumerate(top_pairs):
                self.logger.info(f"  {i+1}. {pair.pair} - Score: {pair.score:.2f} - Vol: {pair.volatility:.2f}% - Volume: {pair.volume/1000000:.1f}M EUR")
            
            return top_pairs
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors du scan des paires: {e}")
            return []

    async def calculate_atr(self, symbol: str, period: int = 14) -> float:
        """Calcule l'ATR pour une paire"""
        try:
            klines = self.binance_client.get_klines(
                symbol=symbol,
                interval=Client.KLINE_INTERVAL_1MINUTE,
                limit=period + 1
            )
            
            if len(klines) < period:
                return 0.0
            
            high = np.array([float(k[2]) for k in klines])
            low = np.array([float(k[3]) for k in klines])
            close = np.array([float(k[4]) for k in klines])
            
            atr = talib.ATR(high, low, close, timeperiod=period) # type: ignore
            return atr[-1] if not np.isnan(atr[-1]) else 0.0
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur calcul ATR pour {symbol}: {e}")
            return 0.0

    async def analyze_pair(self, symbol: str) -> Optional[TradeDirection]:
        """Analyse technique d'une paire pour d√©tecter un signal"""
        try:
            # R√©cup√©ration des donn√©es
            klines = self.binance_client.get_klines(
                symbol=symbol,
                interval=getattr(Client, f'KLINE_INTERVAL_{self.config.TIMEFRAME}'),
                limit=100
            )
            
            if len(klines) < 50:
                return None
            
            # Pr√©paration des donn√©es
            df = pd.DataFrame(klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades_count', 'taker_buy_base', 'taker_buy_quote', 'ignore'
            ])
            
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = df[col].astype(float)
            
            # Calcul des indicateurs techniques
            signal_score = 0
            conditions = []
            
            # EMA 9 et 21
            ema9 = talib.EMA(df['close'], timeperiod=9) # type: ignore
            ema21 = talib.EMA(df['close'], timeperiod=21) # type: ignore
            
            if ema9.iloc[-1] > ema21.iloc[-1]:
                signal_score += 1
                conditions.append("EMA(9) > EMA(21)")
            
            # MACD
            macd, macdsignal, macdhist = talib.MACD(df['close']) # type: ignore
            if not np.isnan(macd.iloc[-1]) and not np.isnan(macdsignal.iloc[-1]):
                if macd.iloc[-1] > macdsignal.iloc[-1]:
                    signal_score += 1
                    conditions.append("MACD > Signal")
            
            # RSI - D√©tection de rebond confirm√©
            rsi = talib.RSI(df['close'], timeperiod=self.config.RSI_PERIOD) # type: ignore
            if not np.isnan(rsi.iloc[-1]) and not np.isnan(rsi.iloc[-2]):
                # Rebond confirm√© : RSI √©tait en survente et remonte
                if (rsi.iloc[-2] < self.config.RSI_OVERSOLD_LEVEL and 
                    rsi.iloc[-1] > self.config.RSI_BOUNCE_CONFIRM_LEVEL):
                    signal_score += 1
                    conditions.append(f"RSI rebond confirm√© ({rsi.iloc[-2]:.1f} -> {rsi.iloc[-1]:.1f})")
            
            # Bollinger Bands
            bb_upper, bb_middle, bb_lower = talib.BBANDS(df['close'], timeperiod=20, nbdevup=2, nbdevdn=2) # type: ignore
            current_price = df['close'].iloc[-1]
            
            if not np.isnan(bb_lower.iloc[-1]):
                if current_price <= bb_lower.iloc[-1] * 1.002:  # 0.2% de marge
                    signal_score += 1
                    conditions.append("Prix proche Bollinger inf.")
            
            # Signal valide si >= 3 conditions
            if signal_score >= 3:
                self.logger.info(f"‚úÖ Signal d√©tect√© : {symbol} (Score : {signal_score}/4)")
                for condition in conditions:
                    self.logger.info(f"   - {condition}")
                return TradeDirection.LONG
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur analyse {symbol}: {e}")
            return None

    async def execute_trade(self, symbol: str, direction: TradeDirection):
        """Ex√©cute un trade"""
        try:
            # Calculer la volatilit√© pour cette paire
            volatility = self.calculate_volatility_1h(symbol)
            
            # V√©rifications avant entr√©e avec nouveaux crit√®res
            can_open, reason = self.can_open_position_enhanced(symbol, volatility)
            if not can_open:
                self.logger.info(f"‚ùå Trade {symbol} refus√©: {reason}")
                return
            
            # Informations d'allocation avant trade
            total_capital = self.get_total_capital()
            eur_balance = self.get_asset_balance('EUR')
            base_asset = symbol.replace('EUR', '')
            current_exposure = self.get_asset_exposure(base_asset)
            
            # Calcul de la taille de position avec sizing adaptatif
            position_size = self.calculate_position_size(symbol, volatility)
            
            self.logger.info(f"üí∞ Allocation avant trade {symbol}:")
            self.logger.info(f"   üìä Capital total: {total_capital:.2f} EUR")
            self.logger.info(f"   üí∂ EUR disponible: {eur_balance:.2f} EUR")
            self.logger.info(f"   üéØ Taille position: {position_size:.2f} EUR (volatilit√©: {volatility:.2f}%)")
            self.logger.info(f"   üìà Exposition {base_asset} actuelle: {current_exposure:.2f} EUR")
            self.logger.info(f"   üè¶ Positions ouvertes: {len(self.open_positions)}")
            
            # R√©cup√©ration du prix actuel
            ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
            current_price = float(ticker['price'])
            
            # Calcul SL et TP
            stop_loss = current_price * (1 - self.config.STOP_LOSS_PERCENT / 100)
            take_profit = current_price * (1 + self.config.TAKE_PROFIT_PERCENT / 100)
            trailing_stop = current_price * (1 + self.config.TRAILING_ACTIVATION_PERCENT / 100)
            
            # Calcul de la quantit√©
            quantity = position_size / current_price
            
            # Validation et ajustement de la quantit√©
            is_valid, validation_msg, adjusted_quantity = self.validate_order_quantity(symbol, quantity, current_price)
            
            if not is_valid:
                self.logger.warning(f"‚ö†Ô∏è Quantit√© invalide pour {symbol}: {validation_msg}")
                # Utilisation de la quantit√© ajust√©e si possible
                if adjusted_quantity > 0:
                    quantity = adjusted_quantity
                    position_size = quantity * current_price  # Recalcul du capital engag√©
                    self.logger.info(f"üîß Quantit√© ajust√©e: {quantity:.8f} (capital: {position_size:.2f} EUR)")
                else:
                    self.logger.error(f"‚ùå Impossible de trader {symbol}: quantit√© minimale non respect√©e")
                    return
            
            # Arrondi final selon les r√®gles de la paire
            quantity = self.round_quantity(symbol, quantity)
            
            # V√©rification finale de la valeur notionnelle
            final_notional = quantity * current_price
            if final_notional < 10.0:  # Minimum Binance g√©n√©ral
                self.logger.warning(f"‚ö†Ô∏è Valeur notionnelle trop faible pour {symbol}: {final_notional:.2f} EUR < 10 EUR")
                return
            
            # Capital avant trade (AVANT l'achat)
            capital_before_trade = self.get_total_capital()
            
            # Passage de l'ordre
            order = self.binance_client.order_market_buy(
                symbol=symbol,
                quantity=quantity
            )
            
            # Cr√©ation du trade
            trade = Trade(
                id=order['orderId'],
                pair=symbol,
                direction=direction,
                size=quantity,
                entry_price=current_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                trailing_stop=trailing_stop,
                timestamp=datetime.now()
            )
            
            # Ajout aux positions ouvertes avec ID unique
            trade_id = f"{symbol}_{trade.id}_{int(datetime.now().timestamp())}"
            self.open_positions[trade_id] = trade
            
            # Mise √† jour du capital
            self.current_capital -= position_size
            
            # Logging
            self.logger.info(f"üìà Trade ouvert : {symbol}")
            self.logger.info(f"   üí∞ Prix d'entr√©e: {current_price:.4f} EUR")
            self.logger.info(f"   üìä Quantit√©: {quantity:.6f}")
            self.logger.info(f"   üõë Stop Loss: {stop_loss:.4f} EUR (-{self.config.STOP_LOSS_PERCENT}%)")
            self.logger.info(f"   üéØ Take Profit: {take_profit:.4f} EUR (+{self.config.TAKE_PROFIT_PERCENT}%)")
            self.logger.info(f"   üíµ Capital engag√©: {position_size:.2f} EUR")
            
            # Notification Telegram
            await self.telegram_notifier.send_trade_open_notification(trade, position_size)
            
            # Log dans Google Sheets (si activ√©)
            if self.sheets_logger:
                # Capital apr√®s = EUR total + crypto existant APR√àS l'achat
                capital_after_trade = self.get_total_capital()
                
                self.logger.info(f"üìä Google Sheets - Capital avant: {capital_before_trade:.2f} EUR, apr√®s: {capital_after_trade:.2f} EUR (diff√©rence: {capital_after_trade - capital_before_trade:+.2f} EUR)")
                await self.sheets_logger.log_trade(trade, "OPEN", capital_before_trade, capital_after_trade)
            
            # Enregistrement en base de donn√©es
            try:
                trade_data = {
                    'symbol': symbol,
                    'side': 'BUY',
                    'entry_price': current_price,
                    'quantity': quantity,
                    'stop_loss': stop_loss,
                    'take_profit': take_profit,
                    'trailing_stop': trailing_stop,
                    'entry_time': datetime.now(),
                    'capital_engaged': position_size,
                    'signals_detected': {
                        'direction': direction.value,
                        'position_size': position_size
                    }
                }
                trade_id = await self.database.insert_trade(trade_data)
                trade.db_id = trade_id  # Stockage de l'ID DB dans le trade
                self.logger.info(f"üìä Trade enregistr√© en base (ID: {trade_id})")
            except Exception as e:
                self.logger.error(f"‚ùå Erreur enregistrement DB: {e}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'ex√©cution du trade {symbol}: {e}")

    def can_open_position(self, symbol: str) -> bool:
        """V√©rifie si on peut ouvrir une position"""
        # V√©rification nombre de positions
        if len(self.open_positions) >= self.config.MAX_OPEN_POSITIONS:
            self.logger.debug(f"‚ùå Limite max positions atteinte: {len(self.open_positions)}")
            return False
        
        # V√©rification position d√©j√† ouverte sur la paire
        trades_on_pair = [trade for trade_id, trade in self.open_positions.items() if trade.pair == symbol]
        if len(trades_on_pair) >= self.config.MAX_TRADES_PER_PAIR:
            self.logger.debug(f"‚ùå Limite trades par paire atteinte: {len(trades_on_pair)}/{self.config.MAX_TRADES_PER_PAIR}")
            return False
        
        # V√©rification capital EUR disponible (pas le total avec crypto!)
        position_size = self.calculate_position_size()
        eur_balance = self.get_asset_balance('EUR')
        if eur_balance < position_size:
            self.logger.debug(f"‚ùå Capital EUR insuffisant: {eur_balance:.2f} < {position_size:.2f}")
            return False
        
        # V√©rification exposition maximale par asset de base
        base_asset = symbol.replace('EUR', '')
        current_exposure = self.get_asset_exposure(base_asset)
        max_exposure_per_asset = self.get_total_capital() * self.config.MAX_EXPOSURE_PER_ASSET_PERCENT / 100
        
        if current_exposure + position_size > max_exposure_per_asset:
            self.logger.debug(f"‚ùå Exposition {base_asset} trop √©lev√©e: {current_exposure:.2f} + {position_size:.2f} > {max_exposure_per_asset:.2f}")
            return False
        
        # V√©rification objectif/stop loss quotidien
        if self.daily_target_reached or self.daily_stop_loss_hit:
            self.logger.debug(f"‚ùå Objectif/stop loss quotidien atteint")
            return False
        
        return True
    
    def get_asset_exposure(self, base_asset: str) -> float:
        """Calcule l'exposition actuelle sur un asset de base (positions ouvertes + soldes existants)"""
        total_exposure = 0.0
        
        # 1. Exposition des positions ouvertes trac√©es par le bot
        for trade_id, trade in self.open_positions.items():
            if trade.pair.replace('EUR', '') == base_asset:
                try:
                    ticker = self.binance_client.get_symbol_ticker(symbol=trade.pair)
                    current_price = float(ticker['price'])
                    position_value = trade.size * current_price
                    total_exposure += position_value
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur calcul exposition position {trade.pair}: {e}")
                    # Fallback sur le prix d'entr√©e
                    position_value = trade.size * trade.entry_price
                    total_exposure += position_value
        
        # 2. Exposition des soldes crypto existants (CRITIQUE!)
        try:
            existing_balance = self.get_asset_balance(base_asset)
            if existing_balance > 0.00001:  # Seuil pour √©viter les poussi√®res
                symbol = base_asset + 'EUR'
                ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                current_price = float(ticker['price'])
                existing_value = existing_balance * current_price
                total_exposure += existing_value
                
                self.logger.debug(f"üíé Exposition {base_asset}: Positions ouvertes: {total_exposure - existing_value:.2f} EUR + Solde existant: {existing_value:.2f} EUR = Total: {total_exposure:.2f} EUR")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur calcul exposition solde existant {base_asset}: {e}")
        
        return total_exposure

    def calculate_position_size(self, pair: Optional[str] = None, volatility: Optional[float] = None) -> float:
        """Calcule la taille de position avec sizing adaptatif bas√© sur la volatilit√©"""
        total_capital = self.get_total_capital()
        base_size = total_capital * self.config.BASE_POSITION_SIZE_PERCENT / 100
        
        # Si pas de volatilit√© fournie, utiliser la taille de base
        if volatility is None:
            return base_size
        
        # Position sizing adaptatif selon la volatilit√©
        if volatility > self.config.HIGH_VOLATILITY_THRESHOLD:
            # R√©duire la taille pour paires tr√®s volatiles
            reduction_factor = min(0.5, self.config.VOLATILITY_REDUCTION_FACTOR * (volatility / self.config.HIGH_VOLATILITY_THRESHOLD))
            adjusted_size = base_size * (1 - reduction_factor)
            self.logger.info(f"üìä Position r√©duite pour {pair} (volatilit√© {volatility:.2f}%): {adjusted_size:.2f} EUR")
            return adjusted_size
        elif volatility < self.config.LOW_VOLATILITY_THRESHOLD:
            # Augmenter l√©g√®rement pour paires peu volatiles (plus s√ªres)
            adjusted_size = base_size * 1.1
            self.logger.info(f"üìä Position augment√©e pour {pair} (faible volatilit√© {volatility:.2f}%): {adjusted_size:.2f} EUR")
            return adjusted_size
        else:
            # Volatilit√© normale, taille de base
            return base_size

    def round_quantity(self, symbol: str, quantity: float) -> float:
        """Arrondit la quantit√© selon les r√®gles de la paire"""
        try:
            info = self.binance_client.get_symbol_info(symbol)
            for filter_item in info['filters']: # type: ignore
                if filter_item['filterType'] == 'LOT_SIZE':
                    step_size = float(filter_item['stepSize'])
                    precision = len(str(step_size).split('.')[-1].rstrip('0'))
                    return round(quantity, precision)
            return round(quantity, 6)
        except:
            return round(quantity, 6)
    
    def get_symbol_filters(self, symbol: str) -> dict:
        """R√©cup√®re les filtres de trading pour un symbole"""
        try:
            info = self.binance_client.get_symbol_info(symbol)
            filters = {}
            
            for filter_item in info['filters']: # type: ignore
                if filter_item['filterType'] == 'LOT_SIZE':
                    filters['min_qty'] = float(filter_item['minQty'])
                    filters['max_qty'] = float(filter_item['maxQty'])
                    filters['step_size'] = float(filter_item['stepSize'])
                elif filter_item['filterType'] == 'MIN_NOTIONAL':
                    filters['min_notional'] = float(filter_item['minNotional'])
                elif filter_item['filterType'] == 'PRICE_FILTER':
                    filters['min_price'] = float(filter_item['minPrice'])
                    filters['max_price'] = float(filter_item['maxPrice'])
                    filters['tick_size'] = float(filter_item['tickSize'])
            
            return filters
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration filtres {symbol}: {e}")
            return {}
    
    def validate_order_quantity(self, symbol: str, quantity: float, price: float) -> tuple[bool, str, float]:
        """Valide et ajuste une quantit√© d'ordre"""
        try:
            filters = self.get_symbol_filters(symbol)
            
            if not filters:
                return True, "Pas de filtres disponibles", quantity
            
            # V√©rification quantit√© minimale
            min_qty = filters.get('min_qty', 0)
            if quantity < min_qty:
                return False, f"Quantit√© {quantity:.8f} < minimum {min_qty:.8f}", min_qty
            
            # V√©rification quantit√© maximale
            max_qty = filters.get('max_qty', float('inf'))
            if quantity > max_qty:
                return False, f"Quantit√© {quantity:.8f} > maximum {max_qty:.8f}", max_qty
            
            # Arrondi selon step_size
            step_size = filters.get('step_size', 0)
            if step_size > 0:
                quantity = round(quantity / step_size) * step_size
            
            # V√©rification valeur notionnelle minimale
            min_notional = filters.get('min_notional', 0)
            notional_value = quantity * price
            if notional_value < min_notional:
                # Calcul de la quantit√© minimale pour respecter min_notional
                min_qty_for_notional = min_notional / price
                if step_size > 0:
                    min_qty_for_notional = round(min_qty_for_notional / step_size) * step_size
                return False, f"Valeur notionnelle {notional_value:.2f} < minimum {min_notional:.2f}", min_qty_for_notional
            
            return True, "OK", quantity
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur validation quantit√© {symbol}: {e}")
            return True, f"Erreur validation: {e}", quantity
    
    def get_asset_balance(self, asset: str) -> float:
        """R√©cup√®re le solde disponible d'un asset"""
        try:
            account_info = self.binance_client.get_account()
            for balance in account_info['balances']:
                if balance['asset'] == asset:
                    return float(balance['free'])
            return 0.0
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration solde {asset}: {e}")
            return 0.0

    def get_total_capital(self) -> float:
        """Calcule le capital total dynamique (EUR + valeur de TOUTES les cryptos du compte)"""
        try:
            account_info = self.binance_client.get_account()
            total_capital = 0.0
            
            # Solde EUR
            eur_balance = 0.0
            crypto_value = 0.0
            
            for balance in account_info['balances']:
                free_balance = float(balance['free'])
                asset = balance['asset']
                
                if free_balance > 0:
                    if asset == 'EUR':
                        eur_balance = free_balance
                        total_capital += eur_balance
                    elif free_balance > 0.00001:  # Seuil pour √©viter les poussi√®res
                        # Conversion en EUR pour tous les autres assets
                        try:
                            symbol = asset + 'EUR'
                            ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                            price_eur = float(ticker['price'])
                            value_eur = free_balance * price_eur
                            crypto_value += value_eur
                            total_capital += value_eur
                            self.logger.debug(f"üíé {asset}: {free_balance:.8f} x {price_eur:.4f} = {value_eur:.2f} EUR")
                        except Exception:
                            # Si pas de paire EUR pour cet asset, on ignore
                            self.logger.debug(f"‚ö†Ô∏è Pas de conversion EUR pour {asset}")
                            continue
            
            self.logger.debug(f"üí∞ Capital total: {total_capital:.2f} EUR (EUR libre: {eur_balance:.2f}, Toutes cryptos: {crypto_value:.2f})")
            return total_capital
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur calcul capital total: {e}")
            # Fallback sur le capital courant
            return self.current_capital

    async def manage_open_positions(self):
        """G√®re les positions ouvertes et la surexposition"""
        for trade_id, trade in list(self.open_positions.items()):
            try:
                # R√©cup√©ration du prix actuel
                ticker = self.binance_client.get_symbol_ticker(symbol=trade.pair)
                current_price = float(ticker['price'])

                # Calcul du P&L
                pnl_percent = (current_price - trade.entry_price) / trade.entry_price * 100

                # V√©rification surexposition dynamique
                base_asset = trade.pair.replace('EUR', '')
                current_exposure = self.get_asset_exposure(base_asset)
                max_exposure_per_asset = self.get_total_capital() * self.config.MAX_EXPOSURE_PER_ASSET_PERCENT / 100
                if current_exposure > max_exposure_per_asset * 1.01:  # tol√©rance 1%
                    self.logger.warning(f"‚ö†Ô∏è Surexposition d√©tect√©e sur {base_asset}: {current_exposure:.2f} EUR > {max_exposure_per_asset:.2f} EUR ({self.config.MAX_EXPOSURE_PER_ASSET_PERCENT}% du capital)")
                    await self.close_position(trade_id, current_price, "SUREXPOSITION_AUTO")
                    continue

                # V√©rification timeout adaptatif
                volatility = self.calculate_volatility_1h(trade.pair)
                should_timeout, timeout_reason = self.should_timeout_position(trade, current_price, volatility)
                if should_timeout:
                    self.logger.info(f"‚è±Ô∏è {timeout_reason}")
                    await self.close_position(trade_id, current_price, timeout_reason)
                    continue

                # Sortie momentum faible (optionnelle)
                if self.config.ENABLE_MOMENTUM_EXIT:
                    should_exit_momentum, momentum_reason = await self.check_momentum_exit(trade, current_price, pnl_percent)
                    if should_exit_momentum:
                        self.logger.info(f"üìâ {momentum_reason}")
                        await self.close_position(trade_id, current_price, "MOMENTUM_FAIBLE")
                        continue

                # V√©rification Stop Loss
                if current_price <= trade.stop_loss:
                    await self.close_position(trade_id, current_price, "STOP_LOSS")
                    continue

                # V√©rification Take Profit
                if current_price >= trade.take_profit:
                    await self.close_position(trade_id, current_price, "TAKE_PROFIT")
                    continue

                # Trailing Stop
                if current_price >= trade.trailing_stop:
                    # Mise √† jour du trailing stop
                    new_stop = current_price * (1 - self.config.TRAILING_STEP_PERCENT / 100)
                    if new_stop > trade.stop_loss:
                        old_stop = trade.stop_loss
                        old_tp = trade.take_profit
                        
                        # Mise √† jour du Stop Loss
                        trade.stop_loss = new_stop
                        
                        # Mise √† jour du Take Profit pour qu'il suive la progression
                        # Nouveau TP = prix actuel + m√™me √©cart relatif que le TP initial
                        new_take_profit = current_price * (1 + self.config.TAKE_PROFIT_PERCENT / 100)
                        trade.take_profit = new_take_profit
                        
                        self.logger.info(f"üìà Trailing Stop mis √† jour pour {trade.pair}:")
                        self.logger.info(f"   üõë Nouveau SL: {new_stop:.4f} EUR (ancien: {old_stop:.4f})")
                        self.logger.info(f"   üéØ Nouveau TP: {new_take_profit:.4f} EUR (ancien: {old_tp:.4f})")

                        # Enregistrement en base de donn√©es
                        try:
                            trailing_data = {
                                'trade_id': trade.db_id,
                                'symbol': trade.pair,
                                'old_stop_loss': old_stop,
                                'new_stop_loss': new_stop,
                                'old_take_profit': old_tp,
                                'new_take_profit': new_take_profit,
                                'trigger_price': current_price,
                                'timestamp': datetime.now(),
                                'profit_percent': (current_price - trade.entry_price) / trade.entry_price * 100
                            }
                            await self.database.insert_trailing_stop(trailing_data)
                        except Exception as e:
                            self.logger.error(f"‚ùå Erreur enregistrement trailing stop: {e}")

            except Exception as e:
                self.logger.error(f"‚ùå Erreur gestion position {trade_id}: {e}")

    async def close_position(self, trade_id: str, exit_price: float, reason: str):
        """Ferme une position"""
        try:
            trade = self.open_positions[trade_id]
            symbol = trade.pair
            
            # R√©cup√©ration de l'asset de base (ex: ETH pour ETHEUR)
            base_asset = symbol.replace('EUR', '')
            
            # V√©rification du solde disponible
            available_balance = self.get_asset_balance(base_asset)
            quantity_to_sell = trade.size
            
            # Gestion du solde insuffisant avec tol√©rance
            tolerance = self.config.BALANCE_TOLERANCE  # Tol√©rance pour les erreurs d'arrondi
            if available_balance < (quantity_to_sell - tolerance):
                self.logger.warning(f"‚ö†Ô∏è Solde insuffisant pour {symbol}")
                self.logger.warning(f"   Solde disponible: {available_balance:.8f} {base_asset}")
                self.logger.warning(f"   Quantit√© √† vendre: {quantity_to_sell:.8f} {base_asset}")
                self.logger.warning(f"   Diff√©rence: {quantity_to_sell - available_balance:.8f} {base_asset}")
                
                # V√©rification si c'est une position fant√¥me
                if available_balance <= self.config.PHANTOM_POSITION_THRESHOLD:  # Pratiquement z√©ro
                    self.logger.error(f"‚ùå Position fant√¥me d√©tect√©e pour {symbol}, nettoyage virtuel")
                    await self.close_position_virtually(symbol, exit_price, f"{reason}_PHANTOM")
                    return
                
                # Ajustement intelligent du solde
                usable_balance = available_balance * self.config.BALANCE_SAFETY_MARGIN  # Marge de s√©curit√©
                if usable_balance > 0:
                    quantity_to_sell = self.round_quantity(symbol, usable_balance)
                    self.logger.info(f"üîß Ajustement quantit√© de vente: {quantity_to_sell:.8f} {base_asset}")
                    
                    # V√©rification que la quantit√© ajust√©e est valide
                    if quantity_to_sell <= 0:
                        self.logger.error(f"‚ùå Quantit√© ajust√©e invalide pour {symbol}, fermeture virtuelle")
                        await self.close_position_virtually(symbol, exit_price, f"{reason}_INVALID_QTY")
                        return
                else:
                    self.logger.error(f"‚ùå Aucun solde utilisable pour {symbol}, position ferm√©e virtuellement")
                    await self.close_position_virtually(symbol, exit_price, f"{reason}_NO_BALANCE")
                    return
            
            # Validation finale de la quantit√©
            is_valid, validation_msg, adjusted_quantity = self.validate_order_quantity(symbol, quantity_to_sell, exit_price)
            
            if not is_valid:
                self.logger.warning(f"‚ö†Ô∏è Quantit√© de vente invalide: {validation_msg}")
                if adjusted_quantity > 0 and adjusted_quantity <= available_balance:
                    quantity_to_sell = adjusted_quantity
                    self.logger.info(f"üîß Quantit√© de vente ajust√©e: {quantity_to_sell:.8f}")
                else:
                    self.logger.error(f"‚ùå Impossible de vendre {symbol}, fermeture virtuelle")
                    await self.close_position_virtually(symbol, exit_price, reason)
                    return
            
            # Passage de l'ordre de vente avec gestion d'erreur am√©lior√©e
            try:
                # V√©rification finale avant l'ordre
                final_balance = self.get_asset_balance(base_asset)
                if final_balance < quantity_to_sell:
                    self.logger.warning(f"‚ö†Ô∏è Solde chang√© entre les v√©rifications pour {symbol}")
                    self.logger.warning(f"   Nouveau solde: {final_balance:.8f} {base_asset}")
                    quantity_to_sell = min(quantity_to_sell, final_balance * self.config.BALANCE_SAFETY_MARGIN)
                    quantity_to_sell = self.round_quantity(symbol, quantity_to_sell)
                
                if quantity_to_sell <= 0:
                    self.logger.error(f"‚ùå Quantit√© finale invalide pour {symbol}, fermeture virtuelle")
                    await self.close_position_virtually(symbol, exit_price, f"{reason}_FINAL_CHECK_FAILED")
                    return
                
                order = self.binance_client.order_market_sell(
                    symbol=symbol,
                    quantity=quantity_to_sell
                )
                
                self.logger.info(f"‚úÖ Ordre de vente ex√©cut√©: {quantity_to_sell:.8f} {base_asset}")
                
            except BinanceAPIException as e:
                error_code = getattr(e, 'code', 'UNKNOWN')
                error_msg = str(e)
                
                if "insufficient balance" in error_msg.lower() or error_code == -2010:
                    self.logger.error(f"‚ùå Erreur solde insuffisant confirm√©e par Binance pour {symbol}")
                    self.logger.error(f"   Code erreur: {error_code}")
                    self.logger.error(f"   Message: {error_msg}")
                    
                    # Actualisation forc√©e des soldes apr√®s erreur
                    # Force une nouvelle lecture des soldes
                    time.sleep(1)  # Attente pour synchronisation Binance
                    
                    # Fermeture virtuelle avec d√©tail de l'erreur
                    await self.close_position_virtually(symbol, exit_price, f"{reason}_BINANCE_INSUFFICIENT_BALANCE")
                    return
                elif "min notional" in error_msg.lower() or error_code == -1013:
                    self.logger.error(f"‚ùå Valeur notionnelle trop faible pour {symbol}")
                    self.logger.error(f"   Quantit√©: {quantity_to_sell:.8f}, Prix: {exit_price:.8f}")
                    self.logger.error(f"   Valeur: {quantity_to_sell * exit_price:.2f} EUR")
                    await self.close_position_virtually(symbol, exit_price, f"{reason}_MIN_NOTIONAL")
                    return
                else:
                    # Autres erreurs - on relance l'exception
                    self.logger.error(f"‚ùå Erreur inattendue lors de la vente {symbol}: {error_msg}")
                    raise e
            
            # Mise √† jour du trade
            trade.status = TradeStatus.CLOSED
            trade.exit_price = exit_price
            trade.exit_timestamp = datetime.now()
            trade.duration = trade.exit_timestamp - trade.timestamp
            trade.exit_reason = reason
            
            # Calcul P&L
            pnl_amount = (exit_price - trade.entry_price) * trade.size
            pnl_percent = (exit_price - trade.entry_price) / trade.entry_price * 100
            trade.pnl = pnl_amount
            
            # Mise √† jour des totaux
            self.current_capital += (trade.entry_price * trade.size) + pnl_amount
            self.daily_pnl += pnl_amount
            self.daily_trades += 1
            
            # Suppression de la position ouverte
            del self.open_positions[trade_id]
            
            # Logging
            pnl_symbol = "üöÄ" if pnl_amount > 0 else "üìâ"
            self.logger.info(f"{pnl_symbol} Trade ferm√© : {symbol} ({reason})")
            self.logger.info(f"   üí∞ Prix de sortie: {exit_price:.4f} EUR")
            self.logger.info(f"   üìä P&L: {pnl_amount:+.2f} EUR ({pnl_percent:+.2f}%)")
            self.logger.info(f"   ‚è±Ô∏è Dur√©e: {trade.duration}")
            total_capital = self.get_total_capital()
            daily_pnl_percent = self.daily_pnl / total_capital * 100
            self.logger.info(f"   üîÑ Total journalier: {self.daily_pnl:+.2f} EUR ({daily_pnl_percent:+.2f}%)")
            
            # Notification Telegram
            total_capital = self.get_total_capital()
            await self.telegram_notifier.send_trade_close_notification(trade, pnl_amount, pnl_percent, self.daily_pnl, total_capital)
            
            # Log dans Google Sheets (si activ√©)
            if self.sheets_logger:
                capital_before_close = total_capital - pnl_amount  # Capital avant fermeture
                await self.sheets_logger.log_trade(trade, "CLOSE", capital_before_close, total_capital)
            
            # Mise √† jour en base de donn√©es
            if trade.db_id:
                try:
                    exit_data = {
                        'exit_price': exit_price,
                        'exit_time': datetime.now(),
                        'exit_reason': reason,
                        'pnl_amount': pnl_amount,
                        'pnl_percent': pnl_percent
                    }
                    await self.database.update_trade_exit(trade.db_id, exit_data)
                    self.logger.info(f"üìä Trade mis √† jour en base (ID: {trade.db_id})")
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur mise √† jour DB: {e}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur fermeture position {trade_id}: {e}")
    
    async def close_position_virtually(self, trade_id: str, exit_price: float, reason: str):
        """Ferme une position virtuellement (sans ordre r√©el) en cas de probl√®me"""
        try:
            trade = self.open_positions[trade_id]
            symbol = trade.pair
            
            self.logger.warning(f"üîÑ Fermeture virtuelle de {symbol} √† {exit_price:.4f} EUR")
            
            # Mise √† jour du trade
            trade.status = TradeStatus.CLOSED
            trade.exit_price = exit_price
            trade.exit_timestamp = datetime.now()
            trade.duration = trade.exit_timestamp - trade.timestamp
            trade.exit_reason = f"{reason}_VIRTUAL"
            
            # Calcul P&L (peut √™tre inexact √† cause du solde insuffisant)
            pnl_amount = (exit_price - trade.entry_price) * trade.size
            pnl_percent = (exit_price - trade.entry_price) / trade.entry_price * 100
            trade.pnl = pnl_amount
            
            # Mise √† jour des totaux (ajustement conservateur)
            self.current_capital += (trade.entry_price * trade.size) + pnl_amount
            self.daily_pnl += pnl_amount
            self.daily_trades += 1
            
            # Suppression de la position ouverte
            del self.open_positions[trade_id]
            
            # Logging sp√©cial pour fermeture virtuelle
            pnl_symbol = "‚ö†Ô∏è" 
            self.logger.warning(f"{pnl_symbol} Trade ferm√© virtuellement : {symbol} ({reason})")
            self.logger.warning(f"   üí∞ Prix de sortie: {exit_price:.4f} EUR")
            self.logger.warning(f"   üìä P&L th√©orique: {pnl_amount:+.2f} EUR ({pnl_percent:+.2f}%)")
            self.logger.warning(f"   ‚è±Ô∏è Dur√©e: {trade.duration}")
            self.logger.warning(f"   ‚ö†Ô∏è ATTENTION: Fermeture virtuelle - v√©rifiez manuellement")
            
            # Notification Telegram avec avertissement
            total_capital = self.get_total_capital()
            await self.telegram_notifier.send_trade_close_notification(
                trade, pnl_amount, pnl_percent, self.daily_pnl, total_capital
            )
            
            # Log dans Google Sheets (si activ√©) avec mention sp√©ciale
            if self.sheets_logger:
                capital_before_virtual = total_capital - pnl_amount  # Capital avant fermeture virtuelle
                await self.sheets_logger.log_trade(trade, "CLOSE_VIRTUAL", capital_before_virtual, total_capital)
            
            # Mise √† jour en base de donn√©es
            if trade.db_id:
                try:
                    exit_data = {
                        'exit_price': exit_price,
                        'exit_time': datetime.now(),
                        'exit_reason': f"{reason}_VIRTUAL",
                        'pnl_amount': pnl_amount,
                        'pnl_percent': pnl_percent
                    }
                    await self.database.update_trade_exit(trade.db_id, exit_data)
                    self.logger.info(f"üìä Trade virtuel mis √† jour en base (ID: {trade.db_id})")
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur mise √† jour DB virtuelle: {e}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur fermeture virtuelle {trade_id}: {e}")
    
    def should_stop_daily_trading(self) -> bool:
        """V√©rifie si on doit arr√™ter le trading pour la journ√©e"""
        total_capital = self.get_total_capital()
        daily_pnl_percent = self.daily_pnl / total_capital * 100
        
        # Objectif atteint
        if daily_pnl_percent >= self.config.DAILY_TARGET_PERCENT:
            self.daily_target_reached = True
            return True
        
        # Stop loss atteint
        if daily_pnl_percent <= -self.config.DAILY_STOP_LOSS_PERCENT:
            self.daily_stop_loss_hit = True
            return True
        
        return False

    async def handle_daily_stop(self):
        """G√®re l'arr√™t quotidien du bot"""
        self.logger.info("üõë Conditions d'arr√™t quotidien atteintes")
        
        # Fermeture des positions ouvertes
        for trade_id in list(self.open_positions.keys()):
            trade = self.open_positions[trade_id]
            ticker = self.binance_client.get_symbol_ticker(symbol=trade.pair)
            current_price = float(ticker['price'])
            reason = "DAILY_TARGET" if self.daily_target_reached else "DAILY_STOP_LOSS"
            await self.close_position(trade_id, current_price, reason)
        
        # Notification finale
        status = "‚úÖ Objectif atteint" if self.daily_target_reached else "üõë Stop loss quotidien atteint"
        total_capital = self.get_total_capital()
        await self.telegram_notifier.send_daily_summary(
            status, self.daily_pnl, self.daily_trades, total_capital
        )
        
        # Log performance quotidienne (si activ√©)
        if self.sheets_logger:
            total_capital = self.get_total_capital()
            await self.sheets_logger.log_daily_performance(
                total_capital, self.daily_pnl, self.daily_trades, status
            )
        
        # Enregistrement des performances journali√®res en base de donn√©es
        await self.save_daily_performance()
        
        self.is_running = False
        self.logger.info("üü¢ [STOPPED] Bot arr√™t√© pour la journ√©e")
    
    async def save_daily_performance(self):
        """Enregistre les performances journali√®res en base de donn√©es"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            
            # Calcul des m√©triques bas√© sur le capital total dynamique
            total_capital = self.get_total_capital()
            daily_pnl_percent = (self.daily_pnl / total_capital) * 100
            winning_trades = 0
            losing_trades = 0
            
            # R√©cup√©ration des trades du jour depuis la base
            trades_today = await self.database.get_trades_history(limit=100)
            trades_today = [t for t in trades_today if t.get('entry_time', '').startswith(today)]
            
            for trade in trades_today:
                if trade.get('pnl_amount', 0) > 0:
                    winning_trades += 1
                elif trade.get('pnl_amount', 0) < 0:
                    losing_trades += 1
            
            total_trades = winning_trades + losing_trades
            win_rate = (winning_trades / max(total_trades, 1)) * 100
            
            # Donn√©es de performance
            perf_data = {
                'date': today,
                'start_capital': total_capital,  # Capital total dynamique
                'end_capital': total_capital,  # Capital total dynamique actuel
                'daily_pnl': self.daily_pnl,
                'daily_pnl_percent': daily_pnl_percent,
                'total_trades': total_trades,
                'winning_trades': winning_trades,
                'losing_trades': losing_trades,
                'win_rate': win_rate,
                'max_drawdown': min(0, daily_pnl_percent),  # Approximation
                'status': 'COMPLETED'
            }
            
            await self.database.insert_daily_performance(perf_data)
            self.logger.info(f"üìä Performances journali√®res enregistr√©es en base")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur enregistrement performances journali√®res: {e}")
    
    async def save_realtime_metrics(self):
        """Enregistre les m√©triques en temps r√©el"""
        try:
            # Calcul du win rate actuel
            if self.daily_trades > 0:
                # Approximation bas√©e sur le P&L positif
                win_rate = max(0, (self.daily_pnl / self.daily_trades) * 50)  # Approximation
            else:
                win_rate = 0
            
            metrics = {
                'timestamp': datetime.now(),
                'current_capital': self.get_total_capital(),  # Capital total dynamique
                'open_positions': len(self.open_positions),
                'daily_pnl': self.daily_pnl,
                'total_pnl': self.get_total_capital() - self.start_capital,  # P&L total par rapport au capital initial EUR
                'win_rate': win_rate,
                'pairs_analyzed': [trade.pair for trade in self.open_positions.values()],
                'top_pair': list(self.open_positions.values())[0].pair if self.open_positions else None
            }
            
            await self.database.insert_realtime_metrics(metrics)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur enregistrement m√©triques temps r√©el: {e}")
    
    async def check_positions_consistency(self):
        """V√©rifie la coh√©rence entre les positions en m√©moire et les soldes Binance + g√®re la surexposition"""
        try:
            account_info = self.binance_client.get_account()
            balances = {b['asset']: float(b['free']) for b in account_info['balances']}
            total_capital = self.get_total_capital()
            max_exposure_per_asset = total_capital * self.config.MAX_EXPOSURE_PER_ASSET_PERCENT / 100
            
            # 1. V√©rification des incoh√©rences de positions trac√©es
            if self.open_positions:
                inconsistent_positions = []
                for trade_id, trade in self.open_positions.items():
                    base_asset = trade.pair.replace('EUR', '')
                    available_balance = balances.get(base_asset, 0)
                    
                    # V√©rification si le solde est coh√©rent avec la position
                    if available_balance < trade.size * 0.95:  # Tol√©rance de 5%
                        inconsistent_positions.append({
                            'trade_id': trade_id,
                            'symbol': trade.pair,
                            'expected': trade.size,
                            'actual': available_balance,
                            'difference': trade.size - available_balance
                        })
                
                if inconsistent_positions:
                    self.logger.warning(f"‚ö†Ô∏è {len(inconsistent_positions)} positions incoh√©rentes d√©tect√©es:")
                    for pos in inconsistent_positions:
                        self.logger.warning(f"   {pos['symbol']}: attendu {pos['expected']:.8f}, r√©el {pos['actual']:.8f} (diff: {pos['difference']:.8f})")
            
            # 2. V√âRIFICATION CRITIQUE : Surexposition sur soldes existants
            overexposed_assets = []
            for asset, balance in balances.items():
                if asset == 'EUR' or balance <= 0.00001:
                    continue
                    
                try:
                    # Calcul exposition actuelle de cet asset
                    current_exposure = self.get_asset_exposure(asset)
                    
                    if current_exposure > max_exposure_per_asset:
                        overexposed_assets.append({
                            'asset': asset,
                            'current_exposure': current_exposure,
                            'max_allowed': max_exposure_per_asset,
                            'excess_eur': current_exposure - max_exposure_per_asset,
                            'balance': balance
                        })
                        
                except Exception as e:
                    self.logger.debug(f"‚ö†Ô∏è Impossible de v√©rifier exposition {asset}: {e}")
                    continue
            
            # 3. CORRECTION AUTOMATIQUE des surexpositions
            if overexposed_assets:
                self.logger.warning(f"üö® SUREXPOSITION D√âTECT√âE sur {len(overexposed_assets)} asset(s)!")
                
                for asset_info in overexposed_assets:
                    asset = asset_info['asset']
                    excess_eur = asset_info['excess_eur']
                    current_exposure = asset_info['current_exposure']
                    max_allowed = asset_info['max_allowed']
                    
                    self.logger.warning(f"   üî• {asset}: {current_exposure:.2f} EUR > {max_allowed:.2f} EUR (exc√®s: {excess_eur:.2f} EUR)")
                    
                    # Calculer quelle quantit√© vendre pour revenir dans la limite
                    try:
                        symbol = asset + 'EUR'
                        ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                        current_price = float(ticker['price'])
                        
                        # Quantit√© √† vendre = exc√®s en EUR / prix actuel
                        quantity_to_sell = excess_eur / current_price
                        balance = asset_info['balance']
                        
                        # Ne pas vendre plus que ce qu'on a
                        if quantity_to_sell > balance:
                            quantity_to_sell = balance * 0.95  # Marge de s√©curit√©
                        
                        # Arrondir selon les r√®gles de la paire
                        quantity_to_sell = self.round_quantity(symbol, quantity_to_sell)
                        
                        if quantity_to_sell > 0:
                            self.logger.warning(f"   üîß VENTE FORC√âE {asset}: {quantity_to_sell:.8f} ({quantity_to_sell * current_price:.2f} EUR)")
                            
                            # Ex√©cuter la vente d'urgence
                            try:
                                order = self.binance_client.order_market_sell(
                                    symbol=symbol,
                                    quantity=quantity_to_sell
                                )
                                
                                self.logger.info(f"‚úÖ SUREXPOSITION CORRIG√âE: Vendu {quantity_to_sell:.8f} {asset} pour {quantity_to_sell * current_price:.2f} EUR")
                                
                                # Notification Telegram d'urgence
                                message = f"üö® CORRECTION SUREXPOSITION\n"
                                message += f"Asset: {asset}\n"
                                message += f"Vendu: {quantity_to_sell:.8f} ({quantity_to_sell * current_price:.2f} EUR)\n"
                                message += f"Exposition avant: {current_exposure:.2f} EUR\n"
                                message += f"Limite: {max_allowed:.2f} EUR"
                                
                                await self.telegram_notifier.send_message(message)
                                
                            except Exception as e:
                                self.logger.error(f"‚ùå √âCHEC vente forc√©e {asset}: {e}")
                                
                    except Exception as e:
                        self.logger.error(f"‚ùå Erreur calcul vente forc√©e {asset}: {e}")
            
            # 4. D√©tection de soldes non trac√©s (positions fant√¥mes inverses)
            for asset, balance in balances.items():
                if asset == 'EUR' or balance <= 0.001:
                    continue
                    
                # V√©rifier si on a un solde significatif sans position trac√©e
                has_tracked_position = any(trade.pair.replace('EUR', '') == asset for trade in self.open_positions.values())
                
                if not has_tracked_position and balance > 0.001:
                    try:
                        symbol = asset + 'EUR'
                        ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                        current_price = float(ticker['price'])
                        value_eur = balance * current_price
                        
                        if value_eur > 100:  # Seuil significatif
                            self.logger.warning(f"‚ö†Ô∏è Incoh√©rence d√©tect√©e: {asset} balance={balance:.6f} mais 0 positions en m√©moire")
                            
                    except Exception:
                        pass
                        
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification coh√©rence positions: {e}")

    def calculate_volatility_1h(self, symbol: str) -> float:
        """
        Calcule la volatilit√© sur les 12 derni√®res heures pour une paire.
        M√©thode : variation max-min sur prix moyen (en %).
        """
        try:
            # R√©cup√©rer les donn√©es horaires (sur 12 heures pour une meilleure moyenne)
            klines = self.binance_client.get_historical_klines(
                symbol, "1h", "12 hours ago UTC"
            )

            if len(klines) < 2:
                return 0.0

            # Extraire les prix de cl√¥ture
            prices = [float(kline[4]) for kline in klines]

            if len(prices) >= 2:
                max_price = max(prices)
                min_price = min(prices)
                avg_price = sum(prices) / len(prices)

                if avg_price > 0:
                    volatility = ((max_price - min_price) / avg_price) * 100
                    self.logger.debug(f"üìä Volatilit√© 12h {symbol}: {volatility:.2f}%")
                    return volatility
                else:
                    return 0.0

            return 0.0

        except Exception as e:
            self.logger.error(f"‚ùå Erreur calcul volatilit√© 12h {symbol}: {e}")
            return 0.0

    def count_trades_per_pair(self, symbol: str) -> int:
        """Compte le nombre de trades ouverts pour une paire - V√âRIFICATION RENFORC√âE"""
        # Comptage en m√©moire par symbole
        memory_count = len([trade for trade_id, trade in self.open_positions.items() 
                           if trade.pair == symbol])
        
        # V√©rification suppl√©mentaire via solde Binance
        try:
            base_asset = symbol.replace('EUR', '')
            binance_balance = self.get_asset_balance(base_asset)
            
            # Si on a un solde significatif mais pas de position en m√©moire = incoh√©rence
            if binance_balance > 0.001 and memory_count == 0:
                self.logger.warning(f"‚ö†Ô∏è Incoh√©rence d√©tect√©e: {base_asset} balance={binance_balance:.6f} mais 0 positions en m√©moire")
                # Consid√©rer qu'on a d√©j√† une position pour √©viter la surexposition
                return 1
            
            return memory_count
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification solde {symbol}: {e}")
            # En cas d'erreur, on est conservateur et on suppose qu'on a d√©j√† des positions
            return max(memory_count, 1)  # Au minimum 1 pour √©viter le sur-trading

    def can_open_position_enhanced(self, symbol: str, volatility: float) -> tuple[bool, str]:
        """V√©rifie si on peut ouvrir une position selon les nouvelles r√®gles"""
        # 1. V√©rifier limite trades par paire - STRICT
        current_trades = self.count_trades_per_pair(symbol)
        if current_trades >= self.config.MAX_TRADES_PER_PAIR:
            return False, f"Limite trades par paire atteinte ({current_trades}/{self.config.MAX_TRADES_PER_PAIR})"
        
        # 2. V√©rifier volatilit√© minimum
        if volatility < self.config.MIN_VOLATILITY_1H_PERCENT:
            return False, f"Volatilit√© insuffisante ({volatility:.2f}% < {self.config.MIN_VOLATILITY_1H_PERCENT}%)"
        
        # 3. V√©rifier nombre total de positions
        total_open_positions = len(self.open_positions)
        if total_open_positions >= self.config.MAX_OPEN_POSITIONS:
            return False, f"Limite positions totales atteinte ({total_open_positions}/{self.config.MAX_OPEN_POSITIONS})"
        
        # 4. V√âRIFICATION EXPOSITION : Contr√¥ler AVANT + APR√àS la nouvelle position
        base_asset = symbol.replace('EUR', '')
        current_exposure = self.get_asset_exposure(base_asset)
        total_capital = self.get_total_capital()
        max_exposure_per_asset = total_capital * self.config.MAX_EXPOSURE_PER_ASSET_PERCENT / 100
        
        # Calcul de la nouvelle exposition apr√®s ajout de la position
        new_position_size = self.calculate_position_size(symbol, volatility)
        future_exposure = current_exposure + new_position_size
        
        if current_exposure > max_exposure_per_asset:
            return False, f"Exposition {base_asset} d√©j√† trop √©lev√©e ({current_exposure:.2f} EUR > {max_exposure_per_asset:.2f} EUR = {self.config.MAX_EXPOSURE_PER_ASSET_PERCENT}% du capital)"
        
        if future_exposure > max_exposure_per_asset:
            return False, f"Nouvelle position cr√©erait surexposition {base_asset} ({current_exposure:.2f} + {new_position_size:.2f} = {future_exposure:.2f} EUR > {max_exposure_per_asset:.2f} EUR = {self.config.MAX_EXPOSURE_PER_ASSET_PERCENT}% du capital)"
        
        # 5. V√âRIFICATION CAPITAL : Capital EUR minimum disponible avec marge
        eur_balance = self.get_asset_balance('EUR')
        if eur_balance < new_position_size * 1.1:  # Marge de s√©curit√© 10%
            return False, f"Capital EUR insuffisant ({eur_balance:.2f} < {new_position_size * 1.1:.2f} EUR requis)"
        
        return True, "OK"

    def should_timeout_position(self, trade: Trade, current_price: float, volatility: float) -> tuple[bool, str]:
        """D√©termine si une position doit √™tre ferm√©e par timeout selon les nouveaux crit√®res"""
        # Calcul dur√©e et P&L
        duration_minutes = (datetime.now() - trade.timestamp).total_seconds() / 60
        pnl_percent = (current_price - trade.entry_price) / trade.entry_price * 100
        
        # D√©terminer timeout selon volatilit√©
        timeout_threshold = self.config.TRADE_TIMEOUT_LOW_VOLATILITY if volatility < 2.0 else self.config.TRADE_TIMEOUT_HIGH_VOLATILITY
        
        # V√©rifier conditions de timeout
        if duration_minutes > timeout_threshold:
            # P&L dans la zone de timeout
            min_range, max_range = self.config.MIN_TIMEOUT_PROFIT_RANGE
            if min_range <= pnl_percent <= max_range:
                # TODO: V√©rifier indicateurs techniques (MACD, RSI neutres)
                return True, f"TIMEOUT_ADAPTATIF ({duration_minutes:.0f}min, P&L:{pnl_percent:+.2f}%)"
        
        return False, ""

    async def check_momentum_exit(self, trade: Trade, current_price: float, pnl_percent: float) -> tuple[bool, str]:
        """V√©rifie si on doit sortir pour faiblesse du momentum"""
        try:
            # V√©rifier si P&L dans la zone de momentum faible
            min_range, max_range = self.config.MOMENTUM_PNL_RANGE
            if not (min_range <= pnl_percent <= max_range):
                return False, ""  # P&L en dehors de la zone de momentum faible
            
            # R√©cup√©ration des donn√©es techniques
            klines = self.binance_client.get_klines(
                symbol=trade.pair,
                interval=getattr(Client, f'KLINE_INTERVAL_{self.config.TIMEFRAME}'),
                limit=50
            )
            
            if len(klines) < 30:
                return False, ""
            
            # Pr√©paration des donn√©es
            df = pd.DataFrame(klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades_count', 'taker_buy_base', 'taker_buy_quote', 'ignore'
            ])
            
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = df[col].astype(float)
            
            # Calcul RSI
            rsi = talib.RSI(df['close'], timeperiod=self.config.RSI_PERIOD) # type: ignore
            if np.isnan(rsi.iloc[-1]):
                return False, ""
            
            # Calcul MACD
            macd, macdsignal, macdhist = talib.MACD(df['close']) # type: ignore
            if np.isnan(macdhist.iloc[-1]):
                return False, ""
            
            # Conditions de sortie momentum faible
            rsi_condition = rsi.iloc[-1] < self.config.MOMENTUM_RSI_THRESHOLD
            macd_condition = macdhist.iloc[-1] < 0 if self.config.MOMENTUM_MACD_NEGATIVE else True
            
            if rsi_condition and macd_condition:
                reason = f"Momentum faible d√©tect√© (RSI:{rsi.iloc[-1]:.1f}, MACD_hist:{macdhist.iloc[-1]:.6f}, P&L:{pnl_percent:+.2f}%)"
                return True, reason
            
            return False, ""
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification momentum {trade.pair}: {e}")
            return False, ""
