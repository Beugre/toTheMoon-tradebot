"""
Bot de Trading Scalping Automatis√© - CAPITAL DYNAMIQUE USDC
Strat√©gie multi-paires USDC avec gestion avanc√©e des risques et liquidit√© maximale
"""

import asyncio
import json
import logging
import os
import time
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from typing import Dict, List, Optional, Tuple

# Trading & APIs
import ccxt
import gspread
import numpy as np
import pandas as pd
import talib
# Notifications & Logging
import telegram
from binance.client import Client
from binance.enums import (ORDER_TYPE_LIMIT, ORDER_TYPE_MARKET, SIDE_BUY, SIDE_SELL,
                           TIME_IN_FORCE_GTC)
from binance.exceptions import BinanceAPIException, BinanceOrderException
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Bot

# Configuration
from config import API_CONFIG, BLACKLISTED_PAIRS, TradingConfig
from trading_hours import (get_current_trading_session, get_hours_status_message,
                           get_trading_intensity, is_trading_hours_active)
from utils.database import TradingDatabase
from utils.enhanced_sheets_logger import EnhancedSheetsLogger
from utils.firebase_logger import firebase_logger  # type: ignore
from utils.logger import setup_logger
from utils.risk_manager import RiskManager
from utils.technical_indicators import TechnicalAnalyzer
from utils.telegram_notifier import TelegramNotifier
from utils.trading_hours_notifier import TradingHoursNotifier  # type: ignore


class TradeDirection(Enum):
    LONG = "LONG"
    SHORT = "SHORT"

class TradeStatus(Enum):
    OPEN = "OPEN"
    CLOSED = "CLOSED"
    CANCELLED = "CANCELLED"

@dataclass
class Trade:
    id: str
    pair: str
    direction: TradeDirection
    size: float
    entry_price: float
    stop_loss: float
    take_profit: float
    trailing_stop: float
    timestamp: datetime
    status: TradeStatus = TradeStatus.OPEN
    exit_price: Optional[float] = None
    exit_timestamp: Optional[datetime] = None
    pnl: float = 0.0
    duration: Optional[timedelta] = None
    exit_reason: str = ""
    capital_before: Optional[float] = None  # AJOUT√â: Capital avant le trade
    capital_after: Optional[float] = None   # AJOUT√â: Capital apr√®s le trade
    db_id: Optional[int] = None

@dataclass
class PairScore:
    pair: str
    volatility: float
    volume: float
    score: float
    spread: float
    atr: float = 0.0

class ScalpingBot:
    def __init__(self):
        self.logger = setup_logger("ScalpingBot")
        self.config = TradingConfig()
        
        # Initialize APIs
        self.binance_client = Client(
            API_CONFIG.BINANCE_API_KEY,
            API_CONFIG.BINANCE_SECRET_KEY,
            testnet=API_CONFIG.TESTNET
        )
        
        # Initialize utilities
        self.risk_manager = RiskManager(self.config)
        self.technical_analyzer = TechnicalAnalyzer()
        self.telegram_notifier = TelegramNotifier(
            API_CONFIG.TELEGRAM_BOT_TOKEN, 
            API_CONFIG.TELEGRAM_CHAT_ID, 
            trading_config=self.config
        )
        
        # Initialize trading hours notifier
        self.hours_notifier = TradingHoursNotifier(
            self.telegram_notifier,
            self.config
        )
        
        # Initialize Google Sheets optionally
        if API_CONFIG.ENABLE_GOOGLE_SHEETS:
            try:
                self.sheets_logger = EnhancedSheetsLogger(
                    API_CONFIG.GOOGLE_SHEETS_CREDENTIALS, 
                    API_CONFIG.GOOGLE_SHEETS_SPREADSHEET_ID
                )
                logging.info(f"üìä Enhanced Google Sheets activ√© - ID: {API_CONFIG.GOOGLE_SHEETS_SPREADSHEET_ID}")
            except Exception as e:
                logging.error(f"‚ùå Erreur Enhanced Google Sheets: {e}")
                self.sheets_logger = None
        else:
            self.sheets_logger = None
            logging.info("üìä Google Sheets d√©sactiv√©")
        
        # Firebase Logger
        self.firebase_logger = firebase_logger
        if firebase_logger.firebase_initialized:
            logging.info("üî• Firebase Logger activ√© pour analytics temps r√©el")
        else:
            logging.info("üî• Firebase Logger d√©sactiv√©")
        
        # Bot state
        self.is_running = False
        self.daily_pnl = 0.0
        self.daily_trades = 0
        self.open_positions: Dict[str, Trade] = {}  # Une position par ID unique
        self.start_capital = 0.0
        self.current_capital = 0.0
        
        # Anti-fragmentation tracking
        self.last_trade_time: Dict[str, datetime] = {}  # Derniers trades par paire
        self.daily_target_reached = False
        self.daily_stop_loss_hit = False
        
        # OPTIMIS√â: Suivi des nouvelles protections
        self.trades_per_hour: List[datetime] = []  # Historique des trades par heure
        self.consecutive_losses = 0  # Compteur pertes cons√©cutives
        self.last_trade_results: List[bool] = []  # Historique r√©sultats (True=profit, False=perte)
        self.consecutive_loss_pause_until: Optional[datetime] = None  # Pause jusqu'√† cette datetime
        
        # Base de donn√©es
        self.database = TradingDatabase()
        
        # Compteur pour m√©triques temps r√©el
        self.metrics_counter = 0
        
        self.logger.info("üöÄ Bot de Trading Scalping initialis√©")

    async def start(self):
        """Lance le bot de trading"""
        self.logger.info("üü¢ [STARTING] D√©marrage du bot...")
        
        # Initialisation de la base de donn√©es
        await self.database.initialize_database()
        
        # üî• Chargement des positions sauvegard√©es depuis Firebase
        await self.load_open_positions_from_db()
        
        # Nettoyage des positions fant√¥mes
        await self.cleanup_phantom_positions()
        
        # Initialisation du capital
        await self.initialize_capital()
        
        # Notification de d√©marrage
        await self.telegram_notifier.send_start_notification(self.start_capital)
        
        # üî• LOG FIREBASE: D√©marrage du bot
        self.firebase_logger.log_message(
            level="INFO",
            message=f"Bot d√©marr√© avec capital: {self.start_capital:.2f} USDC",
            module="main",
            capital=self.start_capital,
            additional_data={
                'session_start': True,
                'config_version': 'v3.0_enhanced',
                'max_positions': self.config.MAX_OPEN_POSITIONS,
                'base_position_size': self.config.BASE_POSITION_SIZE_PERCENT
            }
        )
        
        self.is_running = True
        self.logger.info("üü¢ [RUNNING] Bot lanc√© avec succ√®s")
        
        # Boucle principale
        await self.main_loop()

    def detect_phantom_positions(self) -> List[str]:
        """D√©tecte les positions fant√¥mes (positions ouvertes sans solde correspondant)"""
        phantom_positions = []
        
        for trade_id, trade in self.open_positions.items():
            symbol = trade.pair
            try:
                base_asset = symbol.replace('USDC', '')
                available_balance = self.get_asset_balance(base_asset)
                
                # Position fant√¥me si solde pratiquement nul mais position ouverte
                if available_balance < self.config.PHANTOM_POSITION_THRESHOLD and trade.size > 0.001:
                    phantom_positions.append(trade_id)
                    self.logger.warning(f"üëª Position fant√¥me d√©tect√©e: {symbol}")
                    self.logger.warning(f"   Position size: {trade.size:.8f} {base_asset}")
                    self.logger.warning(f"   Solde disponible: {available_balance:.8f} {base_asset}")
                    
            except Exception as e:
                self.logger.error(f"‚ùå Erreur v√©rification position fant√¥me {symbol}: {e}")
                
        return phantom_positions
    
    async def cleanup_phantom_positions(self):
        """Nettoie automatiquement les positions fant√¥mes"""
        phantom_positions = self.detect_phantom_positions()
        
        if phantom_positions:
            self.logger.info(f"üßπ Nettoyage de {len(phantom_positions)} position(s) fant√¥me(s)")
            
            for trade_id in phantom_positions:
                try:
                    trade = self.open_positions[trade_id]
                    symbol = trade.pair
                    ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                    current_price = float(ticker['price'])
                    await self.close_position_virtually(trade_id, current_price, "PHANTOM_CLEANUP")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur nettoyage position fant√¥me {trade_id}: {e}")
                    
        return len(phantom_positions)

    async def save_open_positions_to_db(self):
        """Sauvegarde les positions ouvertes en Firebase pour persistance"""
        try:
            if not self.open_positions:
                return
            
            if not self.firebase_logger or not self.firebase_logger.firebase_initialized or not self.firebase_logger.firestore_db:
                self.logger.warning("üî• Firebase Firestore non disponible pour sauvegarde positions")
                return
            
            for trade_id, trade in self.open_positions.items():
                try:
                    position_data = {
                        'trade_id': trade_id,
                        'pair': trade.pair,
                        'entry_price': trade.entry_price,
                        'stop_loss': trade.stop_loss,
                        'take_profit': trade.take_profit,
                        'size': trade.size,
                        'timestamp': trade.timestamp.isoformat(),
                        'trailing_stop': getattr(trade, 'trailing_stop', 0),
                        'direction': trade.direction.value if hasattr(trade.direction, 'value') else str(trade.direction),
                        'saved_at': datetime.now().isoformat(),
                        'session_id': self.firebase_logger.session_id
                    }
                    
                    # Sauvegarde en Firebase Firestore
                    self.firebase_logger.firestore_db.collection('position_states').document(trade_id).set(position_data)
                    
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur sauvegarde position Firebase {trade_id}: {e}")
                    
            self.logger.debug(f"ÔøΩ {len(self.open_positions)} positions sauvegard√©es en Firebase")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur sauvegarde positions Firebase: {e}")

    async def load_open_positions_from_db(self):
        """Charge les positions ouvertes depuis Firebase au d√©marrage"""
        try:
            if not self.firebase_logger or not self.firebase_logger.firebase_initialized or not self.firebase_logger.firestore_db:
                self.logger.warning("üî• Firebase Firestore non disponible pour chargement positions")
                return
            
            # R√©cup√©ration des positions depuis Firestore
            positions_ref = self.firebase_logger.firestore_db.collection('position_states')
            saved_positions_docs = positions_ref.get()
            
            if not saved_positions_docs:
                self.logger.info("üìÇ Aucune position sauvegard√©e trouv√©e en Firebase")
                return
            
            saved_positions = []
            for doc in saved_positions_docs:
                saved_positions.append(doc.to_dict())
            
            if not saved_positions:
                self.logger.info("üìÇ Aucune position sauvegard√©e trouv√©e en Firebase")
                return
            
            positions_restored = 0
            
            for position_data in saved_positions:
                try:
                    trade_id = position_data['trade_id']
                    pair = position_data['pair']
                    
                    # V√©rifier que le solde existe toujours sur Binance
                    base_asset = pair.replace('USDC', '')
                    available_balance = self.get_asset_balance(base_asset)
                    
                    # Seulement restaurer si on a encore le solde
                    if available_balance >= float(position_data['size']) * 0.95:  # Tol√©rance 5%
                        
                        # Recr√©er l'objet Trade (classes d√©j√† d√©finies dans ce fichier)
                        trade = Trade(
                            id=position_data['trade_id'],
                            pair=pair,
                            direction=TradeDirection(position_data['direction']),
                            size=float(position_data['size']),
                            entry_price=float(position_data['entry_price']),
                            stop_loss=float(position_data['stop_loss']),
                            take_profit=float(position_data['take_profit']),
                            trailing_stop=float(position_data.get('trailing_stop', 0)),
                            timestamp=datetime.fromisoformat(position_data['timestamp'])
                        )
                        
                        # S'assurer que le statut est OPEN
                        trade.status = TradeStatus.OPEN
                        
                        # Restaurer dans open_positions
                        self.open_positions[trade_id] = trade
                        positions_restored += 1
                        
                        self.logger.info(f"üìÇ Position restaur√©e depuis Firebase: {pair}")
                        self.logger.info(f"   üí∞ Prix entr√©e: {trade.entry_price:.4f}")
                        self.logger.info(f"   üõë Stop Loss: {trade.stop_loss:.4f}")
                        self.logger.info(f"   üéØ Take Profit: {trade.take_profit:.4f}")
                        
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Position {pair} ignor√©e - solde insuffisant")
                        # Nettoyer cette position obsol√®te de Firebase
                        if self.firebase_logger.firestore_db:
                            self.firebase_logger.firestore_db.collection('position_states').document(trade_id).delete()
                        
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur restauration position Firebase {position_data.get('trade_id', 'unknown')}: {e}")
            
            if positions_restored > 0:
                self.logger.info(f"‚úÖ {positions_restored} position(s) restaur√©e(s) avec SL/TP depuis Firebase")
                
                # Firebase logging pour restauration
                if self.firebase_logger:
                    self.firebase_logger.log_message(
                        level="INFO",
                        message=f"POSITIONS RESTAUR√âES FIREBASE: {positions_restored} positions avec SL/TP intacts",
                        module="firebase_persistence",
                        additional_data={
                            'positions_restored': positions_restored,
                            'total_saved': len(saved_positions)
                        }
                    )
            else:
                self.logger.info("üìÇ Aucune position √† restaurer depuis Firebase")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur chargement positions Firebase: {e}")

    async def initialize_capital(self):
        """Initialise le capital √† partir de l'API Binance (USDC + valeur crypto)"""
        try:
            account_info = self.binance_client.get_account()
            usdc_balance = 0.0
            crypto_value = 0.0
            significant_balances = []
            self.logger.info("üí∞ Soldes disponibles:")
            for balance in account_info['balances']:
                free_balance = float(balance['free'])
                asset = balance['asset']
                if free_balance > 0:
                    if asset == 'USDC':
                        usdc_balance = free_balance
                        self.logger.info(f"   üí∂ {asset}: {free_balance:.2f}")
                    elif free_balance > 0.001:
                        # Conversion en USDC pour le capital initial
                        try:
                            symbol = asset + 'USDC'
                            ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                            price_usdc = float(ticker['price'])
                            value_usdc = free_balance * price_usdc
                            crypto_value += value_usdc
                            significant_balances.append(f"{asset}: {free_balance:.8f} ({value_usdc:.2f} USDC)")
                        except Exception:
                            significant_balances.append(f"{asset}: {free_balance:.8f}")
            if significant_balances:
                self.logger.info(f"   ü™ô Autres: {', '.join(significant_balances[:5])}")
            if usdc_balance == 0.0 and crypto_value == 0.0:
                raise ValueError("Aucun solde USDC ou crypto trouv√© dans le compte")
            total_capital = usdc_balance + crypto_value
            self.start_capital = total_capital
            self.current_capital = total_capital
            self.logger.info(f"üí∞ Capital initial total: {self.start_capital:.2f} USDC (USDC: {usdc_balance:.2f}, Crypto: {crypto_value:.2f})")
            self.logger.info(f"üìä Taille de position configur√©e: {self.config.BASE_POSITION_SIZE_PERCENT}% = {self.calculate_position_size():.2f} USDC")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur initialisation capital: {e}")
            raise

    async def main_loop(self):
        """Boucle principale du bot"""
        while self.is_running:
            try:
                # V√©rification et notification des changements d'horaires
                await self.hours_notifier.check_and_notify_schedule_changes()
                
                # V√©rification des horaires de trading
                if not is_trading_hours_active(self.config):
                    hours_status = get_hours_status_message(self.config)
                    self.logger.info(f"‚è∞ {hours_status}")
                    
                    # üî• LOG FIREBASE: Statut hors horaires
                    if self.firebase_logger:
                        self.firebase_logger.log_message(
                            level="INFO",
                            message=hours_status,
                            module="trading_hours",
                            capital=self.get_total_capital(),
                            additional_data={'trading_active': False, 'positions_open': len(self.open_positions)}
                        )
                    
                    await asyncio.sleep(300)  # Attendre 5 minutes si hors horaires
                    continue
                
                # V√©rification des conditions d'arr√™t quotidien
                if self.should_stop_daily_trading():
                    await self.handle_daily_stop()
                    break
                
                # OPTIMIS√â: V√©rification pause apr√®s pertes cons√©cutives
                if self.consecutive_loss_pause_until:
                    now = datetime.now()
                    if now < self.consecutive_loss_pause_until:
                        remaining_minutes = (self.consecutive_loss_pause_until - now).total_seconds() / 60
                        self.logger.info(f"‚è∏Ô∏è En pause de s√©curit√© - Reprise dans {remaining_minutes:.0f} minutes")
                        await asyncio.sleep(60)  # V√©rifier toutes les minutes
                        continue
                    else:
                        # Fin de pause - R√âINITIALISER COMPL√àTEMENT
                        self.logger.info(f"‚úÖ FIN DE PAUSE: Reprise du trading normal")
                        self.consecutive_loss_pause_until = None
                        
                        # üî• R√âINITIALISATION COMPL√àTE DU COMPTEUR
                        old_consecutive_losses = self.consecutive_losses
                        self.consecutive_losses = 0
                        self.last_trade_results = []  # Reset de l'historique des r√©sultats
                        
                        self.logger.info(f"üîÑ COMPTEURS R√âINITIALIS√âS:")
                        self.logger.info(f"   Pertes cons√©cutives: {old_consecutive_losses} ‚Üí {self.consecutive_losses}")
                        self.logger.info(f"   Historique r√©sultats: Reset complet")
                        
                        # Notification Telegram de reprise avec d√©tails
                        message = f"‚úÖ REPRISE DU TRADING\n"
                        message += f"Fin de la pause de s√©curit√©\n"
                        message += f"Compteurs r√©initialis√©s: {old_consecutive_losses} ‚Üí 0 pertes\n"
                        message += f"Le bot reprend ses activit√©s normalement"
                        await self.telegram_notifier.send_message(message)
                        
                        # Firebase logging pour reprise
                        if self.firebase_logger:
                            self.firebase_logger.log_message(
                                level="INFO",
                                message=f"‚úÖ REPRISE TRADING: Compteurs r√©initialis√©s ({old_consecutive_losses} ‚Üí 0)",
                                module="risk_management",
                                additional_data={
                                    'old_consecutive_losses': old_consecutive_losses,
                                    'new_consecutive_losses': 0,
                                    'pause_completed': True,
                                    'counters_reset': True
                                }
                            )
                
                # Affichage status horaires
                hours_status = get_hours_status_message(self.config)
                self.logger.info(f"‚è∞ {hours_status}")
                
                # Scan des paires USDC
                top_pairs = await self.scan_usdc_pairs()
                
                # Recherche de signaux
                for pair_info in top_pairs:
                    if len(self.open_positions) >= self.config.MAX_OPEN_POSITIONS:
                        break
                    
                    signal = await self.analyze_pair(pair_info.pair)
                    if signal:
                        await self.execute_trade(pair_info.pair, signal)
                
                # Gestion des positions ouvertes avec surveillance fr√©quente
                if len(self.open_positions) > 0:
                    # Surveillance rapide toutes les 5 secondes si positions ouvertes
                    await self.manage_open_positions()
                    
                    # Surveillance intensive pour positions √† risque
                    await self.intensive_position_monitoring()
                else:
                    # Surveillance normale si pas de positions
                    await self.manage_open_positions()
                
                # Enregistrement p√©riodique des m√©triques (toutes les 10 it√©rations)
                self.metrics_counter += 1
                if self.metrics_counter % 10 == 0:
                    await self.save_realtime_metrics()
                    
                    # Log Firebase pour m√©triques temps r√©el
                    if self.firebase_logger:
                        try:
                            total_capital = self.get_total_capital()
                            
                            # Log m√©triques importantes avec log_metric
                            self.firebase_logger.log_metric("total_capital", total_capital)
                            self.firebase_logger.log_metric("daily_pnl", self.daily_pnl)
                            self.firebase_logger.log_metric("open_positions", len(self.open_positions))
                            self.firebase_logger.log_metric("daily_trades", self.daily_trades)
                            
                        except Exception as e:
                            self.logger.error(f"‚ùå Erreur Firebase metrics: {e}")
                
                # V√©rification de coh√©rence des positions (toutes les 50 it√©rations)
                if self.metrics_counter % 50 == 0:
                    await self.check_positions_consistency()
                
                # üßπ Nettoyage automatique des miettes (toutes les 100 it√©rations)
                if self.metrics_counter % 100 == 0:
                    await self.convert_dust_to_bnb_if_needed()
                
                # V√©rification de la volatilit√© du march√© (toutes les 30 it√©rations)
                if self.metrics_counter % 30 == 0:
                    await self.check_market_volatility(top_pairs)
                
                # Pause avant le prochain scan
                if len(self.open_positions) > 0:
                    # Scan plus fr√©quent avec positions ouvertes (5s au lieu de 60s)
                    await asyncio.sleep(5)
                else:
                    # Scan normal sans positions
                    await asyncio.sleep(self.config.SCAN_INTERVAL)
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur dans la boucle principale: {e}")
                
                # Log Firebase pour erreurs critiques
                if self.firebase_logger:
                    try:
                        self.firebase_logger.log_message(
                            level="ERROR",
                            message=f"Erreur boucle principale: {str(e)}",
                            module="main_loop",
                            additional_data={'error_type': type(e).__name__}
                        )
                    except Exception:
                        pass  # √âviter les boucles d'erreur
                
                await asyncio.sleep(5)

    async def scan_usdc_pairs(self) -> List[PairScore]:
        """Scanne et classe les paires USDC par score avec logging d√©taill√© des d√©cisions pour Firebase"""
        try:
            self.logger.info("üîé Scan des paires USDC en cours...")
            
            # R√©cup√©ration des tickers avec gestion d'erreur am√©lior√©e
            try:
                # Essayer d'abord get_ticker() standard
                tickers = self.binance_client.get_ticker()
                if not tickers:
                    # Fallback sur 24hr ticker statistics
                    tickers = self.binance_client.get_24hr_ticker()
                
                usdc_pairs = [t for t in tickers if t['symbol'].endswith('USDC')]
                
                if not usdc_pairs:
                    self.logger.warning("‚ö†Ô∏è Aucune paire USDC trouv√©e")
                    return []
                    
                self.logger.info(f"üìä {len(usdc_pairs)} paires USDC trouv√©es")
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur r√©cup√©ration tickers: {e}")
                return []
            
            pair_scores = []
            exclusion_stats = {
                'blacklisted': 0,
                'low_volume': 0,
                'high_spread': 0,
                'low_volatility': 0,
                'total_analyzed': len(usdc_pairs)
            }
            excluded_pairs = {
                'blacklisted': [],
                'low_volume': [],
                'high_spread': [],
                'low_volatility': []
            }
            
            # üìä Liste pour stocker toutes les d√©cisions d√©taill√©es
            detailed_decisions = []
            
            for ticker in usdc_pairs:
                try:
                    symbol = ticker['symbol']
                    
                    # Gestion robuste des diff√©rentes cl√©s de prix possibles
                    current_price = None
                    if 'lastPrice' in ticker:
                        current_price = float(ticker['lastPrice'])
                    elif 'price' in ticker:
                        current_price = float(ticker['price'])
                    elif 'close' in ticker:
                        current_price = float(ticker['close'])
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Prix non trouv√© pour {symbol}, structure: {list(ticker.keys())}")
                        continue
                    
                    # Gestion robuste des autres champs
                    volume_usdc = float(ticker.get('quoteVolume', ticker.get('volume', 0)))
                    bid = float(ticker.get('bidPrice', ticker.get('bid', current_price * 0.999)))
                    ask = float(ticker.get('askPrice', ticker.get('ask', current_price * 1.001)))
                    spread = (ask - bid) / bid * 100 if bid > 0 else 0
                    price_change = abs(float(ticker.get('priceChangePercent', ticker.get('priceChange', 0))))
                    volatility_1h = self.calculate_volatility_1h(symbol)
                    
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur parsing ticker {ticker.get('symbol', 'UNKNOWN')}: {e}")
                    continue
                
                # üìä Structure d√©taill√©e de la d√©cision
                decision = {
                    "timestamp": datetime.now().isoformat(),
                    "pair": symbol,
                    "price": current_price,
                    "volume_24h": volume_usdc,
                    "spread_pct": spread,
                    "volatility_1h_pct": volatility_1h,
                    "volatility_24h_pct": price_change,
                    "signal_score": 0,  # Sera calcul√© plus tard si valid√©
                    "conditions": {
                        "blacklisted": symbol in BLACKLISTED_PAIRS,
                        "volume_ok": volume_usdc >= self.config.MIN_VOLUME_USDC,
                        "spread_ok": spread <= self.config.MAX_SPREAD_PERCENT,
                        "volatility_ok": volatility_1h >= self.config.MIN_VOLATILITY_1H_PERCENT,
                        "signal_score_ok": False,  # Sera v√©rifi√© plus tard
                        "breaking_high": False  # Sera v√©rifi√© plus tard
                    },
                    "final_decision": "PENDING",
                    "reason": ""
                }

                # Exclusion des paires blacklist√©es
                if symbol in BLACKLISTED_PAIRS:
                    exclusion_stats['blacklisted'] += 1
                    excluded_pairs['blacklisted'].append(symbol)
                    decision["final_decision"] = "REJECTED"
                    decision["reason"] = "Blacklisted pair"
                    detailed_decisions.append(decision)
                    continue
                
                # V√©rification volume minimum
                if volume_usdc < self.config.MIN_VOLUME_USDC:
                    exclusion_stats['low_volume'] += 1
                    excluded_pairs['low_volume'].append(f"{symbol}({volume_usdc/1000000:.1f}M)")
                    decision["final_decision"] = "REJECTED"
                    decision["reason"] = f"Volume < {self.config.MIN_VOLUME_USDC/1000000:.0f}M ({volume_usdc/1000000:.1f}M)"
                    detailed_decisions.append(decision)
                    continue
                
                # V√©rification spread
                if spread > self.config.MAX_SPREAD_PERCENT:
                    exclusion_stats['high_spread'] += 1
                    excluded_pairs['high_spread'].append(f"{symbol}({spread:.2f}%)")
                    decision["final_decision"] = "REJECTED"
                    decision["reason"] = f"Spread > {self.config.MAX_SPREAD_PERCENT}% ({spread:.2f}%)"
                    detailed_decisions.append(decision)
                    continue
                
                # V√©rification volatilit√© horaire
                if volatility_1h < self.config.MIN_VOLATILITY_1H_PERCENT:
                    exclusion_stats['low_volatility'] += 1
                    excluded_pairs['low_volatility'].append(f"{symbol}({volatility_1h:.1f}%)")
                    decision["final_decision"] = "REJECTED"
                    decision["reason"] = f"Volatility 1h < {self.config.MIN_VOLATILITY_1H_PERCENT}% ({volatility_1h:.1f}%)"
                    detailed_decisions.append(decision)
                    continue
                
                # ‚úÖ Paire valid√©e pour les crit√®res de base - analyser les signaux
                try:
                    # Analyse technique pour calculer le score
                    klines = self.binance_client.get_klines(
                        symbol=symbol,
                        interval=getattr(Client, f'KLINE_INTERVAL_{self.config.TIMEFRAME}'),
                        limit=100
                    )
                    
                    if len(klines) >= 50:
                        df = pd.DataFrame(klines, columns=[
                            'timestamp', 'open', 'high', 'low', 'close', 'volume',
                            'close_time', 'quote_volume', 'trades_count', 'taker_buy_base', 'taker_buy_quote', 'ignore'
                        ])
                        
                        for col in ['open', 'high', 'low', 'close', 'volume']:
                            df[col] = df[col].astype(float)
                        
                        analysis = self.technical_analyzer.analyze_pair(df, symbol)
                        decision["signal_score"] = analysis.total_score
                        decision["conditions"]["signal_score_ok"] = len(analysis.signals) >= self.config.MIN_SIGNAL_CONDITIONS
                        
                        # V√©rification cassure si activ√©e
                        if self.config.ENABLE_BREAKOUT_CONFIRMATION:
                            breaking_high = self.check_breakout_confirmation(symbol, current_price)
                            decision["conditions"]["breaking_high"] = breaking_high
                        else:
                            decision["conditions"]["breaking_high"] = True
                        
                        # D√©cision finale
                        if decision["conditions"]["signal_score_ok"] and decision["conditions"]["breaking_high"]:
                            decision["final_decision"] = "VALIDATED"
                            decision["reason"] = f"All filters passed ‚úÖ (Score: {analysis.total_score:.1f}, Signals: {len(analysis.signals)})"
                            
                            # Ajouter √† la liste des paires valid√©es
                            atr = await self.calculate_atr(symbol)
                            score = (0.6 * price_change + 0.4 * (volume_usdc / 1000000))
                            
                            pair_scores.append(PairScore(
                                pair=symbol,
                                volatility=price_change,
                                volume=volume_usdc,
                                score=score,
                                spread=spread,
                                atr=atr
                            ))
                        else:
                            decision["final_decision"] = "REJECTED"
                            reasons = []
                            if not decision["conditions"]["signal_score_ok"]:
                                reasons.append(f"Signal score < {self.config.MIN_SIGNAL_CONDITIONS} ({len(analysis.signals)})")
                            if not decision["conditions"]["breaking_high"]:
                                reasons.append("Not breaking high")
                            decision["reason"] = " & ".join(reasons)
                    else:
                        decision["final_decision"] = "REJECTED"
                        decision["reason"] = "Insufficient klines data"
                        
                except Exception as e:
                    decision["final_decision"] = "REJECTED"
                    decision["reason"] = f"Analysis error: {str(e)}"
                
                detailed_decisions.append(decision)
            
            # ÔøΩ LOGGING FIREBASE: Sauvegarder toutes les d√©cisions d√©taill√©es
            if self.firebase_logger and detailed_decisions:
                try:
                    # Logger chaque d√©cision individuelle dans la collection result_pair_scan
                    for decision in detailed_decisions:
                        # Ajouter les seuils de configuration √† chaque d√©cision
                        decision["config_min_volume"] = self.config.MIN_VOLUME_USDC
                        decision["config_max_spread"] = self.config.MAX_SPREAD_PERCENT
                        decision["config_min_volatility_1h"] = self.config.MIN_VOLATILITY_1H_PERCENT
                        decision["config_min_signal_conditions"] = self.config.MIN_SIGNAL_CONDITIONS
                        
                        self.firebase_logger.log_pair_scan_result(decision)
                    
                    # Statistiques globales du scan
                    validated_count = sum(1 for d in detailed_decisions if d['final_decision'] == 'VALIDATED')
                    rejected_count = sum(1 for d in detailed_decisions if d['final_decision'] == 'REJECTED')
                    
                    # Logger le r√©sum√© du scan
                    summary_data = {
                        'total_pairs': len(detailed_decisions),
                        'validated_pairs': validated_count,
                        'rejected_pairs': rejected_count,
                        'exclusion_stats': exclusion_stats,
                        'config_thresholds': {
                            'min_volume': self.config.MIN_VOLUME_USDC,
                            'max_spread': self.config.MAX_SPREAD_PERCENT,
                            'min_volatility_1h': self.config.MIN_VOLATILITY_1H_PERCENT,
                            'min_signal_conditions': self.config.MIN_SIGNAL_CONDITIONS
                        },
                        'scan_duration_ms': 0  # Peut √™tre ajout√© plus tard si besoin
                    }
                    
                    self.firebase_logger.log_scan_summary(summary_data)
                    
                    self.logger.info(f"üî• {len(detailed_decisions)} d√©cisions et r√©sum√© sauvegard√©s dans result_pair_scan")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur logging Firebase d√©cisions: {e}")
            
            # ÔøΩüìä LOGGING D√âTAILL√â DES EXCLUSIONS (conserv√© pour logs console)
            self.logger.info(f"üìä Scan termin√© - {exclusion_stats['total_analyzed']} paires analys√©es:")
            self.logger.info(f"   ‚ö´ Blacklist√©es: {exclusion_stats['blacklisted']} paires")
            if excluded_pairs['blacklisted']:
                self.logger.info(f"      {', '.join(excluded_pairs['blacklisted'][:5])}")
            
            self.logger.info(f"   üìâ Volume < {self.config.MIN_VOLUME_USDC/1000000:.0f}M: {exclusion_stats['low_volume']} paires")
            if excluded_pairs['low_volume'][:3]:
                self.logger.info(f"      {', '.join(excluded_pairs['low_volume'][:3])}")
            
            self.logger.info(f"   üìà Spread > {self.config.MAX_SPREAD_PERCENT}%: {exclusion_stats['high_spread']} paires")
            if excluded_pairs['high_spread'][:3]:
                self.logger.info(f"      {', '.join(excluded_pairs['high_spread'][:3])}")
            
            self.logger.info(f"   ‚è±Ô∏è Volatilit√© 1h < {self.config.MIN_VOLATILITY_1H_PERCENT}%: {exclusion_stats['low_volatility']} paires")
            if excluded_pairs['low_volatility'][:3]:
                self.logger.info(f"      {', '.join(excluded_pairs['low_volatility'][:3])}")
            
            validated_pairs = sum(1 for d in detailed_decisions if d['final_decision'] == 'VALIDATED')
            rejected_by_signals = sum(1 for d in detailed_decisions if d['final_decision'] == 'REJECTED' and 'Signal score' in d['reason'])
            self.logger.info(f"   üéØ Signaux insuffisants: {rejected_by_signals} paires")
            
            # üîÑ LOGIQUE ADAPTATIVE si pas assez de paires valid√©es (conserv√©e)
            if len(pair_scores) < 3 and hasattr(self.config, 'ADAPTIVE_FILTERING') and self.config.ADAPTIVE_FILTERING:
                self.logger.warning(f"‚ö†Ô∏è Seulement {len(pair_scores)} paires valid√©es - Activation mode adaptatif")
                
                # Relancer avec crit√®res assouplis
                pair_scores_fallback = []
                min_vol_fallback = getattr(self.config, 'MIN_VOLUME_USDC_FALLBACK', 30000000)
                min_volatility_fallback = getattr(self.config, 'MIN_VOLATILITY_1H_FALLBACK', 0.5)
                
                self.logger.info(f"üîÑ Nouveaux crit√®res: Volume >{min_vol_fallback/1000000:.0f}M, Volatilit√© >{min_volatility_fallback}%")
                
                for ticker in usdc_pairs:
                    symbol = ticker['symbol']
                    
                    if symbol in BLACKLISTED_PAIRS:
                        continue
                    
                    volume_usdc = float(ticker['quoteVolume'])
                    if volume_usdc < min_vol_fallback:
                        continue
                    
                    bid = float(ticker['bidPrice'])
                    ask = float(ticker['askPrice'])
                    spread = (ask - bid) / bid * 100
                    if spread > self.config.MAX_SPREAD_PERCENT:
                        continue
                    
                    price_change = abs(float(ticker['priceChangePercent']))
                    volatility_1h = self.calculate_volatility_1h(symbol)
                    if volatility_1h < min_volatility_fallback:
                        continue
                    
                    atr = await self.calculate_atr(symbol)
                    score = (0.6 * price_change + 0.4 * (volume_usdc / 1000000))
                    
                    pair_scores_fallback.append(PairScore(
                        pair=symbol,
                        volatility=price_change,
                        volume=volume_usdc,
                        score=score,
                        spread=spread,
                        atr=atr
                    ))
                
                if len(pair_scores_fallback) > len(pair_scores):
                    pair_scores = pair_scores_fallback
                    self.logger.info(f"‚úÖ Mode adaptatif: {len(pair_scores)} paires trouv√©es avec crit√®res assouplis")
            
            # Tri par score d√©croissant
            pair_scores.sort(key=lambda x: x.score, reverse=True)
            top_pairs = pair_scores[:self.config.MAX_PAIRS_TO_ANALYZE]
            
            self.logger.info(f"‚úÖ {len(pair_scores)} paires valid√©es, Top {len(top_pairs)} s√©lectionn√©es:")
            for i, pair in enumerate(top_pairs):
                self.logger.info(f"  {i+1}. {pair.pair} - Score: {pair.score:.2f} - Vol: {pair.volatility:.2f}% - Volume: {pair.volume/1000000:.1f}M USDC")
            
            # üî• LOG FIREBASE: R√©sultat du scan avec exclusions d√©taill√©es
            if self.firebase_logger and pair_scores:
                top_3_pairs = [f"{p.pair}({p.score:.1f})" for p in top_pairs[:3]]
                self.firebase_logger.log_message(
                    level="INFO",
                    message=f"üìä Scan termin√©: {len(pair_scores)} paires valid√©es, Top 3: {', '.join(top_3_pairs)}",
                    module="pair_scanner",
                    additional_data={
                        'total_pairs_analyzed': exclusion_stats['total_analyzed'],
                        'pairs_validated': len(pair_scores),
                        'top_pairs_selected': len(top_pairs),
                        'exclusions': exclusion_stats,
                        'excluded_samples': {
                            'low_volume': excluded_pairs['low_volume'][:3],
                            'high_spread': excluded_pairs['high_spread'][:3],
                            'low_volatility': excluded_pairs['low_volatility'][:3]
                        },
                        'best_pair': top_pairs[0].pair if top_pairs else None,
                        'best_score': top_pairs[0].score if top_pairs else 0
                    }
                )
            
            return top_pairs
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors du scan des paires: {e}")
            return []

    async def calculate_atr(self, symbol: str, period: int = 14) -> float:
        """Calcule l'ATR pour une paire"""
        try:
            klines = self.binance_client.get_klines(
                symbol=symbol,
                interval=Client.KLINE_INTERVAL_1MINUTE,
                limit=period + 1
            )
            
            if len(klines) < period:
                return 0.0
            
            high = np.array([float(k[2]) for k in klines])
            low = np.array([float(k[3]) for k in klines])
            close = np.array([float(k[4]) for k in klines])
            
            atr = talib.ATR(high, low, close, timeperiod=period) # type: ignore
            return atr[-1] if not np.isnan(atr[-1]) else 0.0
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur calcul ATR pour {symbol}: {e}")
            return 0.0

    async def analyze_pair(self, symbol: str) -> Optional[TradeDirection]:
        """Analyse technique d'une paire pour d√©tecter un signal"""
        try:
            # R√©cup√©ration des donn√©es
            klines = self.binance_client.get_klines(
                symbol=symbol,
                interval=getattr(Client, f'KLINE_INTERVAL_{self.config.TIMEFRAME}'),
                limit=100
            )
            
            if len(klines) < 50:
                return None
            
            # Pr√©paration des donn√©es
            df = pd.DataFrame(klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades_count', 'taker_buy_base', 'taker_buy_quote', 'ignore'
            ])
            
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = df[col].astype(float)
            
            # üöÄ ANALYSE TECHNIQUE AVANC√âE avec TechnicalAnalyzer
            analysis = self.technical_analyzer.analyze_pair(df, symbol)
            
            # V√©rification avec la configuration MIN_SIGNAL_CONDITIONS
            if self.technical_analyzer.is_valid_signal(analysis, self.config.MIN_SIGNAL_CONDITIONS):
                self.logger.info(f"‚úÖ Signal d√©tect√© : {symbol}")
                self.logger.info(f"   üìä Score total: {analysis.total_score:.1f}")
                self.logger.info(f"   üéØ Recommandation: {analysis.recommendation}")
                self.logger.info(f"   üìà Tendance: {analysis.trend}")
                self.logger.info(f"   ‚ö° Momentum: {analysis.momentum}")
                self.logger.info(f"   üìä Conditions valid√©es: {len(analysis.signals)}/{self.config.MIN_SIGNAL_CONDITIONS}")
                
                # Firebase logging pour signal valide
                if self.firebase_logger:
                    signals_list = []
                    for signal in analysis.signals:
                        signals_list.append({
                            'indicator': signal.indicator,
                            'description': signal.description,
                            'strength': signal.strength.name
                        })
                    
                    self.firebase_logger.log_message(
                        level="INFO",
                        message=f"‚úÖ SIGNAL VALIDE D√âTECT√â: {symbol} (Score: {analysis.total_score:.1f})",
                        module="signal_detection",
                        pair=symbol,
                        additional_data={
                            'symbol': symbol,
                            'total_score': analysis.total_score,
                            'recommendation': analysis.recommendation,
                            'trend': analysis.trend,
                            'momentum': analysis.momentum,
                            'conditions_count': len(analysis.signals),
                            'min_conditions': self.config.MIN_SIGNAL_CONDITIONS,
                            'signals': signals_list
                        }
                    )
                
                # Log des signaux d√©tect√©s
                for signal in analysis.signals:
                    strength_emoji = {"WEAK": "üü°", "MODERATE": "üü†", "STRONG": "üî¥", "VERY_STRONG": "üü£"}
                    emoji = strength_emoji.get(signal.strength.name, "‚ö™")
                    self.logger.info(f"   {emoji} {signal.indicator}: {signal.description}")
                
                return TradeDirection.LONG
            
            # Log si signal insuffisant
            if len(analysis.signals) > 0:
                self.logger.info(f"‚ö†Ô∏è Signal {symbol} insuffisant: {len(analysis.signals)}/{self.config.MIN_SIGNAL_CONDITIONS} conditions (score: {analysis.total_score:.1f})")
                self.logger.info(f"   üéØ Recommandation: {analysis.recommendation}")
                for signal in analysis.signals[:3]:  # Max 3 signaux pour √©viter spam
                    strength_emoji = {"WEAK": "üü°", "MODERATE": "üü†", "STRONG": "üî¥", "VERY_STRONG": "üü£"}
                    emoji = strength_emoji.get(signal.strength.name, "‚ö™")
                    self.logger.info(f"   {emoji} {signal.indicator}: {signal.description}")
                    
                # Firebase logging pour signal insuffisant
                if self.firebase_logger:
                    signals_list = []
                    for signal in analysis.signals[:3]:
                        signals_list.append({
                            'indicator': signal.indicator,
                            'description': signal.description,
                            'strength': signal.strength.name
                        })
                    
                    self.firebase_logger.log_message(
                        level="WARNING",
                        message=f"‚ö†Ô∏è SIGNAL INSUFFISANT: {symbol} ({len(analysis.signals)}/{self.config.MIN_SIGNAL_CONDITIONS})",
                        module="signal_detection",
                        pair=symbol,
                        additional_data={
                            'symbol': symbol,
                            'total_score': analysis.total_score,
                            'recommendation': analysis.recommendation,
                            'conditions_count': len(analysis.signals),
                            'min_conditions': self.config.MIN_SIGNAL_CONDITIONS,
                            'signals': signals_list
                        }
                    )
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur analyse {symbol}: {e}")
            
            # Firebase logging pour erreur d'analyse
            if self.firebase_logger:
                self.firebase_logger.log_message(
                    level="ERROR",
                    message=f"‚ùå ERREUR ANALYSE: {symbol} - {str(e)}",
                    module="signal_detection",
                    pair=symbol,
                    additional_data={'error': str(e)}
                )
            
            return None

    async def execute_trade(self, symbol: str, direction: TradeDirection):
        """Ex√©cute un trade avec contr√¥le anti-fragmentation et logging d√©taill√© des donn√©es techniques"""
        try:
            # üö® CONTR√îLE ANTI-FRAGMENTATION
            now = datetime.now()
            if symbol in self.last_trade_time:
                time_since_last = (now - self.last_trade_time[symbol]).total_seconds()
                if time_since_last < self.config.MIN_TRADE_INTERVAL_SECONDS:
                    self.logger.info(f"üö´ Trade {symbol} bloqu√© - Trop r√©cent ({time_since_last:.0f}s < {self.config.MIN_TRADE_INTERVAL_SECONDS}s)")
                    
                    # Firebase logging pour trade bloqu√©
                    if self.firebase_logger:
                        self.firebase_logger.log_message(
                            level="WARNING",
                            message=f"üö´ TRADE BLOQU√â: {symbol} - Trop r√©cent",
                            module="trade_execution",
                            pair=symbol,
                            additional_data={
                                'time_since_last': time_since_last,
                                'min_interval': self.config.MIN_TRADE_INTERVAL_SECONDS,
                                'reason': 'anti_fragmentation'
                            }
                        )
                    
                    return
            
            # üìä COLLECTE DES DONN√âES TECHNIQUES COMPL√àTES pour logging d√©taill√©
            try:
                ticker_24h = self.binance_client.get_ticker(symbol=symbol)
                volume_usdc = float(ticker_24h.get('quoteVolume', ticker_24h.get('volume', 0)))
                bid = float(ticker_24h.get('bidPrice', ticker_24h.get('bid', 0)))
                ask = float(ticker_24h.get('askPrice', ticker_24h.get('ask', 0)))
                spread = (ask - bid) / bid * 100 if bid > 0 else 0
                price_change_24h = float(ticker_24h.get('priceChangePercent', ticker_24h.get('priceChange', 0)))
            except Exception as e:
                self.logger.error(f"‚ùå Erreur r√©cup√©ration ticker {symbol}: {e}")
                # Valeurs par d√©faut en cas d'erreur
                volume_usdc = 0
                spread = 0
                price_change_24h = 0
            
            # Calcul volatilit√© 1h
            volatility_1h = self.calculate_volatility_1h(symbol)
            
            # R√©cup√©ration des donn√©es pour analyse technique d√©taill√©e
            klines = self.binance_client.get_klines(
                symbol=symbol,
                interval=getattr(Client, f'KLINE_INTERVAL_{self.config.TIMEFRAME}'),
                limit=100
            )
            
            df = pd.DataFrame(klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades_count', 'taker_buy_base', 'taker_buy_quote', 'ignore'
            ])
            
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = df[col].astype(float)
            
            # Analyse technique d√©taill√©e
            analysis = self.technical_analyzer.analyze_pair(df, symbol)
            
            # Calcul RSI, MACD, EMA actuels
            closes = df['close'].values
            rsi_current = talib.RSI(closes, timeperiod=self.config.RSI_PERIOD)[-1] # type: ignore
            macd, macd_signal, macd_hist = talib.MACD(closes, # type: ignore
                                                      fastperiod=self.config.MACD_FAST_PERIOD,
                                                      slowperiod=self.config.MACD_SLOW_PERIOD, 
                                                      signalperiod=self.config.MACD_SIGNAL_PERIOD)
            ema_fast = talib.EMA(closes, timeperiod=self.config.EMA_FAST_PERIOD)[-1] # type: ignore
            ema_slow = talib.EMA(closes, timeperiod=self.config.EMA_SLOW_PERIOD)[-1] # type: ignore
            
            # Calculer la volatilit√© pour cette paire
            volatility = self.calculate_volatility_1h(symbol)
            
            # V√©rifications avant entr√©e avec nouveaux crit√®res
            can_open, reason = self.can_open_position_enhanced(symbol, volatility)
            if not can_open:
                self.logger.info(f"‚ùå Trade {symbol} refus√©: {reason}")
                
                # Firebase logging pour trade refus√©
                if self.firebase_logger:
                    self.firebase_logger.log_message(
                        level="WARNING",
                        message=f"‚ùå TRADE REFUS√â: {symbol} - {reason}",
                        module="trade_execution",
                        pair=symbol,
                        additional_data={
                            'volatility': volatility,
                            'reason': reason
                        }
                    )
                
                return
            
            # üöÄ PROTECTION VOLATILIT√â EXTR√äME
            if volatility > 30.0:  # Protection contre volatilit√© > 30%
                self.logger.warning(f"‚ö†Ô∏è VOLATILIT√â EXTR√äME {symbol}: {volatility:.2f}% > 30% - Trade refus√© pour √©viter gaps")
                
                # Firebase logging pour volatilit√© extr√™me
                if self.firebase_logger:
                    self.firebase_logger.log_message(
                        level="WARNING",
                        message=f"‚ö†Ô∏è VOLATILIT√â EXTR√äME: {symbol} - {volatility:.2f}%",
                        module="risk_management",
                        pair=symbol,
                        additional_data={
                            'volatility': volatility,
                            'max_allowed': 30.0,
                            'reason': 'extreme_volatility_gap_protection'
                        }
                    )
                return
            
            # üöÄ OPTIMIS√â: V√©rification cassure AVANT calculs co√ªteux
            current_price = float(self.binance_client.get_symbol_ticker(symbol=symbol)['price'])
            if not self.check_breakout_confirmation(symbol, current_price):
                self.logger.info(f"‚ùå Trade {symbol} refus√©: Cassure non confirm√©e (prix: {current_price:.4f})")
                
                # Firebase logging pour cassure non confirm√©e
                if self.firebase_logger:
                    self.firebase_logger.log_message(
                        level="WARNING",
                        message=f"‚ùå CASSURE NON CONFIRM√âE: {symbol}",
                        module="trade_execution",
                        pair=symbol,
                        additional_data={
                            'current_price': current_price,
                            'reason': 'breakout_not_confirmed'
                        }
                    )
                return
            
            # Informations d'allocation avant trade
            total_capital = self.get_total_capital()
            usdc_balance = self.get_asset_balance('USDC')
            base_asset = symbol.replace('USDC', '')
            current_exposure = self.get_asset_exposure(base_asset)
            
            # Calcul de la taille de position avec sizing adaptatif ANTI-FRAGMENTATION
            position_size = self.calculate_position_size(symbol, volatility)
            
            self.logger.info(f"üí∞ Allocation avant trade {symbol}:")
            self.logger.info(f"   üìä Capital total: {total_capital:.2f} USDC")
            self.logger.info(f"   ÔøΩ USDC disponible: {usdc_balance:.2f} USDC")
            self.logger.info(f"   üéØ Taille position: {position_size:.2f} USDC (volatilit√©: {volatility:.2f}%)")
            self.logger.info(f"   üìà Exposition {base_asset} actuelle: {current_exposure:.2f} USDC")
            self.logger.info(f"   üè¶ Positions ouvertes: {len(self.open_positions)}")
            
            # Firebase logging pour allocation avant trade
            if self.firebase_logger:
                self.firebase_logger.log_message(
                    level="INFO",
                    message=f"üí∞ ALLOCATION AVANT TRADE: {symbol}",
                    module="trade_execution",
                    pair=symbol,
                    capital=total_capital,
                    additional_data={
                        'total_capital': total_capital,
                        'usdc_balance': usdc_balance,
                        'position_size': position_size,
                        'volatility': volatility,
                        'current_exposure': current_exposure,
                        'open_positions': len(self.open_positions),
                        'base_asset': base_asset
                    }
                )
            
            # Calcul SL et TP (current_price d√©j√† r√©cup√©r√© lors de la v√©rification cassure)
            stop_loss = current_price * (1 - self.config.STOP_LOSS_PERCENT / 100)
            take_profit = current_price * (1 + self.config.TAKE_PROFIT_PERCENT / 100)
            trailing_stop = current_price * (1 + self.config.TRAILING_ACTIVATION_PERCENT / 100)
            
            # Log des niveaux de sortie incluant trailing stop
            self.logger.info(f"üéØ Niveaux de sortie pour {symbol}:")
            self.logger.info(f"   üõë Stop Loss: {stop_loss:.4f} USDC (-{self.config.STOP_LOSS_PERCENT}%)")
            self.logger.info(f"   üéØ Take Profit: {take_profit:.4f} USDC (+{self.config.TAKE_PROFIT_PERCENT}%)")
            self.logger.info(f"   üìà Trailing activation: {trailing_stop:.4f} USDC (+{self.config.TRAILING_ACTIVATION_PERCENT}%)")
            self.logger.info(f"   üîÑ Trailing step: {self.config.TRAILING_STEP_PERCENT}%")
            
            # Calcul de la quantit√©
            quantity = position_size / current_price
            
            # Validation et ajustement de la quantit√©
            is_valid, validation_msg, adjusted_quantity = self.validate_order_quantity(symbol, quantity, current_price)
            
            if not is_valid:
                self.logger.warning(f"‚ö†Ô∏è Quantit√© invalide pour {symbol}: {validation_msg}")
                # Utilisation de la quantit√© ajust√©e si possible
                if adjusted_quantity > 0:
                    quantity = adjusted_quantity
                    position_size = quantity * current_price  # Recalcul du capital engag√©
                    self.logger.info(f"üîß Quantit√© ajust√©e: {quantity:.8f} (capital: {position_size:.2f} USDC)")
                else:
                    self.logger.error(f"‚ùå Impossible de trader {symbol}: quantit√© minimale non respect√©e")
                    return
            
            # Arrondi final selon les r√®gles de la paire
            quantity = self.round_quantity(symbol, quantity)
            
            # V√©rification finale ANTI-FRAGMENTATION
            final_notional = quantity * current_price
            min_trade_size = getattr(self.config, 'MIN_POSITION_SIZE_USDC', 500.0)
            
            if final_notional < min_trade_size:
                self.logger.warning(f"üö´ Trade {symbol} bloqu√© - Taille insuffisante: {final_notional:.2f}‚Ç¨ < {min_trade_size}‚Ç¨ (ANTI-FRAGMENTATION)")
                return
                                  
            self.logger.info(f"‚úÖ Trade {symbol} valid√© - Taille: {final_notional:.2f}‚Ç¨ (>{min_trade_size}‚Ç¨)")
            
            # Firebase logging pour trade valid√©
            if self.firebase_logger:
                self.firebase_logger.log_message(
                    level="INFO",
                    message=f"‚úÖ TRADE VALID√â: {symbol} - Taille: {final_notional:.2f}‚Ç¨",
                    module="trade_execution",
                    pair=symbol,
                    additional_data={
                        'final_notional': final_notional,
                        'min_trade_size': min_trade_size,
                        'quantity': quantity,
                        'current_price': current_price,
                        'stop_loss': stop_loss,
                        'take_profit': take_profit,
                        'trailing_stop': trailing_stop
                    }
                )
            
            # Capital avant trade (AVANT l'achat)
            capital_before_trade = self.get_total_capital()
            
            # Passage de l'ordre
            order = self.binance_client.order_market_buy(
                symbol=symbol,
                quantity=quantity
            )
            
            # Cr√©ation du trade avec capital_before
            trade = Trade(
                id=order['orderId'],
                pair=symbol,
                direction=direction,
                size=quantity,
                entry_price=current_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                trailing_stop=trailing_stop,
                timestamp=datetime.now(),
                capital_before=capital_before_trade  # AJOUT√â: Stocker le capital avant trade
            )
            
            # Ajout aux positions ouvertes avec ID unique
            trade_id = f"{symbol}_{trade.id}_{int(datetime.now().timestamp())}"
            self.open_positions[trade_id] = trade

            # ÔøΩ CR√âATION D'ORDRES STOP LOSS AUTOMATIQUES BINANCE
            try:
                stop_loss_order_id = await self.create_automatic_stop_loss(trade, symbol, quantity)
                if stop_loss_order_id:
                    trade.stop_loss_order_id = stop_loss_order_id
                    self.logger.info(f"üõë Stop Loss automatique cr√©√©: {stop_loss_order_id}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è Impossible de cr√©er stop loss automatique pour {symbol}")
            except Exception as e:
                self.logger.error(f"‚ùå Erreur cr√©ation stop loss automatique: {e}")

            # ÔøΩüî• Sauvegarde imm√©diate en Firebase
            try:
                if self.firebase_logger and self.firebase_logger.firebase_initialized and self.firebase_logger.firestore_db:
                    position_data = {
                        'trade_id': trade_id,
                        'pair': symbol,
                        'entry_price': current_price,
                        'stop_loss': stop_loss,
                        'take_profit': take_profit,
                        'size': quantity,
                        'timestamp': datetime.now().isoformat(),
                        'trailing_stop': trailing_stop,
                        'direction': direction.value if hasattr(direction, 'value') else str(direction),
                        'saved_at': datetime.now().isoformat(),
                        'session_id': self.firebase_logger.session_id
                    }
                    self.firebase_logger.firestore_db.collection('position_states').document(trade_id).set(position_data)
                    self.logger.debug(f"üî• Position {trade_id} sauvegard√©e en Firebase")
            except Exception as e:
                self.logger.error(f"‚ùå Erreur sauvegarde position Firebase {trade_id}: {e}")

            # Enregistrement du timestamp pour √©viter la fragmentation
            self.last_trade_time[symbol] = datetime.now()
            
            # OPTIMIS√â: Mise √† jour des compteurs de suivi
            self.trades_per_hour.append(datetime.now())  # Enregistrer le trade pour limite horaire
            
            # Mise √† jour du capital
            self.current_capital -= position_size
            
            # Logging
            self.logger.info(f"üìà Trade ouvert : {symbol}")
            self.logger.info(f"   üí∞ Prix d'entr√©e: {current_price:.4f} USDC")
            self.logger.info(f"   üìä Quantit√©: {quantity:.6f}")
            self.logger.info(f"   üõë Stop Loss: {stop_loss:.4f} USDC (-{self.config.STOP_LOSS_PERCENT}%)")
            self.logger.info(f"   üéØ Take Profit: {take_profit:.4f} USDC (+{self.config.TAKE_PROFIT_PERCENT}%)")
            self.logger.info(f"   üíµ Capital engag√©: {position_size:.2f} USDC")
            
            # üìä LOGGING D√âTAILL√â DES DONN√âES TECHNIQUES
            self.logger.info(f"üìä Donn√©es techniques lors de l'entr√©e:")
            self.logger.info(f"   üìà RSI: {rsi_current:.1f} | MACD: {macd[-1]:.6f} | Signal: {macd_signal[-1]:.6f}")
            self.logger.info(f"   ‚ö° EMA Fast: {ema_fast:.4f} | EMA Slow: {ema_slow:.4f}")
            self.logger.info(f"   üìä Score analyse: {analysis.total_score:.1f} | Tendance: {analysis.trend}")
            self.logger.info(f"   üíπ Volume 24h: {volume_usdc/1000000:.1f}M USDC | Spread: {spread:.2f}%")
            self.logger.info(f"   üå°Ô∏è Volatilit√© 1h: {volatility_1h:.2f}% | 24h: {abs(price_change_24h):.2f}%")
            self.logger.info(f"   ‚úÖ Signaux d√©tect√©s: {len(analysis.signals)}/{self.config.MIN_SIGNAL_CONDITIONS}")
            
            # Affichage des signaux principaux
            for i, signal in enumerate(analysis.signals[:3]):  # Max 3 signaux pour √©viter spam
                strength_emoji = {"WEAK": "üü°", "MODERATE": "üü†", "STRONG": "üî¥", "VERY_STRONG": "üü£"}
                emoji = strength_emoji.get(signal.strength.name, "‚ö™")
                self.logger.info(f"   {emoji} Signal {i+1}: {signal.indicator} - {signal.description}")
            
            # Firebase logging pour trade ouvert avec donn√©es techniques compl√®tes
            if self.firebase_logger:
                # Pr√©parer les signaux d√©tect√©s
                signals_data = []
                for signal in analysis.signals:
                    signals_data.append({
                        'indicator': signal.indicator,
                        'description': signal.description,
                        'strength': signal.strength.name
                    })
                
                self.firebase_logger.log_message(
                    level="INFO",
                    message=f"üìà TRADE OUVERT: {symbol} - Prix: {current_price:.4f} (Trailing: {trailing_stop:.4f})",
                    module="trade_execution",
                    trade_id=trade_id,
                    pair=symbol,
                    capital=capital_before_trade,
                    additional_data={
                        'order_id': order['orderId'],
                        'entry_price': current_price,
                        'quantity': quantity,
                        'stop_loss': stop_loss,
                        'take_profit': take_profit,
                        'trailing_stop': trailing_stop,
                        'trailing_activation_percent': self.config.TRAILING_ACTIVATION_PERCENT,
                        'trailing_step_percent': self.config.TRAILING_STEP_PERCENT,
                        'position_size': position_size,
                        'volatility_1h': volatility_1h,
                        'volatility_24h': abs(price_change_24h),
                        'technical_data': {
                            'rsi': float(rsi_current) if not np.isnan(rsi_current) else 0,
                            'macd': float(macd[-1]) if len(macd) > 0 and not np.isnan(macd[-1]) else 0,
                            'macd_signal': float(macd_signal[-1]) if len(macd_signal) > 0 and not np.isnan(macd_signal[-1]) else 0,
                            'macd_hist': float(macd_hist[-1]) if len(macd_hist) > 0 and not np.isnan(macd_hist[-1]) else 0,
                            'ema_fast': float(ema_fast) if not np.isnan(ema_fast) else 0,
                            'ema_slow': float(ema_slow) if not np.isnan(ema_slow) else 0,
                            'analysis_score': analysis.total_score,
                            'trend': analysis.trend,
                            'momentum': analysis.momentum
                        },
                        'market_data': {
                            'volume_24h_usdc': volume_usdc,
                            'spread_percent': spread,
                            'price_change_24h': price_change_24h,
                            'bid_price': bid,
                            'ask_price': ask
                        },
                        'signals_detected': signals_data,
                        'conditions_met': len(analysis.signals),
                        'min_conditions_required': self.config.MIN_SIGNAL_CONDITIONS
                    }
                )
            
            # Notification Telegram
            await self.telegram_notifier.send_trade_open_notification(trade, position_size)
            
            # Log dans Google Sheets (si activ√©)
            if self.sheets_logger:
                # Capital apr√®s = USDC total + crypto existant APR√àS l'achat
                capital_after_trade = self.get_total_capital()
                
                self.logger.info(f"üìä Google Sheets - Capital avant: {capital_before_trade:.2f} USDC, apr√®s: {capital_after_trade:.2f} USDC (diff√©rence: {capital_after_trade - capital_before_trade:+.2f} USDC)")
                await self.sheets_logger.log_trade(trade, "OPEN", capital_before_trade, capital_after_trade)
            else:
                capital_after_trade = self.get_total_capital()
            
            # üî• LOG FIREBASE: Trade ouvert avec donn√©es techniques compl√®tes
            self.firebase_logger.log_trade({
                'trade_id': trade_id,
                'timestamp': trade.timestamp.isoformat(),
                'pair': symbol,
                'direction': direction.value,
                'action': 'OPEN',
                'entry_price': current_price,
                'size': quantity,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'capital_before': capital_before_trade,
                'capital_after': capital_after_trade,
                'session_trading': get_current_trading_session(),
                'volatility_1h': volatility_1h,
                'volatility_24h': abs(price_change_24h),
                'volume_24h_usdc': volume_usdc,
                'spread_percent': spread,
                'technical_indicators': {
                    'rsi': float(rsi_current) if not np.isnan(rsi_current) else 0,
                    'macd': float(macd[-1]) if len(macd) > 0 and not np.isnan(macd[-1]) else 0,
                    'macd_signal': float(macd_signal[-1]) if len(macd_signal) > 0 and not np.isnan(macd_signal[-1]) else 0,
                    'macd_hist': float(macd_hist[-1]) if len(macd_hist) > 0 and not np.isnan(macd_hist[-1]) else 0,
                    'ema_fast': float(ema_fast) if not np.isnan(ema_fast) else 0,
                    'ema_slow': float(ema_slow) if not np.isnan(ema_slow) else 0,
                    'analysis_score': analysis.total_score,
                    'trend': analysis.trend,
                    'momentum': analysis.momentum
                },
                'signals': {
                    'direction': direction.value,
                    'position_size': position_size,
                    'anti_fragmentation': True,
                    'conditions_met': len(analysis.signals),
                    'signals_count': len(analysis.signals)
                }
            })
            
            # üî• LOG FIREBASE: M√©trique capital
            self.firebase_logger.log_metric(
                metric_type="capital_change",
                value=capital_after_trade - capital_before_trade,
                pair=symbol,
                additional_info={
                    'action': 'trade_open',
                    'capital_total': capital_after_trade,
                    'position_size': position_size
                }
            )
            
            # Enregistrement en base de donn√©es
            try:
                trade_data = {
                    'symbol': symbol,
                    'side': 'BUY',
                    'entry_price': current_price,
                    'quantity': quantity,
                    'stop_loss': stop_loss,
                    'take_profit': take_profit,
                    'trailing_stop': trailing_stop,
                    'entry_time': datetime.now(),
                    'capital_engaged': position_size,
                    'signals_detected': {
                        'direction': direction.value,
                        'position_size': position_size
                    }
                }
                trade_id = await self.database.insert_trade(trade_data)
                trade.db_id = trade_id  # Stockage de l'ID DB dans le trade
                self.logger.info(f"üìä Trade enregistr√© en base (ID: {trade_id})")
            except Exception as e:
                self.logger.error(f"‚ùå Erreur enregistrement DB: {e}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'ex√©cution du trade {symbol}: {e}")

    async def create_automatic_stop_loss(self, trade, symbol: str, quantity: float) -> Optional[str]:
        """Cr√©e un ordre stop loss automatique sur Binance"""
        try:
            # Calcul des prix pour l'ordre stop loss
            stop_price = trade.stop_loss  # Prix de d√©clenchement
            limit_price = stop_price * 0.995  # Prix limite l√©g√®rement en dessous (-0.5%)
            
            # Arrondir selon les r√®gles de la paire
            limit_price = self.round_price(symbol, limit_price)
            stop_price = self.round_price(symbol, stop_price)
            
            # V√©rification que la quantit√© est valide
            quantity = self.round_quantity(symbol, quantity)
            
            self.logger.info(f"üõë Cr√©ation stop loss automatique {symbol}:")
            self.logger.info(f"   üìä Quantit√©: {quantity:.8f}")
            self.logger.info(f"   üéØ Prix stop: {stop_price:.4f} USDC")
            self.logger.info(f"   üí∞ Prix limite: {limit_price:.4f} USDC")
            
            # Tentative avec ordre STOP_LOSS_LIMIT
            try:
                stop_order = self.binance_client.create_order(
                    symbol=symbol,
                    side='SELL',
                    type='STOP_LOSS_LIMIT',
                    timeInForce='GTC',
                    quantity=quantity,
                    price=limit_price,
                    stopPrice=stop_price
                )
                
                self.logger.info(f"‚úÖ Stop Loss automatique cr√©√©: ID {stop_order['orderId']}")
                return str(stop_order['orderId'])
                
            except Exception as e:
                # Fallback: Tentative avec ordre OCO si STOP_LOSS_LIMIT √©choue
                if "not supported" in str(e).lower() or "invalid" in str(e).lower():
                    self.logger.warning(f"‚ö†Ô∏è STOP_LOSS_LIMIT non support√© pour {symbol}, tentative OCO...")
                    return await self.create_oco_order(trade, symbol, quantity)
                else:
                    raise e
                    
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation stop loss automatique pour {symbol}: {e}")
            return None

    async def create_oco_order(self, trade, symbol: str, quantity: float) -> Optional[str]:
        """Cr√©e un ordre OCO (One-Cancels-Other) comme alternative"""
        try:
            # Prix pour l'ordre OCO
            stop_price = trade.stop_loss
            stop_limit_price = stop_price * 0.995
            take_profit_price = trade.take_profit
            
            # Arrondir les prix
            stop_price = self.round_price(symbol, stop_price)
            stop_limit_price = self.round_price(symbol, stop_limit_price)
            take_profit_price = self.round_price(symbol, take_profit_price)
            quantity = self.round_quantity(symbol, quantity)
            
            self.logger.info(f"üîÑ Tentative OCO pour {symbol}")
            
            oco_order = self.binance_client.create_oco_order(
                symbol=symbol,
                side='SELL',
                quantity=quantity,
                price=take_profit_price,  # Take profit
                stopPrice=stop_price,     # Stop loss trigger
                stopLimitPrice=stop_limit_price,  # Stop limit
                stopLimitTimeInForce='GTC'
            )
            
            # R√©cup√©rer l'ID de l'ordre stop loss de l'OCO
            for order in oco_order.get('orders', []):
                if order.get('type') == 'STOP_LOSS_LIMIT':
                    stop_loss_id = str(order['orderId'])
                    self.logger.info(f"‚úÖ OCO cr√©√© avec stop loss: ID {stop_loss_id}")
                    return stop_loss_id
            
            return str(oco_order.get('orderListId', ''))
            
        except Exception as e:
            self.logger.error(f"‚ùå OCO non support√© pour {symbol}: {e}")
            return None

    def round_price(self, symbol: str, price: float) -> float:
        """Arrondit un prix selon les r√®gles de la paire"""
        try:
            info = self.binance_client.get_symbol_info(symbol)
            for filter_item in info['filters']: # type: ignore
                if filter_item['filterType'] == 'PRICE_FILTER':
                    tick_size = float(filter_item['tickSize'])
                    precision = len(str(tick_size).split('.')[-1].rstrip('0'))
                    return round(price, precision)
            return round(price, 4)
        except:
            return round(price, 4)

    async def cancel_automatic_stop_loss(self, trade, symbol: str):
        """Annule un ordre stop loss automatique"""
        try:
            if hasattr(trade, 'stop_loss_order_id') and trade.stop_loss_order_id:
                self.binance_client.cancel_order(
                    symbol=symbol,
                    orderId=int(trade.stop_loss_order_id)
                )
                self.logger.info(f"üóëÔ∏è Stop loss automatique annul√©: {trade.stop_loss_order_id}")
                trade.stop_loss_order_id = None
                
        except Exception as e:
            # L'ordre peut d√©j√† √™tre ex√©cut√© ou annul√©
            self.logger.debug(f"‚ö†Ô∏è Impossible d'annuler stop loss {trade.stop_loss_order_id}: {e}")

    async def check_automatic_order_execution(self, trade_id: str, trade) -> bool:
        """V√©rifie si un ordre automatique (SL/TP) a √©t√© ex√©cut√© par Binance et enregistre le trade"""
        try:
            if not hasattr(trade, 'stop_loss_order_id') or not trade.stop_loss_order_id:
                return False
            
            # V√©rifier le statut de l'ordre automatique
            try:
                order_status = self.binance_client.get_order(
                    symbol=trade.pair,
                    orderId=int(trade.stop_loss_order_id)
                )
                
                # Si l'ordre est rempli (FILLED), la position a √©t√© ferm√©e automatiquement
                if order_status['status'] == 'FILLED':
                    executed_price = float(order_status['price']) if order_status.get('price') else float(order_status.get('avgPrice', 0))
                    executed_qty = float(order_status['executedQty'])
                    executed_time = order_status.get('updateTime', int(datetime.now().timestamp() * 1000))
                    
                    # D√©terminer la raison de fermeture
                    if executed_price <= trade.stop_loss * 1.01:  # Tol√©rance 1%
                        reason = "STOP_LOSS_BINANCE_AUTO"
                    else:
                        reason = "TAKE_PROFIT_BINANCE_AUTO"
                    
                    self.logger.info(f"ü§ñ Ordre automatique Binance ex√©cut√©:")
                    self.logger.info(f"   üìä {trade.pair}: {executed_qty:.8f} √† {executed_price:.4f} USDC")
                    self.logger.info(f"   üéØ Raison: {reason}")
                    self.logger.info(f"   üïê Heure: {datetime.fromtimestamp(executed_time/1000)}")
                    
                    # Enregistrer la fermeture de trade avec les donn√©es Binance
                    await self.record_automatic_trade_closure(trade_id, trade, executed_price, reason, executed_time)
                    
                    return True
                    
            except Exception as e:
                # Si l'ordre n'existe plus, il a peut-√™tre √©t√© ex√©cut√©
                if "does not exist" in str(e).lower() or "not found" in str(e).lower():
                    self.logger.warning(f"‚ö†Ô∏è Ordre {trade.stop_loss_order_id} introuvable - possiblement ex√©cut√©")
                    # Essayer de d√©tecter via l'historique des trades r√©cents
                    await self.detect_missing_execution(trade_id, trade)
                    return True
                else:
                    self.logger.debug(f"‚ùå Erreur v√©rification ordre {trade.stop_loss_order_id}: {e}")
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification ordre automatique {trade_id}: {e}")
            return False

    async def record_automatic_trade_closure(self, trade_id: str, trade, exit_price: float, reason: str, executed_time: int):
        """Enregistre la fermeture automatique d'un trade par Binance"""
        try:
            # Mise √† jour du trade
            trade.status = TradeStatus.CLOSED
            trade.exit_price = exit_price
            trade.exit_timestamp = datetime.fromtimestamp(executed_time / 1000)
            trade.duration = trade.exit_timestamp - trade.timestamp
            trade.exit_reason = reason
            
            # Calcul P&L
            capital_after_trade = self.get_total_capital()
            theoretical_pnl = (exit_price - trade.entry_price) * trade.size
            theoretical_pnl_percent = (exit_price - trade.entry_price) / trade.entry_price * 100
            
            # Utilisation du P&L r√©el si capital_before disponible
            if trade.capital_before is not None:
                real_pnl = capital_after_trade - trade.capital_before
                trade.capital_after = capital_after_trade
                trade.pnl = real_pnl
                pnl_amount = real_pnl
                pnl_percent = theoretical_pnl_percent
                
                self.logger.info(f"üí∞ P&L R√©el (auto): {real_pnl:+.4f} USDC ({theoretical_pnl_percent:+.3f}%)")
            else:
                trade.pnl = theoretical_pnl
                pnl_amount = theoretical_pnl
                pnl_percent = theoretical_pnl_percent
                self.logger.info(f"üí∞ P&L th√©orique (auto): {theoretical_pnl:+.4f} USDC ({theoretical_pnl_percent:+.2f}%)")
            
            # Mise √† jour des compteurs
            is_profit = pnl_amount > 0
            self.update_trade_result(is_profit)
            self.current_capital += (trade.entry_price * trade.size) + pnl_amount
            self.daily_pnl += pnl_amount
            self.daily_trades += 1
            
            # Suppression de la position ouverte
            if trade_id in self.open_positions:
                del self.open_positions[trade_id]
            
            # üî• FIREBASE LOGGING POUR FERMETURE AUTOMATIQUE
            if self.firebase_logger:
                self.firebase_logger.log_message(
                    level="INFO",
                    message=f"ü§ñ TRADE FERM√â AUTOMATIQUEMENT: {trade.pair} - P&L: {pnl_amount:+.2f} USDC ({pnl_percent:+.2f}%)",
                    module="binance_auto_execution",
                    trade_id=trade_id,
                    pair=trade.pair,
                    capital=capital_after_trade,
                    additional_data={
                        'exit_price': exit_price,
                        'exit_reason': reason,
                        'pnl_amount': pnl_amount,
                        'pnl_percent': pnl_percent,
                        'duration_seconds': trade.duration.total_seconds() if trade.duration else 0,
                        'daily_pnl': self.daily_pnl,
                        'daily_trades': self.daily_trades,
                        'execution_source': 'binance_automatic',
                        'order_id': trade.stop_loss_order_id
                    }
                )
                
                # Log Firebase pour trade ferm√© automatiquement
                trade_data = {
                    'trade_id': trade_id,
                    'pair': trade.pair,
                    'direction': trade.direction.value,
                    'size': trade.size,
                    'entry_price': trade.entry_price,
                    'exit_price': exit_price,
                    'pnl_amount': pnl_amount,
                    'pnl_percent': pnl_percent,
                    'duration_seconds': trade.duration.total_seconds() if trade.duration else 0,
                    'exit_reason': reason,
                    'daily_pnl': self.daily_pnl,
                    'total_capital': capital_after_trade,
                    'stop_loss': trade.stop_loss,
                    'take_profit': trade.take_profit,
                    'capital_before': trade.capital_before,
                    'capital_after': capital_after_trade,
                    'execution_source': 'binance_automatic',
                    'automatic_order_id': trade.stop_loss_order_id
                }
                self.firebase_logger.log_trade(trade_data)
            
            # üî• Suppression de la position sauvegard√©e en Firebase
            try:
                if self.firebase_logger and self.firebase_logger.firebase_initialized and self.firebase_logger.firestore_db:
                    self.firebase_logger.firestore_db.collection('position_states').document(trade_id).delete()
                    self.logger.debug(f"üî• Position {trade_id} supprim√©e de Firebase")
            except Exception as e:
                self.logger.error(f"‚ùå Erreur suppression position Firebase {trade_id}: {e}")
            
            # Logging d√©taill√©
            pnl_symbol = "üöÄ" if pnl_amount > 0 else "üìâ"
            self.logger.info(f"{pnl_symbol} Trade ferm√© automatiquement : {trade.pair} ({reason})")
            self.logger.info(f"   üí∞ Prix de sortie: {exit_price:.4f} USDC")
            self.logger.info(f"   üìä P&L: {pnl_amount:+.2f} USDC ({pnl_percent:+.2f}%)")
            self.logger.info(f"   ‚è±Ô∏è Dur√©e: {trade.duration}")
            self.logger.info(f"   ü§ñ Ex√©cution: Binance automatique")
            total_capital = self.get_total_capital()
            daily_pnl_percent = self.daily_pnl / total_capital * 100
            self.logger.info(f"   üîÑ Total journalier: {self.daily_pnl:+.2f} USDC ({daily_pnl_percent:+.2f}%)")
            
            # Notification Telegram
            await self.telegram_notifier.send_trade_close_notification(trade, pnl_amount, pnl_percent, self.daily_pnl, total_capital)
            
            # Log dans Google Sheets (si activ√©)
            if self.sheets_logger:
                capital_before_close = total_capital - pnl_amount
                await self.sheets_logger.log_trade(trade, "CLOSE_AUTO", capital_before_close, total_capital)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur enregistrement fermeture automatique {trade_id}: {e}")

    async def detect_missing_execution(self, trade_id: str, trade):
        """D√©tecte une ex√©cution manqu√©e via l'historique des trades"""
        try:
            # R√©cup√©rer l'historique r√©cent des trades
            recent_trades = self.binance_client.get_my_trades(symbol=trade.pair, limit=50)
            
            # Chercher un trade de vente correspondant √† notre position
            for binance_trade in recent_trades:
                trade_time = datetime.fromtimestamp(binance_trade['time'] / 1000)
                
                # Si le trade est r√©cent (derni√®res 10 minutes) et c'est une vente
                if (datetime.now() - trade_time).total_seconds() < 600 and binance_trade['isBuyer'] == False:
                    executed_price = float(binance_trade['price'])
                    executed_qty = float(binance_trade['qty'])
                    
                    # Si la quantit√© correspond approximativement
                    if abs(executed_qty - trade.size) / trade.size < 0.05:  # 5% de tol√©rance
                        reason = "STOP_LOSS_BINANCE_AUTO" if executed_price <= trade.stop_loss * 1.01 else "TAKE_PROFIT_BINANCE_AUTO"
                        
                        self.logger.info(f"üîç Ex√©cution automatique d√©tect√©e via historique:")
                        self.logger.info(f"   üìä {trade.pair}: {executed_qty:.8f} √† {executed_price:.4f} USDC")
                        self.logger.info(f"   üïê Heure: {trade_time}")
                        
                        await self.record_automatic_trade_closure(trade_id, trade, executed_price, reason, binance_trade['time'])
                        return True
            
            # Si aucune ex√©cution trouv√©e, fermeture virtuelle par s√©curit√©
            self.logger.warning(f"‚ö†Ô∏è Aucune ex√©cution automatique trouv√©e pour {trade.pair}, fermeture virtuelle")
            current_price = float(self.binance_client.get_symbol_ticker(symbol=trade.pair)['price'])
            await self.record_automatic_trade_closure(trade_id, trade, current_price, "BINANCE_AUTO_UNKNOWN", int(datetime.now().timestamp() * 1000))
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur d√©tection ex√©cution manqu√©e {trade_id}: {e}")
            return False

    def get_non_dust_trades_on_pair(self, symbol: str) -> int:
        """Compte le nombre de trades non-miettes sur une paire"""
        base_asset = symbol.replace('USDC', '')
        non_dust_trades = 0
        
        for trade_id, trade in self.open_positions.items():
            if trade.pair == symbol:
                try:
                    # R√©cup√©ration du prix actuel pour calculer la valeur
                    ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                    current_price = float(ticker['price'])
                    position_value = trade.size * current_price
                    
                    # Ne compter que si la valeur d√©passe le seuil des miettes
                    if position_value >= self.config.DUST_BALANCE_THRESHOLD_USDC:
                        non_dust_trades += 1
                        self.logger.debug(f"üíé Trade non-miette d√©tect√© {symbol}: {position_value:.2f}$ USDC")
                    else:
                        self.logger.debug(f"üßπ Trade miette ignor√© {symbol}: {position_value:.2f}$ USDC < {self.config.DUST_BALANCE_THRESHOLD_USDC}$")
                        
                except Exception as e:
                    # Fallback sur le prix d'entr√©e en cas d'erreur
                    position_value = trade.size * trade.entry_price
                    if position_value >= self.config.DUST_BALANCE_THRESHOLD_USDC:
                        non_dust_trades += 1
                    self.logger.debug(f"‚ö†Ô∏è Erreur calcul valeur trade {symbol}, fallback: {position_value:.2f}$ USDC")
        
        return non_dust_trades

    def can_open_position(self, symbol: str) -> bool:
        """V√©rifie si on peut ouvrir une position"""
        # V√©rification nombre de positions
        if len(self.open_positions) >= self.config.MAX_OPEN_POSITIONS:
            self.logger.debug(f"‚ùå Limite max positions atteinte: {len(self.open_positions)}")
            return False
        
        # V√©rification position d√©j√† ouverte sur la paire (ignorant les miettes)
        non_dust_trades_on_pair = self.get_non_dust_trades_on_pair(symbol)
        if non_dust_trades_on_pair >= self.config.MAX_TRADES_PER_PAIR:
            self.logger.debug(f"‚ùå Limite trades non-miettes par paire atteinte: {non_dust_trades_on_pair}/{self.config.MAX_TRADES_PER_PAIR}")
            return False
        
        # V√©rification capital USDC disponible (pas le total avec crypto!)
        position_size = self.calculate_position_size()
        usdc_balance = self.get_asset_balance('USDC')
        if usdc_balance < position_size:
            self.logger.debug(f"‚ùå Capital USDC insuffisant: {usdc_balance:.2f} < {position_size:.2f}")
            return False
        
        # V√©rification exposition maximale par asset de base
        base_asset = symbol.replace('USDC', '')
        current_exposure = self.get_asset_exposure(base_asset)
        max_exposure_per_asset = self.get_total_capital() * self.config.MAX_EXPOSURE_PER_ASSET_PERCENT / 100
        
        if current_exposure + position_size > max_exposure_per_asset:
            self.logger.debug(f"‚ùå Exposition {base_asset} trop √©lev√©e: {current_exposure:.2f} + {position_size:.2f} > {max_exposure_per_asset:.2f}")
            return False
        
        # V√©rification objectif/stop loss quotidien
        if self.daily_target_reached or self.daily_stop_loss_hit:
            self.logger.debug(f"‚ùå Objectif/stop loss quotidien atteint")
            return False
        
        return True
    
    def get_asset_exposure(self, base_asset: str) -> float:
        """Calcule l'exposition actuelle sur un asset de base (positions ouvertes + soldes existants NON TRAC√âS)"""
        total_exposure = 0.0
        tracked_assets = 0
        
        # 1. Exposition des positions ouvertes trac√©es par le bot
        for trade_id, trade in self.open_positions.items():
            if trade.pair.replace('USDC', '') == base_asset:
                try:
                    ticker = self.binance_client.get_symbol_ticker(symbol=trade.pair)
                    current_price = float(ticker['price'])
                    position_value = trade.size * current_price
                    total_exposure += position_value
                    tracked_assets += trade.size
                    self.logger.debug(f"üéØ Position trac√©e {base_asset}: {trade.size:.8f} = {position_value:.2f} USDC")
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur calcul exposition position {trade.pair}: {e}")
                    # Fallback sur le prix d'entr√©e
                    position_value = trade.size * trade.entry_price
                    total_exposure += position_value
                    tracked_assets += trade.size
        
        # 2. Exposition des soldes crypto existants NON TRAC√âS (pour √©viter double comptage)
        try:
            existing_balance = self.get_asset_balance(base_asset)
            if existing_balance > 0.00001:  # Seuil technique pour √©viter erreurs
                # Calculer le solde NON TRAC√â (solde total - soldes des positions ouvertes)
                untracked_balance = existing_balance - tracked_assets
                
                if untracked_balance > 0.00001:  # Il y a un solde non trac√© significatif
                    symbol = base_asset + 'USDC'
                    ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                    current_price = float(ticker['price'])
                    untracked_value = untracked_balance * current_price
                    
                    # üßπ GESTION INTELLIGENTE DES MIETTES pour le solde NON TRAC√â
                    if untracked_value < self.config.DUST_BALANCE_THRESHOLD_USDC:
                        self.logger.info(f"üßπ Miettes non-trac√©es d√©tect√©es {base_asset}: {untracked_balance:.8f} ({untracked_value:.2f}$ < {self.config.DUST_BALANCE_THRESHOLD_USDC}$) - Ignor√©es pour exposition")
                    else:
                        total_exposure += untracked_value
                        self.logger.debug(f"üíé Exposition {base_asset}: Positions trac√©es: {total_exposure - untracked_value:.2f} USDC + Solde non-trac√©: {untracked_value:.2f} USDC = Total: {total_exposure:.2f} USDC")
                else:
                    self.logger.debug(f"‚úÖ Exposition {base_asset}: Tout le solde ({existing_balance:.8f}) est trac√© par les positions ouvertes ({tracked_assets:.8f})")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur calcul exposition solde existant {base_asset}: {e}")
        
        return total_exposure

    def calculate_position_size(self, pair: Optional[str] = None, volatility: Optional[float] = None) -> float:
        """Calcule la taille de position avec sizing adaptatif bas√© sur la volatilit√© et horaires"""
        total_capital = self.get_total_capital()
        base_size = total_capital * self.config.BASE_POSITION_SIZE_PERCENT / 100
        
        # Ajustement selon l'intensit√© horaire
        trading_intensity = get_trading_intensity(self.config)
        base_size *= trading_intensity
        
        # Si pas de volatilit√© fournie, utiliser la taille de base ajust√©e
        if volatility is None:
            return base_size
        
        # Position sizing adaptatif selon la volatilit√©
        if volatility > self.config.HIGH_VOLATILITY_THRESHOLD:
            # R√©duire la taille pour paires tr√®s volatiles
            reduction_factor = min(0.5, self.config.VOLATILITY_REDUCTION_FACTOR * (volatility / self.config.HIGH_VOLATILITY_THRESHOLD))
            adjusted_size = base_size * (1 - reduction_factor)
            self.logger.info(f"üìä Position r√©duite pour {pair} (volatilit√© {volatility:.2f}%, intensit√© {trading_intensity*100:.0f}%): {adjusted_size:.2f} USDC")
            return adjusted_size
        elif volatility < self.config.LOW_VOLATILITY_THRESHOLD:
            # Augmenter l√©g√®rement pour paires peu volatiles (plus s√ªres)
            adjusted_size = base_size * 1.1
            self.logger.info(f"üìä Position augment√©e pour {pair} (faible volatilit√© {volatility:.2f}%, intensit√© {trading_intensity*100:.0f}%): {adjusted_size:.2f} USDC")
            return adjusted_size
        else:
            # Volatilit√© normale, taille de base ajust√©e par horaire
            return base_size

    def round_quantity(self, symbol: str, quantity: float) -> float:
        """Arrondit la quantit√© selon les r√®gles de la paire"""
        try:
            info = self.binance_client.get_symbol_info(symbol)
            for filter_item in info['filters']: # type: ignore
                if filter_item['filterType'] == 'LOT_SIZE':
                    step_size = float(filter_item['stepSize'])
                    precision = len(str(step_size).split('.')[-1].rstrip('0'))
                    return round(quantity, precision)
            return round(quantity, 6)
        except:
            return round(quantity, 6)
    
    def get_symbol_filters(self, symbol: str) -> dict:
        """R√©cup√®re les filtres de trading pour un symbole"""
        try:
            info = self.binance_client.get_symbol_info(symbol)
            filters = {}
            
            for filter_item in info['filters']: # type: ignore
                if filter_item['filterType'] == 'LOT_SIZE':
                    filters['min_qty'] = float(filter_item['minQty'])
                    filters['max_qty'] = float(filter_item['maxQty'])
                    filters['step_size'] = float(filter_item['stepSize'])
                elif filter_item['filterType'] == 'MIN_NOTIONAL':
                    filters['min_notional'] = float(filter_item['minNotional'])
                elif filter_item['filterType'] == 'PRICE_FILTER':
                    filters['min_price'] = float(filter_item['minPrice'])
                    filters['max_price'] = float(filter_item['maxPrice'])
                    filters['tick_size'] = float(filter_item['tickSize'])
            
            return filters
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration filtres {symbol}: {e}")
            return {}
    
    def validate_order_quantity(self, symbol: str, quantity: float, price: float) -> tuple[bool, str, float]:
        """Valide et ajuste une quantit√© d'ordre"""
        try:
            filters = self.get_symbol_filters(symbol)
            
            if not filters:
                return True, "Pas de filtres disponibles", quantity
            
            # V√©rification quantit√© minimale
            min_qty = filters.get('min_qty', 0)
            if quantity < min_qty:
                return False, f"Quantit√© {quantity:.8f} < minimum {min_qty:.8f}", min_qty
            
            # V√©rification quantit√© maximale
            max_qty = filters.get('max_qty', float('inf'))
            if quantity > max_qty:
                return False, f"Quantit√© {quantity:.8f} > maximum {max_qty:.8f}", max_qty
            
            # Arrondi selon step_size
            step_size = filters.get('step_size', 0)
            if step_size > 0:
                quantity = round(quantity / step_size) * step_size
            
            # V√©rification valeur notionnelle minimale
            min_notional = filters.get('min_notional', 0)
            notional_value = quantity * price
            if notional_value < min_notional:
                # Calcul de la quantit√© minimale pour respecter min_notional
                min_qty_for_notional = min_notional / price
                if step_size > 0:
                    min_qty_for_notional = round(min_qty_for_notional / step_size) * step_size
                return False, f"Valeur notionnelle {notional_value:.2f} < minimum {min_notional:.2f}", min_qty_for_notional
            
            return True, "OK", quantity
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur validation quantit√© {symbol}: {e}")
            return True, f"Erreur validation: {e}", quantity
    
    def get_asset_balance(self, asset: str) -> float:
        """R√©cup√®re le solde disponible d'un asset"""
        try:
            account_info = self.binance_client.get_account()
            for balance in account_info['balances']:
                if balance['asset'] == asset:
                    return float(balance['free'])
            return 0.0
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration solde {asset}: {e}")
            return 0.0

    def get_total_capital(self) -> float:
        """Calcule le capital total dynamique (USDC + valeur de TOUTES les cryptos du compte)"""
        try:
            account_info = self.binance_client.get_account()
            total_capital = 0.0
            
            # Solde USDC
            usdc_balance = 0.0
            crypto_value = 0.0
            
            for balance in account_info['balances']:
                free_balance = float(balance['free'])
                asset = balance['asset']
                
                if free_balance > 0:
                    if asset == 'USDC':
                        usdc_balance = free_balance
                        total_capital += usdc_balance
                    elif free_balance > 0.00001:  # Seuil pour √©viter les poussi√®res
                        # Conversion en USDC pour tous les autres assets
                        try:
                            symbol = asset + 'USDC'
                            ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                            price_usdc = float(ticker['price'])
                            value_usdc = free_balance * price_usdc
                            crypto_value += value_usdc
                            total_capital += value_usdc
                            self.logger.debug(f"üíé {asset}: {free_balance:.8f} x {price_usdc:.4f} = {value_usdc:.2f} USDC")
                        except Exception:
                            # Si pas de paire USDC pour cet asset, on ignore
                            self.logger.debug(f"‚ö†Ô∏è Pas de conversion USDC pour {asset}")
                            continue
            
            self.logger.debug(f"üí∞ Capital total: {total_capital:.2f} USDC (USDC libre: {usdc_balance:.2f}, Toutes cryptos: {crypto_value:.2f})")
            return total_capital
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur calcul capital total: {e}")
            # Fallback sur le capital courant
            return self.current_capital

    async def manage_open_positions(self):
        """G√®re les positions ouvertes et la surexposition"""
        for trade_id, trade in list(self.open_positions.items()):
            try:
                # üö® NOUVEAU: V√©rification si un ordre automatique a √©t√© ex√©cut√© par Binance
                if hasattr(trade, 'stop_loss_order_id') and trade.stop_loss_order_id:
                    executed = await self.check_automatic_order_execution(trade_id, trade)
                    # Si le trade a √©t√© ferm√© automatiquement, passer au suivant
                    if executed or trade_id not in self.open_positions:
                        continue
                
                # R√©cup√©ration du prix actuel
                ticker = self.binance_client.get_symbol_ticker(symbol=trade.pair)
                current_price = float(ticker['price'])

                # Calcul du P&L
                pnl_percent = (current_price - trade.entry_price) / trade.entry_price * 100

                # V√©rification surexposition dynamique
                base_asset = trade.pair.replace('USDC', '')
                current_exposure = self.get_asset_exposure(base_asset)
                max_exposure_per_asset = self.get_total_capital() * self.config.MAX_EXPOSURE_PER_ASSET_PERCENT / 100
                if current_exposure > max_exposure_per_asset * 1.01:  # tol√©rance 1%
                    self.logger.warning(f"‚ö†Ô∏è Surexposition d√©tect√©e sur {base_asset}: {current_exposure:.2f} USDC > {max_exposure_per_asset:.2f} USDC ({self.config.MAX_EXPOSURE_PER_ASSET_PERCENT}% du capital)")
                    await self.close_position(trade_id, current_price, "SUREXPOSITION_AUTO")
                    continue

                # V√©rification timeout adaptatif
                volatility = self.calculate_volatility_1h(trade.pair)
                should_timeout, timeout_reason = self.should_timeout_position(trade, current_price, volatility)
                if should_timeout:
                    self.logger.info(f"‚è±Ô∏è {timeout_reason}")
                    await self.close_position(trade_id, current_price, timeout_reason)
                    continue

                # Sortie momentum faible (optionnelle)
                if self.config.ENABLE_MOMENTUM_EXIT:
                    should_exit_momentum, momentum_reason = await self.check_momentum_exit(trade, current_price, pnl_percent)
                    if should_exit_momentum:
                        self.logger.info(f"üìâ {momentum_reason}")
                        await self.close_position(trade_id, current_price, "MOMENTUM_FAIBLE")
                        continue

                # V√©rification Stop Loss avec protection gap
                if current_price <= trade.stop_loss:
                    # Analyse du gap de march√©
                    expected_loss = abs((trade.stop_loss - trade.entry_price) / trade.entry_price * 100)
                    actual_loss = abs((current_price - trade.entry_price) / trade.entry_price * 100)
                    gap_excess = actual_loss - expected_loss
                    
                    if gap_excess > 0.5:  # Gap significatif d√©tect√©
                        self.logger.error(f"üö® GAP STOP LOSS {trade.pair}: Perte {actual_loss:.2f}% vs {expected_loss:.2f}% attendu (gap: {gap_excess:.2f}%)")
                        
                        # Firebase logging pour analyse des gaps
                        if self.firebase_logger:
                            self.firebase_logger.log_message(
                                level="ERROR",
                                message=f"üö® GAP STOP LOSS: {trade.pair} - Gap: {gap_excess:.2f}%",
                                module="risk_management",
                                pair=trade.pair,
                                additional_data={
                                    'entry_price': trade.entry_price,
                                    'configured_stop_loss': trade.stop_loss,
                                    'actual_exit_price': current_price,
                                    'expected_loss_percent': expected_loss,
                                    'actual_loss_percent': actual_loss,
                                    'gap_excess_percent': gap_excess,
                                    'trade_duration': str(datetime.now() - trade.timestamp)
                                }
                            )
                    
                    await self.close_position(trade_id, current_price, "STOP_LOSS")
                    continue

                # Trailing Stop (priorit√© sur Take Profit pour laisser monter)
                trailing_activated = False
                if current_price >= trade.trailing_stop:
                    # Mise √† jour du trailing stop
                    new_stop = current_price * (1 - self.config.TRAILING_STEP_PERCENT / 100)
                    if new_stop > trade.stop_loss:
                        trailing_activated = True
                        old_stop = trade.stop_loss
                        old_tp = trade.take_profit
                        
                        # Annuler l'ancien stop loss automatique
                        await self.cancel_automatic_stop_loss(trade, trade.pair)
                        
                        # Mise √† jour du Stop Loss
                        trade.stop_loss = new_stop
                        
                        # Mise √† jour du Take Profit pour qu'il suive la progression
                        # Nouveau TP = prix actuel + m√™me √©cart relatif que le TP initial
                        new_take_profit = current_price * (1 + self.config.TAKE_PROFIT_PERCENT / 100)
                        trade.take_profit = new_take_profit
                        
                        # Cr√©er nouveau stop loss automatique avec nouveau niveau
                        try:
                            new_stop_order_id = await self.create_automatic_stop_loss(trade, trade.pair, trade.size)
                            if new_stop_order_id:
                                trade.stop_loss_order_id = new_stop_order_id
                        except Exception as e:
                            self.logger.error(f"‚ùå Erreur cr√©ation nouveau stop loss automatique: {e}")
                        
                        self.logger.info(f"üìà Trailing Stop mis √† jour pour {trade.pair}:")
                        self.logger.info(f"   üõë Nouveau SL: {new_stop:.4f} USDC (ancien: {old_stop:.4f})")
                        self.logger.info(f"   üéØ Nouveau TP: {new_take_profit:.4f} USDC (ancien: {old_tp:.4f})")
                        
                        # Firebase logging pour trailing stop
                        if self.firebase_logger:
                            profit_percent = (current_price - trade.entry_price) / trade.entry_price * 100
                            self.firebase_logger.log_message(
                                level="INFO",
                                message=f"üìà TRAILING STOP: {trade.pair} - SL: {new_stop:.4f} (+{profit_percent:.2f}%)",
                                module="position_management",
                                trade_id=trade_id,
                                pair=trade.pair,
                                additional_data={
                                    'old_stop_loss': old_stop,
                                    'new_stop_loss': new_stop,
                                    'old_take_profit': old_tp,
                                    'new_take_profit': new_take_profit,
                                    'trigger_price': current_price,
                                    'profit_percent': profit_percent,
                                    'entry_price': trade.entry_price,
                                    'new_stop_order_id': trade.stop_loss_order_id
                                }
                            )

                        # Enregistrement en base de donn√©es
                        try:
                            trailing_data = {
                                'trade_id': trade.db_id,
                                'symbol': trade.pair,
                                'old_stop_loss': old_stop,
                                'new_stop_loss': new_stop,
                                'old_take_profit': old_tp,
                                'new_take_profit': new_take_profit,
                                'trigger_price': current_price,
                                'timestamp': datetime.now(),
                                'profit_percent': (current_price - trade.entry_price) / trade.entry_price * 100
                            }
                            await self.database.insert_trailing_stop(trailing_data)
                        except Exception as e:
                            self.logger.error(f"‚ùå Erreur enregistrement trailing stop: {e}")

                # V√©rification Take Profit (seulement si trailing stop pas activ√©)
                if not trailing_activated and current_price >= trade.take_profit:
                    await self.close_position(trade_id, current_price, "TAKE_PROFIT")
                    continue

            except Exception as e:
                self.logger.error(f"‚ùå Erreur gestion position {trade_id}: {e}")

    async def intensive_position_monitoring(self):
        """Surveillance intensive des positions √† risque avec d√©tection de gaps rapide"""
        try:
            for trade_id, trade in list(self.open_positions.items()):
                try:
                    # R√©cup√©ration prix en temps r√©el
                    ticker = self.binance_client.get_symbol_ticker(symbol=trade.pair)
                    current_price = float(ticker['price'])
                    
                    # Calcul distance au stop loss
                    distance_to_stop = (current_price - trade.stop_loss) / trade.stop_loss * 100
                    
                    # Surveillance intensive si proche du stop loss
                    if distance_to_stop < 1.0:  # Moins de 1% du stop loss
                        self.logger.warning(f"‚ö†Ô∏è SURVEILLANCE INTENSIVE {trade.pair}: Prix {current_price:.4f} tr√®s proche du SL {trade.stop_loss:.4f} ({distance_to_stop:.2f}%)")
                        
                        # V√©rification gap imminent
                        if current_price <= trade.stop_loss:
                            # Ex√©cution imm√©diate pour √©viter gap plus important
                            await self.close_position(trade_id, current_price, "STOP_LOSS_IMMEDIATE")
                            continue
                    
                    # Surveillance des mouvements rapides (volatilit√© excessive)
                    volatility = self.calculate_volatility_1h(trade.pair)
                    if volatility > 50.0:  # Volatilit√© extr√™me
                        pnl_percent = (current_price - trade.entry_price) / trade.entry_price * 100
                        
                        # Sortie pr√©ventive si volatilit√© dangereuse et perte mod√©r√©e
                        if pnl_percent < -0.2 and volatility > 100.0:  # Perte > 0.2% et volatilit√© > 100%
                            self.logger.warning(f"üö® SORTIE PR√âVENTIVE {trade.pair}: Volatilit√© extr√™me {volatility:.1f}% + perte {pnl_percent:.2f}%")
                            await self.close_position(trade_id, current_price, "VOLATILITY_PROTECTION")
                            continue
                    
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur surveillance intensive {trade_id}: {e}")
                    
        except Exception as e:
            self.logger.error(f"‚ùå Erreur surveillance intensive g√©n√©rale: {e}")

    async def manage_open_positions(self):
        """G√®re les positions ouvertes et la surexposition"""
        for trade_id, trade in list(self.open_positions.items()):
            try:
                # R√©cup√©ration du prix actuel
                ticker = self.binance_client.get_symbol_ticker(symbol=trade.pair)
                current_price = float(ticker['price'])

                # Calcul du P&L
                pnl_percent = (current_price - trade.entry_price) / trade.entry_price * 100

                # V√©rification surexposition dynamique
                base_asset = trade.pair.replace('USDC', '')
                current_exposure = self.get_asset_exposure(base_asset)
                max_exposure_per_asset = self.get_total_capital() * self.config.MAX_EXPOSURE_PER_ASSET_PERCENT / 100
                if current_exposure > max_exposure_per_asset * 1.01:  # tol√©rance 1%
                    self.logger.warning(f"‚ö†Ô∏è Surexposition d√©tect√©e sur {base_asset}: {current_exposure:.2f} USDC > {max_exposure_per_asset:.2f} USDC ({self.config.MAX_EXPOSURE_PER_ASSET_PERCENT}% du capital)")
                    await self.close_position(trade_id, current_price, "SUREXPOSITION_AUTO")
                    continue

                # V√©rification timeout adaptatif
                volatility = self.calculate_volatility_1h(trade.pair)
                should_timeout, timeout_reason = self.should_timeout_position(trade, current_price, volatility)
                if should_timeout:
                    self.logger.info(f"‚è±Ô∏è {timeout_reason}")
                    await self.close_position(trade_id, current_price, timeout_reason)
                    continue

                # Sortie momentum faible (optionnelle)
                if self.config.ENABLE_MOMENTUM_EXIT:
                    should_exit_momentum, momentum_reason = await self.check_momentum_exit(trade, current_price, pnl_percent)
                    if should_exit_momentum:
                        self.logger.info(f"üìâ {momentum_reason}")
                        await self.close_position(trade_id, current_price, "MOMENTUM_FAIBLE")
                        continue

                # V√©rification Stop Loss avec protection gap
                if current_price <= trade.stop_loss:
                    # Analyse du gap de march√©
                    expected_loss = abs((trade.stop_loss - trade.entry_price) / trade.entry_price * 100)
                    actual_loss = abs((current_price - trade.entry_price) / trade.entry_price * 100)
                    gap_excess = actual_loss - expected_loss
                    
                    if gap_excess > 0.5:  # Gap significatif d√©tect√©
                        self.logger.error(f"üö® GAP STOP LOSS {trade.pair}: Perte {actual_loss:.2f}% vs {expected_loss:.2f}% attendu (gap: {gap_excess:.2f}%)")
                        
                        # Firebase logging pour analyse des gaps
                        if self.firebase_logger:
                            self.firebase_logger.log_message(
                                level="ERROR",
                                message=f"üö® GAP STOP LOSS: {trade.pair} - Gap: {gap_excess:.2f}%",
                                module="risk_management",
                                pair=trade.pair,
                                additional_data={
                                    'entry_price': trade.entry_price,
                                    'configured_stop_loss': trade.stop_loss,
                                    'actual_exit_price': current_price,
                                    'expected_loss_percent': expected_loss,
                                    'actual_loss_percent': actual_loss,
                                    'gap_excess_percent': gap_excess,
                                    'trade_duration': str(datetime.now() - trade.timestamp)
                                }
                            )
                    
                    await self.close_position(trade_id, current_price, "STOP_LOSS")
                    continue

                # Trailing Stop (priorit√© sur Take Profit pour laisser monter)
                trailing_activated = False
                if current_price >= trade.trailing_stop:
                    # Mise √† jour du trailing stop
                    new_stop = current_price * (1 - self.config.TRAILING_STEP_PERCENT / 100)
                    if new_stop > trade.stop_loss:
                        trailing_activated = True
                        old_stop = trade.stop_loss
                        old_tp = trade.take_profit
                        
                        # Annuler l'ancien stop loss automatique
                        await self.cancel_automatic_stop_loss(trade, trade.pair)
                        
                        # Mise √† jour du Stop Loss
                        trade.stop_loss = new_stop
                        
                        # Mise √† jour du Take Profit pour qu'il suive la progression
                        # Nouveau TP = prix actuel + m√™me √©cart relatif que le TP initial
                        new_take_profit = current_price * (1 + self.config.TAKE_PROFIT_PERCENT / 100)
                        trade.take_profit = new_take_profit
                        
                        # Cr√©er nouveau stop loss automatique avec nouveau niveau
                        try:
                            new_stop_order_id = await self.create_automatic_stop_loss(trade, trade.pair, trade.size)
                            if new_stop_order_id:
                                trade.stop_loss_order_id = new_stop_order_id
                        except Exception as e:
                            self.logger.error(f"‚ùå Erreur cr√©ation nouveau stop loss automatique: {e}")
                        
                        self.logger.info(f"üìà Trailing Stop mis √† jour pour {trade.pair}:")
                        self.logger.info(f"   üõë Nouveau SL: {new_stop:.4f} USDC (ancien: {old_stop:.4f})")
                        self.logger.info(f"   üéØ Nouveau TP: {new_take_profit:.4f} USDC (ancien: {old_tp:.4f})")
                        
                        # Firebase logging pour trailing stop
                        if self.firebase_logger:
                            profit_percent = (current_price - trade.entry_price) / trade.entry_price * 100
                            self.firebase_logger.log_message(
                                level="INFO",
                                message=f"üìà TRAILING STOP: {trade.pair} - SL: {new_stop:.4f} (+{profit_percent:.2f}%)",
                                module="position_management",
                                trade_id=trade_id,
                                pair=trade.pair,
                                additional_data={
                                    'old_stop_loss': old_stop,
                                    'new_stop_loss': new_stop,
                                    'old_take_profit': old_tp,
                                    'new_take_profit': new_take_profit,
                                    'trigger_price': current_price,
                                    'profit_percent': profit_percent,
                                    'entry_price': trade.entry_price,
                                    'new_stop_order_id': trade.stop_loss_order_id
                                }
                            )

                        # Enregistrement en base de donn√©es
                        try:
                            trailing_data = {
                                'trade_id': trade.db_id,
                                'symbol': trade.pair,
                                'old_stop_loss': old_stop,
                                'new_stop_loss': new_stop,
                                'old_take_profit': old_tp,
                                'new_take_profit': new_take_profit,
                                'trigger_price': current_price,
                                'timestamp': datetime.now(),
                                'profit_percent': (current_price - trade.entry_price) / trade.entry_price * 100
                            }
                            await self.database.insert_trailing_stop(trailing_data)
                        except Exception as e:
                            self.logger.error(f"‚ùå Erreur enregistrement trailing stop: {e}")

                # V√©rification Take Profit (seulement si trailing stop pas activ√©)
                if not trailing_activated and current_price >= trade.take_profit:
                    await self.close_position(trade_id, current_price, "TAKE_PROFIT")
                    continue

            except Exception as e:
                self.logger.error(f"‚ùå Erreur gestion position {trade_id}: {e}")

    async def close_position(self, trade_id: str, exit_price: float, reason: str):
        """Ferme une position"""
        try:
            trade = self.open_positions[trade_id]
            symbol = trade.pair
            
            # Annuler l'ordre stop loss automatique s'il existe
            await self.cancel_automatic_stop_loss(trade, symbol)
            
            # R√©cup√©ration de l'asset de base (ex: ETH pour ETHUSDC)
            base_asset = symbol.replace('USDC', '')
            
            # V√©rification du solde disponible
            available_balance = self.get_asset_balance(base_asset)
            quantity_to_sell = trade.size
            
            # Gestion du solde insuffisant avec tol√©rance
            tolerance = self.config.BALANCE_TOLERANCE  # Tol√©rance pour les erreurs d'arrondi
            if available_balance < (quantity_to_sell - tolerance):
                self.logger.warning(f"‚ö†Ô∏è Solde insuffisant pour {symbol}")
                self.logger.warning(f"   Solde disponible: {available_balance:.8f} {base_asset}")
                self.logger.warning(f"   Quantit√© √† vendre: {quantity_to_sell:.8f} {base_asset}")
                self.logger.warning(f"   Diff√©rence: {quantity_to_sell - available_balance:.8f} {base_asset}")
                
                # V√©rification si c'est une position fant√¥me
                if available_balance <= self.config.PHANTOM_POSITION_THRESHOLD:  # Pratiquement z√©ro
                    self.logger.error(f"‚ùå Position fant√¥me d√©tect√©e pour {symbol}, nettoyage virtuel")
                    await self.close_position_virtually(symbol, exit_price, f"{reason}_PHANTOM")
                    return
                
                # Ajustement intelligent du solde
                usable_balance = available_balance * self.config.BALANCE_SAFETY_MARGIN  # Marge de s√©curit√©
                if usable_balance > 0:
                    quantity_to_sell = self.round_quantity(symbol, usable_balance)
                    self.logger.info(f"üîß Ajustement quantit√© de vente: {quantity_to_sell:.8f} {base_asset}")
                    
                    # V√©rification que la quantit√© ajust√©e est valide
                    if quantity_to_sell <= 0:
                    await self.close_position_virtually(symbol, exit_price, reason)
                    return
            
            # Passage de l'ordre de vente avec gestion d'erreur am√©lior√©e
            try:
                # V√©rification finale avant l'ordre
                final_balance = self.get_asset_balance(base_asset)
                if final_balance < quantity_to_sell:
                    self.logger.warning(f"‚ö†Ô∏è Solde chang√© entre les v√©rifications pour {symbol}")
                    self.logger.warning(f"   Nouveau solde: {final_balance:.8f} {base_asset}")
                    quantity_to_sell = min(quantity_to_sell, final_balance * self.config.BALANCE_SAFETY_MARGIN)
                    quantity_to_sell = self.round_quantity(symbol, quantity_to_sell)
                
                if quantity_to_sell <= 0:
                    self.logger.error(f"‚ùå Quantit√© finale invalide pour {symbol}, fermeture virtuelle")
                    await self.close_position_virtually(symbol, exit_price, f"{reason}_FINAL_CHECK_FAILED")
                    return
                
                order = self.binance_client.order_market_sell(
                    symbol=symbol,
                    quantity=quantity_to_sell
                )
                
                self.logger.info(f"‚úÖ Ordre de vente ex√©cut√©: {quantity_to_sell:.8f} {base_asset}")
                
            except BinanceAPIException as e:
                error_code = getattr(e, 'code', 'UNKNOWN')
                error_msg = str(e)
                
                if "insufficient balance" in error_msg.lower() or error_code == -2010:
                    self.logger.error(f"‚ùå Erreur solde insuffisant confirm√©e par Binance pour {symbol}")
                    self.logger.error(f"   Code erreur: {error_code}")
                    self.logger.error(f"   Message: {error_msg}")
                    
                    # Actualisation forc√©e des soldes apr√®s erreur
                    # Force une nouvelle lecture des soldes
                    time.sleep(1)  # Attente pour synchronisation Binance
                    
                    # Fermeture virtuelle avec d√©tail de l'erreur
                    await self.close_position_virtually(symbol, exit_price, f"{reason}_BINANCE_INSUFFICIENT_BALANCE")
                    return
                elif "min notional" in error_msg.lower() or error_code == -1013:
                    self.logger.error(f"‚ùå Valeur notionnelle trop faible pour {symbol}")
                    self.logger.error(f"   Quantit√©: {quantity_to_sell:.8f}, Prix: {exit_price:.8f}")
                    self.logger.error(f"   Valeur: {quantity_to_sell * exit_price:.2f} USDC")
                    await self.close_position_virtually(symbol, exit_price, f"{reason}_MIN_NOTIONAL")
                    return
                else:
                    # Autres erreurs - on relance l'exception
                    self.logger.error(f"‚ùå Erreur inattendue lors de la vente {symbol}: {error_msg}")
                    raise e
            
            # Mise √† jour du trade
            trade.status = TradeStatus.CLOSED
            trade.exit_price = exit_price
            trade.exit_timestamp = datetime.now()
            trade.duration = trade.exit_timestamp - trade.timestamp
            trade.exit_reason = reason
            
            # CORRIG√â: Calcul P&L r√©el bas√© sur la diff√©rence de capital
            capital_after_trade = self.get_total_capital()
            
            # Calcul th√©orique pour comparaison
            theoretical_pnl = (exit_price - trade.entry_price) * trade.size
            theoretical_pnl_percent = (exit_price - trade.entry_price) / trade.entry_price * 100
            
            # Utilisation du P&L r√©el si capital_before disponible
            if trade.capital_before is not None:
                real_pnl = capital_after_trade - trade.capital_before
                # CORRECTION: Utiliser le pourcentage th√©orique (bas√© sur le prix) au lieu du capital
                # real_pnl_percent = (real_pnl / trade.capital_before) * 100  # BUG: mauvais calcul
                
                # Mise √† jour du trade avec le capital apr√®s et P&L r√©el
                trade.capital_after = capital_after_trade
                trade.pnl = real_pnl
                pnl_amount = real_pnl
                pnl_percent = theoretical_pnl_percent  # CORRECTION: utiliser le % th√©orique correct
                
                self.logger.info(f"üí∞ P&L R√©el: {real_pnl:+.4f} USDC ({theoretical_pnl_percent:+.3f}%)")
                self.logger.debug(f"üßÆ P&L Th√©orique: {theoretical_pnl:+.4f} USDC ({theoretical_pnl_percent:+.3f}%)")
                self.logger.debug(f"üìä Capital-based %: {real_pnl / trade.capital_before * 100:+.3f}% (debug only)")
            else:
                # Fallback sur calcul th√©orique si capital_before manquant
                self.logger.warning(f"‚ö†Ô∏è Capital avant trade non disponible, utilisation du calcul th√©orique")
                trade.pnl = theoretical_pnl
                pnl_amount = theoretical_pnl
                pnl_percent = theoretical_pnl_percent
                self.logger.debug(f"üßÆ P&L th√©orique: {theoretical_pnl:+.4f} USDC ({theoretical_pnl_percent:+.2f}%)")
            
            # OPTIMIS√â: Mise √† jour du suivi des r√©sultats
            is_profit = pnl_amount > 0
            self.update_trade_result(is_profit)
            
            # OPTIMIS√â: V√©rification arr√™t apr√®s pertes cons√©cutives
            if self.consecutive_losses >= self.config.MAX_CONSECUTIVE_LOSSES and self.config.ENABLE_CONSECUTIVE_LOSS_PROTECTION:
                if self.config.AUTO_RESUME_AFTER_PAUSE:
                    # Mode pause temporaire
                    self.consecutive_loss_pause_until = datetime.now() + timedelta(minutes=self.config.CONSECUTIVE_LOSS_PAUSE_MINUTES)
                    
                    self.logger.warning(f"‚è∏Ô∏è PAUSE TEMPORAIRE: {self.consecutive_losses} pertes cons√©cutives")
                    self.logger.warning(f"   Reprise pr√©vue: {self.consecutive_loss_pause_until.strftime('%H:%M:%S')}")
                    self.logger.warning(f"   Dur√©e: {self.config.CONSECUTIVE_LOSS_PAUSE_MINUTES} minutes")
                    
                    # Firebase logging pour pause temporaire
                    if self.firebase_logger:
                        self.firebase_logger.log_message(
                            level="WARNING", 
                            message=f"‚è∏Ô∏è PAUSE TEMPORAIRE: {self.consecutive_losses} pertes cons√©cutives",
                            module="risk_management",
                            additional_data={
                                'consecutive_losses': self.consecutive_losses,
                                'pause_duration_minutes': self.config.CONSECUTIVE_LOSS_PAUSE_MINUTES,
                                'resume_at': self.consecutive_loss_pause_until.isoformat(),
                                'last_trade_results': self.last_trade_results
                            }
                        )
                    
                    # Notification Telegram de pause
                    message = f"‚è∏Ô∏è PAUSE TEMPORAIRE ACTIV√âE\n"
                    message += f"Raison: {self.consecutive_losses} pertes cons√©cutives\n"
                    message += f"Derni√®re perte: {pnl_amount:+.2f} USDC ({pnl_percent:+.2f}%)\n"
                    message += f"Reprise pr√©vue: {self.consecutive_loss_pause_until.strftime('%H:%M:%S')}\n"
                    message += f"Dur√©e: {self.config.CONSECUTIVE_LOSS_PAUSE_MINUTES} minutes"
                    
                    await self.telegram_notifier.send_message(message)
                    
                else:
                    # Mode arr√™t d√©finitif (ancien comportement)
                    self.logger.error(f"üö® ARR√äT AUTOMATIQUE: {self.consecutive_losses} pertes cons√©cutives atteintes!")
                    
                    # Firebase logging pour arr√™t automatique
                    if self.firebase_logger:
                        self.firebase_logger.log_message(
                            level="CRITICAL",
                            message=f"üö® BOT ARR√äT√â: {self.consecutive_losses} pertes cons√©cutives",
                            module="risk_management",
                            additional_data={
                                'consecutive_losses': self.consecutive_losses,
                                'max_allowed': self.config.MAX_CONSECUTIVE_LOSSES,
                                'last_trade_results': self.last_trade_results
                            }
                        )
                    
                    # Notification Telegram d'urgence
                    message = f"üö® BOT ARR√äT√â AUTOMATIQUEMENT\n"
                    message += f"Raison: {self.consecutive_losses} pertes cons√©cutives\n"
                    message += f"Derni√®re perte: {pnl_amount:+.2f} USDC ({pnl_percent:+.2f}%)\n"
                    message += f"Protection activ√©e pour pr√©server le capital"
                    
                    await self.telegram_notifier.send_message(message)
                    
                    # Arr√™t du bot
                    self.is_running = False
                    return
            
            # Mise √† jour des totaux
            self.current_capital += (trade.entry_price * trade.size) + pnl_amount
            self.daily_pnl += pnl_amount
            self.daily_trades += 1
            
            # Suppression de la position ouverte
            del self.open_positions[trade_id]
            
            # üî• Suppression de la position sauvegard√©e en Firebase
            try:
                if self.firebase_logger and self.firebase_logger.firebase_initialized and self.firebase_logger.firestore_db:
                    self.firebase_logger.firestore_db.collection('position_states').document(trade_id).delete()
                    self.logger.debug(f"üî• Position {trade_id} supprim√©e de Firebase")
            except Exception as e:
                self.logger.error(f"‚ùå Erreur suppression position Firebase {trade_id}: {e}")
            
            # Logging
            pnl_symbol = "üöÄ" if pnl_amount > 0 else "üìâ"
            self.logger.info(f"{pnl_symbol} Trade ferm√© : {symbol} ({reason})")
            self.logger.info(f"   üí∞ Prix de sortie: {exit_price:.4f} USDC")
            self.logger.info(f"   üìä P&L: {pnl_amount:+.2f} USDC ({pnl_percent:+.2f}%)")
            self.logger.info(f"   ‚è±Ô∏è Dur√©e: {trade.duration}")
            total_capital = self.get_total_capital()
            daily_pnl_percent = self.daily_pnl / total_capital * 100
            self.logger.info(f"   üîÑ Total journalier: {self.daily_pnl:+.2f} USDC ({daily_pnl_percent:+.2f}%)")
            
            # Firebase logging pour trade ferm√©
            if self.firebase_logger:
                self.firebase_logger.log_message(
                    level="INFO",
                    message=f"{pnl_symbol} TRADE FERM√â: {symbol} - P&L: {pnl_amount:+.2f} USDC ({pnl_percent:+.2f}%)",
                    module="trade_execution",
                    trade_id=trade_id,
                    pair=symbol,
                    capital=total_capital,
                    additional_data={
                        'exit_price': exit_price,
                        'exit_reason': reason,
                        'pnl_amount': pnl_amount,
                        'pnl_percent': pnl_percent,
                        'duration_seconds': trade.duration.total_seconds() if trade.duration else 0,
                        'daily_pnl': self.daily_pnl,
                        'daily_trades': self.daily_trades
                    }
                )
            
            # Notification Telegram
            total_capital = self.get_total_capital()
            await self.telegram_notifier.send_trade_close_notification(trade, pnl_amount, pnl_percent, self.daily_pnl, total_capital)
            
            # Log dans Google Sheets (si activ√©)
            if self.sheets_logger:
                capital_before_close = total_capital - pnl_amount  # Capital avant fermeture
                await self.sheets_logger.log_trade(trade, "CLOSE", capital_before_close, total_capital)
            
            # Mise √† jour en base de donn√©es
            if trade.db_id:
                try:
                    exit_data = {
                        'exit_price': exit_price,
                        'exit_time': datetime.now(),
                        'exit_reason': reason,
                        'pnl_amount': pnl_amount,
                        'pnl_percent': pnl_percent
                    }
                    await self.database.update_trade_exit(trade.db_id, exit_data)
                    self.logger.info(f"üìä Trade mis √† jour en base (ID: {trade.db_id})")
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur mise √† jour DB: {e}")
            
            # Log Firebase pour fermeture de trade
            if self.firebase_logger:
                try:
                    trade_data = {
                        'trade_id': trade_id,
                        'pair': trade.pair,
                        'direction': trade.direction.value,
                        'size': trade.size,
                        'entry_price': trade.entry_price,
                        'exit_price': exit_price,
                        'pnl_amount': pnl_amount,
                        'pnl_percent': pnl_percent,
                        'duration_seconds': trade.duration.total_seconds() if trade.duration else 0,
                        'exit_reason': reason,
                        'daily_pnl': self.daily_pnl,
                        'total_capital': total_capital,
                        'stop_loss': trade.stop_loss,
                        'take_profit': trade.take_profit,
                        'capital_before': total_capital - pnl_amount,
                        'capital_after': total_capital,
                        'pnl_gross': pnl_amount,
                        'pnl_net': pnl_amount  # √Ä ajuster si vous avez des frais √† d√©duire
                    }
                    self.firebase_logger.log_trade(trade_data)
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur log Firebase fermeture: {e}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur fermeture position {trade_id}: {e}")
    
    async def close_position_virtually(self, trade_id: str, exit_price: float, reason: str):
        """Ferme une position virtuellement (sans ordre r√©el) en cas de probl√®me"""
        try:
            trade = self.open_positions[trade_id]
            symbol = trade.pair
            
            self.logger.warning(f"üîÑ Fermeture virtuelle de {symbol} √† {exit_price:.4f} USDC")
            
            # Mise √† jour du trade
            trade.status = TradeStatus.CLOSED
            trade.exit_price = exit_price
            trade.exit_timestamp = datetime.now()
            trade.duration = trade.exit_timestamp - trade.timestamp
            trade.exit_reason = f"{reason}_VIRTUAL"
            
            # Calcul P&L (peut √™tre inexact √† cause du solde insuffisant)
            pnl_amount = (exit_price - trade.entry_price) * trade.size
            pnl_percent = (exit_price - trade.entry_price) / trade.entry_price * 100
            trade.pnl = pnl_amount
            
            # Mise √† jour des totaux (ajustement conservateur)
            self.current_capital += (trade.entry_price * trade.size) + pnl_amount
            self.daily_pnl += pnl_amount
            self.daily_trades += 1
            
            # Suppression de la position ouverte
            del self.open_positions[trade_id]
            
            # üî• Suppression de la position sauvegard√©e en Firebase
            try:
                if self.firebase_logger and self.firebase_logger.firebase_initialized and self.firebase_logger.firestore_db:
                    self.firebase_logger.firestore_db.collection('position_states').document(trade_id).delete()
                    self.logger.debug(f"üî• Position virtuelle {trade_id} supprim√©e de Firebase")
            except Exception as e:
                self.logger.error(f"‚ùå Erreur suppression position virtuelle Firebase {trade_id}: {e}")
            
            # Logging sp√©cial pour fermeture virtuelle
            pnl_symbol = "‚ö†Ô∏è" 
            self.logger.warning(f"{pnl_symbol} Trade ferm√© virtuellement : {symbol} ({reason})")
            self.logger.warning(f"   üí∞ Prix de sortie: {exit_price:.4f} USDC")
            self.logger.warning(f"   üìä P&L th√©orique: {pnl_amount:+.2f} USDC ({pnl_percent:+.2f}%)")
            self.logger.warning(f"   ‚è±Ô∏è Dur√©e: {trade.duration}")
            self.logger.warning(f"   ‚ö†Ô∏è ATTENTION: Fermeture virtuelle - v√©rifiez manuellement")
            
            # Notification Telegram avec avertissement
            total_capital = self.get_total_capital()
            await self.telegram_notifier.send_trade_close_notification(
                trade, pnl_amount, pnl_percent, self.daily_pnl, total_capital
            )
            
            # Log dans Google Sheets (si activ√©) avec mention sp√©ciale
            if self.sheets_logger:
                capital_before_virtual = total_capital - pnl_amount  # Capital avant fermeture virtuelle
                await self.sheets_logger.log_trade(trade, "CLOSE_VIRTUAL", capital_before_virtual, total_capital)
            
            # Mise √† jour en base de donn√©es
            if trade.db_id:
                try:
                    exit_data = {
                        'exit_price': exit_price,
                        'exit_time': datetime.now(),
                        'exit_reason': f"{reason}_VIRTUAL",
                        'pnl_amount': pnl_amount,
                        'pnl_percent': pnl_percent
                    }
                    await self.database.update_trade_exit(trade.db_id, exit_data)
                    self.logger.info(f"üìä Trade virtuel mis √† jour en base (ID: {trade.db_id})")
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur mise √† jour DB virtuelle: {e}")
            
            # Log Firebase pour fermeture virtuelle de trade
            if self.firebase_logger:
                try:
                    trade_data = {
                        'trade_id': trade_id,
                        'pair': trade.pair,
                        'direction': trade.direction.value,
                        'size': trade.size,
                        'entry_price': trade.entry_price,
                        'exit_price': exit_price,
                        'pnl_amount': pnl_amount,
                        'pnl_percent': pnl_percent,
                        'duration_seconds': trade.duration.total_seconds() if trade.duration else 0,
                        'exit_reason': f"{reason}_VIRTUAL",
                        'daily_pnl': self.daily_pnl,
                        'total_capital': total_capital,
                        'stop_loss': trade.stop_loss,
                        'take_profit': trade.take_profit,
                        'capital_before': total_capital - pnl_amount,
                        'capital_after': total_capital,
                        'pnl_gross': pnl_amount,
                        'pnl_net': pnl_amount  # Pas de frais en fermeture virtuelle
                    }
                    self.firebase_logger.log_trade(trade_data)
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur log Firebase fermeture virtuelle: {e}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur fermeture virtuelle {trade_id}: {e}")
    
    def should_stop_daily_trading(self) -> bool:
        """V√©rifie si on doit arr√™ter le trading pour la journ√©e"""
        total_capital = self.get_total_capital()
        daily_pnl_percent = self.daily_pnl / total_capital * 100
        
        # Objectif atteint
        if daily_pnl_percent >= self.config.DAILY_TARGET_PERCENT:
            self.daily_target_reached = True
            return True
        
        # Stop loss atteint
        if daily_pnl_percent <= -self.config.DAILY_STOP_LOSS_PERCENT:
            self.daily_stop_loss_hit = True
            return True
        
        return False

    async def handle_daily_stop(self):
        """G√®re l'arr√™t quotidien du bot"""
        self.logger.info("üõë Conditions d'arr√™t quotidien atteintes")
        
        # Firebase logging pour arr√™t quotidien
        if self.firebase_logger:
            reason = "DAILY_TARGET" if self.daily_target_reached else "DAILY_STOP_LOSS"
            total_capital = self.get_total_capital()
            daily_pnl_percent = self.daily_pnl / total_capital * 100
            
            self.firebase_logger.log_message(
                level="WARNING",
                message=f"üõë ARR√äT QUOTIDIEN: {reason} - P&L: {self.daily_pnl:+.2f} USDC ({daily_pnl_percent:+.2f}%)",
                module="daily_management",
                capital=total_capital,
                additional_data={
                    'reason': reason,
                    'daily_pnl': self.daily_pnl,
                    'daily_pnl_percent': daily_pnl_percent,
                    'daily_trades': self.daily_trades,
                    'open_positions_count': len(self.open_positions),
                    'target_reached': self.daily_target_reached,
                    'stop_loss_hit': self.daily_stop_loss_hit
                }
            )
        
        # Fermeture des positions ouvertes
        for trade_id in list(self.open_positions.keys()):
            trade = self.open_positions[trade_id]
            ticker = self.binance_client.get_symbol_ticker(symbol=trade.pair)
            current_price = float(ticker['price'])
            reason = "DAILY_TARGET" if self.daily_target_reached else "DAILY_STOP_LOSS"
            await self.close_position(trade_id, current_price, reason)
        
        # Notification finale
        status = "‚úÖ Objectif atteint" if self.daily_target_reached else "üõë Stop loss quotidien atteint"
        total_capital = self.get_total_capital()
        await self.telegram_notifier.send_daily_summary(
            status, self.daily_pnl, self.daily_trades, total_capital
        )
        
        # Log performance quotidienne (si activ√©)
        if self.sheets_logger:
            total_capital = self.get_total_capital()
            await self.sheets_logger.log_daily_performance(
                total_capital, self.daily_pnl, self.daily_trades, status
            )
        
        # Enregistrement des performances journali√®res en base de donn√©es
        await self.save_daily_performance()
        
        self.is_running = False
        self.logger.info("üü¢ [STOPPED] Bot arr√™t√© pour la journ√©e")
    
    async def save_daily_performance(self):
        """Enregistre les performances journali√®res en base de donn√©es"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            
            # Calcul des m√©triques bas√© sur le capital total dynamique
            total_capital = self.get_total_capital()
            daily_pnl_percent = (self.daily_pnl / total_capital) * 100
            winning_trades = 0
            losing_trades = 0
            
            # R√©cup√©ration des trades du jour depuis la base
            trades_today = await self.database.get_trades_history(limit=100)
            trades_today = [t for t in trades_today if t.get('entry_time', '').startswith(today)]
            
            for trade in trades_today:
                if trade.get('pnl_amount', 0) > 0:
                    winning_trades += 1
                elif trade.get('pnl_amount', 0) < 0:
                    losing_trades += 1
            
            total_trades = winning_trades + losing_trades
            win_rate = (winning_trades / max(total_trades, 1)) * 100
            
            # Donn√©es de performance
            perf_data = {
                'date': today,
                'start_capital': total_capital,  # Capital total dynamique
                'end_capital': total_capital,  # Capital total dynamique actuel
                'daily_pnl': self.daily_pnl,
                'daily_pnl_percent': daily_pnl_percent,
                'total_trades': total_trades,
                'winning_trades': winning_trades,
                'losing_trades': losing_trades,
                'win_rate': win_rate,
                'max_drawdown': min(0, daily_pnl_percent),  # Approximation
                'status': 'COMPLETED'
            }
            
            await self.database.insert_daily_performance(perf_data)
            self.logger.info(f"üìä Performances journali√®res enregistr√©es en base")
            
            # Log Firebase pour les performances quotidiennes
            if self.firebase_logger:
                try:
                    firebase_perf_data = {
                        'date': today,
                        'total_capital': total_capital,
                        'daily_pnl': self.daily_pnl,
                        'daily_pnl_percent': daily_pnl_percent,
                        'total_trades': total_trades,
                        'winning_trades': winning_trades,
                        'losing_trades': losing_trades,
                        'win_rate': win_rate,
                        'max_drawdown': min(0, daily_pnl_percent),
                        'status': 'COMPLETED'
                    }
                    self.firebase_logger.log_performance(firebase_perf_data)
                    self.logger.info(f"üî• Performances journali√®res enregistr√©es dans Firebase")
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur log Firebase performances: {e}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur enregistrement performances journali√®res: {e}")
    
    async def save_realtime_metrics(self):
        """Enregistre les m√©triques en temps r√©el"""
        try:
            # Calcul du win rate actuel
            if self.daily_trades > 0:
                # Approximation bas√©e sur le P&L positif
                win_rate = max(0, (self.daily_pnl / self.daily_trades) * 50)  # Approximation
            else:
                win_rate = 0
            
            metrics = {
                'timestamp': datetime.now(),
                'current_capital': self.get_total_capital(),  # Capital total dynamique
                'open_positions': len(self.open_positions),
                'daily_pnl': self.daily_pnl,
                'total_pnl': self.get_total_capital() - self.start_capital,  # P&L total par rapport au capital initial USDC
                'win_rate': win_rate,
                'pairs_analyzed': [trade.pair for trade in self.open_positions.values()],
                'top_pair': list(self.open_positions.values())[0].pair if self.open_positions else None
            }
            
            await self.database.insert_realtime_metrics(metrics)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur enregistrement m√©triques temps r√©el: {e}")
    
    async def convert_dust_to_bnb_if_needed(self):
        """Convertit automatiquement les miettes de crypto en BNB si n√©cessaire"""
        try:
            account_info = self.binance_client.get_account()
            dust_assets = []
            
            for balance in account_info['balances']:
                asset = balance['asset']
                free_balance = float(balance['free'])
                
                # Skip USDC, BNB et les soldes nuls
                if asset in ['USDC', 'BNB'] or free_balance <= 0.00001:
                    continue
                
                try:
                    # Calcul de la valeur en USDC
                    symbol = asset + 'USDC'
                    ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                    price_usdc = float(ticker['price'])
                    value_usdc = free_balance * price_usdc
                    
                    # Si c'est une miette
                    if value_usdc < self.config.DUST_BALANCE_THRESHOLD_USDC:
                        dust_assets.append({
                            'asset': asset,
                            'balance': free_balance,
                            'value_usdc': value_usdc
                        })
                        
                except Exception:
                    # Pas de paire USDC pour cet asset, on ignore
                    continue
            
            if dust_assets:
                total_dust_value = sum(d['value_usdc'] for d in dust_assets)
                self.logger.info(f"üßπ {len(dust_assets)} miettes d√©tect√©es (total: {total_dust_value:.2f}$ USDC)")
                
                # Conversion via l'API Binance Dust Transfer
                try:
                    assets_to_convert = [d['asset'] for d in dust_assets]
                    result = self.binance_client.transfer_dust(**{'asset': assets_to_convert})
                    
                    if result.get('transferResult'):
                        total_bnb = sum(float(r.get('transferedAmount', 0)) for r in result['transferResult'])
                        self.logger.info(f"‚úÖ Miettes converties en {total_bnb:.8f} BNB")
                        
                        # Notification Telegram
                        await self.telegram_notifier.send_message(
                            f"üßπ **Nettoyage automatique des miettes**\\n\\n"
                            f"üí∞ {len(dust_assets)} assets convertis\\n"
                            f"üìä Valeur totale: {total_dust_value:.2f}$ USDC\\n"
                            f"ü™ô BNB re√ßu: {total_bnb:.8f} BNB\\n\\n"
                            f"Assets convertis: {', '.join(assets_to_convert)}"
                        )
                        
                    else:
                        self.logger.warning(f"‚ö†Ô∏è √âchec conversion miettes: {result}")
                        
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Erreur conversion miettes: {e}")
                    # Alternative: Log pour conversion manuelle
                    dust_list = ', '.join([f"{d['asset']} ({d['value_usdc']:.2f}$)" for d in dust_assets])
                    self.logger.info(f"üí° Miettes √† convertir manuellement: {dust_list}")
                    
        except Exception as e:
            self.logger.error(f"‚ùå Erreur check miettes: {e}")

    async def check_positions_consistency(self):
        """V√©rifie la coh√©rence entre les positions en m√©moire et les soldes Binance + g√®re la surexposition"""
        try:
            account_info = self.binance_client.get_account()
            balances = {b['asset']: float(b['free']) for b in account_info['balances']}
            total_capital = self.get_total_capital()
            max_exposure_per_asset = total_capital * self.config.MAX_EXPOSURE_PER_ASSET_PERCENT / 100
            
            # 1. V√©rification des incoh√©rences de positions trac√©es
            if self.open_positions:
                inconsistent_positions = []
                for trade_id, trade in self.open_positions.items():
                    base_asset = trade.pair.replace('USDC', '')
                    available_balance = balances.get(base_asset, 0)
                    
                    # V√©rification si le solde est coh√©rent avec la position
                    if available_balance < trade.size * 0.95:  # Tol√©rance de 5%
                        inconsistent_positions.append({
                            'trade_id': trade_id,
                            'symbol': trade.pair,
                            'expected': trade.size,
                            'actual': available_balance,
                            'difference': trade.size - available_balance
                        })
                
                if inconsistent_positions:
                    self.logger.warning(f"‚ö†Ô∏è {len(inconsistent_positions)} positions incoh√©rentes d√©tect√©es:")
                    for pos in inconsistent_positions:
                        self.logger.warning(f"   {pos['symbol']}: attendu {pos['expected']:.8f}, r√©el {pos['actual']:.8f} (diff: {pos['difference']:.8f})")
            
            # 2. V√âRIFICATION CRITIQUE : Surexposition sur soldes existants
            overexposed_assets = []
            for asset, balance in balances.items():
                if asset == 'USDC' or balance <= 0.00001:
                    continue
                    
                try:
                    # Calcul exposition actuelle de cet asset
                    current_exposure = self.get_asset_exposure(asset)
                    
                    if current_exposure > max_exposure_per_asset:
                        overexposed_assets.append({
                            'asset': asset,
                            'current_exposure': current_exposure,
                            'max_allowed': max_exposure_per_asset,
                            'excess_eur': current_exposure - max_exposure_per_asset,
                            'balance': balance
                        })
                        
                except Exception as e:
                    self.logger.debug(f"‚ö†Ô∏è Impossible de v√©rifier exposition {asset}: {e}")
                    continue
            
            # 3. CORRECTION AUTOMATIQUE des surexpositions
            if overexposed_assets:
                self.logger.warning(f"üö® SUREXPOSITION D√âTECT√âE sur {len(overexposed_assets)} asset(s)!")
                
                for asset_info in overexposed_assets:
                    asset = asset_info['asset']
                    excess_eur = asset_info['excess_eur']
                    current_exposure = asset_info['current_exposure']
                    max_allowed = asset_info['max_allowed']
                    
                    self.logger.warning(f"   üî• {asset}: {current_exposure:.2f} USDC > {max_allowed:.2f} USDC (exc√®s: {excess_eur:.2f} USDC)")
                    
                    # Calculer quelle quantit√© vendre pour revenir dans la limite
                    try:
                        symbol = asset + 'USDC'
                        ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                        current_price = float(ticker['price'])
                        
                        # Quantit√© √† vendre = exc√®s en USDC / prix actuel
                        quantity_to_sell = excess_eur / current_price
                        balance = asset_info['balance']
                        
                        # Ne pas vendre plus que ce qu'on a
                        if quantity_to_sell > balance:
                            quantity_to_sell = balance * 0.95  # Marge de s√©curit√©
                        
                        # Arrondir selon les r√®gles de la paire
                        quantity_to_sell = self.round_quantity(symbol, quantity_to_sell)
                        
                        if quantity_to_sell > 0:
                            self.logger.warning(f"   üîß VENTE FORC√âE {asset}: {quantity_to_sell:.8f} ({quantity_to_sell * current_price:.2f} USDC)")
                            
                            # Ex√©cuter la vente d'urgence
                            try:
                                order = self.binance_client.order_market_sell(
                                    symbol=symbol,
                                    quantity=quantity_to_sell
                                )
                                
                                self.logger.info(f"‚úÖ SUREXPOSITION CORRIG√âE: Vendu {quantity_to_sell:.8f} {asset} pour {quantity_to_sell * current_price:.2f} USDC")
                                
                                # Notification Telegram d'urgence
                                message = f"üö® CORRECTION SUREXPOSITION\n"
                                message += f"Asset: {asset}\n"
                                message += f"Vendu: {quantity_to_sell:.8f} ({quantity_to_sell * current_price:.2f} USDC)\n"
                                message += f"Exposition avant: {current_exposure:.2f} USDC\n"
                                message += f"Limite: {max_allowed:.2f} USDC"
                                
                                await self.telegram_notifier.send_message(message)
                                
                            except Exception as e:
                                self.logger.error(f"‚ùå √âCHEC vente forc√©e {asset}: {e}")
                                
                    except Exception as e:
                        self.logger.error(f"‚ùå Erreur calcul vente forc√©e {asset}: {e}")
            
            # 4. D√©tection de soldes non trac√©s (positions fant√¥mes inverses)
            for asset, balance in balances.items():
                if asset == 'USDC' or balance <= 0.001:
                    continue
                    
                # V√©rifier si on a un solde significatif sans position trac√©e
                has_tracked_position = any(trade.pair.replace('USDC', '') == asset for trade in self.open_positions.values())
                
                if not has_tracked_position and balance > 0.001:
                    try:
                        symbol = asset + 'USDC'
                        ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
                        current_price = float(ticker['price'])
                        value_usdc = balance * current_price
                        
                        if value_usdc > 100:  # Seuil significatif
                            self.logger.warning(f"‚ö†Ô∏è Incoh√©rence d√©tect√©e: {asset} balance={balance:.6f} mais 0 positions en m√©moire")
                            
                    except Exception:
                        pass
                        
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification coh√©rence positions: {e}")

    def calculate_volatility_1h(self, symbol: str) -> float:
        """
        Calcule la volatilit√© sur les 12 derni√®res heures pour une paire.
        M√©thode : variation max-min sur prix moyen (en %).
        """
        try:
            # R√©cup√©rer les donn√©es horaires (sur 12 heures pour une meilleure moyenne)
            klines = self.binance_client.get_historical_klines(
                symbol, "1h", "12 hours ago UTC"
            )

            if len(klines) < 2:
                return 0.0

            # Extraire les prix de cl√¥ture
            prices = [float(kline[4]) for kline in klines]

            if len(prices) >= 2:
                max_price = max(prices)
                min_price = min(prices)
                avg_price = sum(prices) / len(prices)

                if avg_price > 0:
                    volatility = ((max_price - min_price) / avg_price) * 100
                    self.logger.debug(f"üìä Volatilit√© 12h {symbol}: {volatility:.2f}%")
                    return volatility
                else:
                    return 0.0

            return 0.0

        except Exception as e:
            self.logger.error(f"‚ùå Erreur calcul volatilit√© 12h {symbol}: {e}")
            return 0.0

    def count_trades_per_pair(self, symbol: str) -> int:
        """Compte le nombre de trades ouverts NON-MIETTES pour une paire - V√âRIFICATION RENFORC√âE"""
        # Comptage en m√©moire par symbole MAIS en ignorant les miettes
        non_dust_trades = self.get_non_dust_trades_on_pair(symbol)
        
        # V√©rification suppl√©mentaire via solde Binance
        try:
            base_asset = symbol.replace('USDC', '')
            binance_balance = self.get_asset_balance(base_asset)
            
            # Calculer la valeur du solde en USDC
            ticker = self.binance_client.get_symbol_ticker(symbol=symbol)
            current_price = float(ticker['price'])
            balance_value_usdc = binance_balance * current_price
            
            # Si on a un solde significatif (non-miette) mais pas de position non-miette en m√©moire = incoh√©rence
            if balance_value_usdc >= self.config.DUST_BALANCE_THRESHOLD_USDC and non_dust_trades == 0:
                self.logger.warning(f"‚ö†Ô∏è Incoh√©rence d√©tect√©e: {base_asset} balance={binance_balance:.6f} ({balance_value_usdc:.2f}$ USDC) mais 0 positions non-miettes en m√©moire")
                # Consid√©rer qu'on a d√©j√† une position pour √©viter la surexposition
                return 1
            elif balance_value_usdc < self.config.DUST_BALANCE_THRESHOLD_USDC:
                self.logger.debug(f"üßπ Solde miette d√©tect√© {base_asset}: {balance_value_usdc:.2f}$ < {self.config.DUST_BALANCE_THRESHOLD_USDC}$ - Non compt√© dans limite")
            
            return non_dust_trades
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification solde {symbol}: {e}")
            # En cas d'erreur, utiliser le comptage des trades non-miettes en m√©moire
            return non_dust_trades

    def can_open_position_enhanced(self, symbol: str, volatility: float) -> tuple[bool, str]:
        """V√©rifie si on peut ouvrir une position selon les nouvelles r√®gles"""
        # 1. V√©rifier limite trades par paire - STRICT
        current_trades = self.count_trades_per_pair(symbol)
        if current_trades >= self.config.MAX_TRADES_PER_PAIR:
            return False, f"Limite trades par paire atteinte ({current_trades}/{self.config.MAX_TRADES_PER_PAIR})"

        # 2. OPTIMIS√â: V√©rifier limite trades par heure
        if not self.can_trade_within_hourly_limit():
            return False, f"Limite trades par heure atteinte ({len(self.trades_per_hour)}/{self.config.MAX_TRADES_PER_HOUR})"

        # 3. OPTIMIS√â: V√©rifier protection contre pertes cons√©cutives
        if not self.can_trade_after_consecutive_losses():
            return False, f"Bot arr√™t√© apr√®s {self.consecutive_losses} pertes cons√©cutives"

        # 4. V√©rifier volatilit√© minimum
        if volatility < self.config.MIN_VOLATILITY_1H_PERCENT:
            return False, f"Volatilit√© insuffisante ({volatility:.2f}% < {self.config.MIN_VOLATILITY_1H_PERCENT}%)"
        
        # 5. V√©rifier nombre total de positions
        total_open_positions = len(self.open_positions)
        if total_open_positions >= self.config.MAX_OPEN_POSITIONS:
            return False, f"Limite positions totales atteinte ({total_open_positions}/{self.config.MAX_OPEN_POSITIONS})"
        
        # 4. V√âRIFICATION EXPOSITION : Contr√¥ler AVANT + APR√àS la nouvelle position
        base_asset = symbol.replace('USDC', '')
        current_exposure = self.get_asset_exposure(base_asset)
        total_capital = self.get_total_capital()
        max_exposure_per_asset = total_capital * self.config.MAX_EXPOSURE_PER_ASSET_PERCENT / 100
        
        # Calcul de la nouvelle exposition apr√®s ajout de la position
        new_position_size = self.calculate_position_size(symbol, volatility)
        future_exposure = current_exposure + new_position_size
        
        if current_exposure > max_exposure_per_asset:
            return False, f"Exposition {base_asset} d√©j√† trop √©lev√©e ({current_exposure:.2f} USDC > {max_exposure_per_asset:.2f} USDC = {self.config.MAX_EXPOSURE_PER_ASSET_PERCENT}% du capital)"
        
        if future_exposure > max_exposure_per_asset:
            return False, f"Nouvelle position cr√©erait surexposition {base_asset} ({current_exposure:.2f} + {new_position_size:.2f} = {future_exposure:.2f} USDC > {max_exposure_per_asset:.2f} USDC = {self.config.MAX_EXPOSURE_PER_ASSET_PERCENT}% du capital)"
        
        # 5. V√âRIFICATION CAPITAL : Capital USDC minimum disponible avec marge
        usdc_balance = self.get_asset_balance('USDC')
        if usdc_balance < new_position_size * 1.1:  # Marge de s√©curit√© 10%
            return False, f"Capital USDC insuffisant ({usdc_balance:.2f} < {new_position_size * 1.1:.2f} USDC requis)"
        
        return True, "OK"

    def should_timeout_position(self, trade: Trade, current_price: float, volatility: float) -> tuple[bool, str]:
        """D√©termine si une position doit √™tre ferm√©e par timeout selon les nouveaux crit√®res"""
        # Calcul dur√©e et P&L
        duration_minutes = (datetime.now() - trade.timestamp).total_seconds() / 60
        pnl_percent = (current_price - trade.entry_price) / trade.entry_price * 100
        
        # D√©terminer timeout selon volatilit√©
        timeout_threshold = self.config.TRADE_TIMEOUT_LOW_VOLATILITY if volatility < 2.0 else self.config.TRADE_TIMEOUT_HIGH_VOLATILITY
        
        # V√©rifier conditions de timeout
        if duration_minutes > timeout_threshold:
            # P&L dans la zone de timeout
            min_range, max_range = self.config.MIN_TIMEOUT_PROFIT_RANGE
            if min_range <= pnl_percent <= max_range:
                # TODO: V√©rifier indicateurs techniques (MACD, RSI neutres)
                return True, f"TIMEOUT_ADAPTATIF ({duration_minutes:.0f}min, P&L:{pnl_percent:+.2f}%)"
        
        return False, ""

    async def check_momentum_exit(self, trade: Trade, current_price: float, pnl_percent: float) -> tuple[bool, str]:
        """V√©rifie si on doit sortir pour faiblesse du momentum"""
        try:
            # V√©rifier dur√©e minimale avant sortie momentum
            duration_minutes = (datetime.now() - trade.timestamp).total_seconds() / 60
            if duration_minutes < self.config.MOMENTUM_MIN_DURATION_MINUTES:
                return False, ""  # Trop t√¥t pour sortie momentum
            
            # V√©rifier si P&L dans la zone de momentum faible
            min_range, max_range = self.config.MOMENTUM_PNL_RANGE
            if not (min_range <= pnl_percent <= max_range):
                return False, ""  # P&L en dehors de la zone de momentum faible
            
            # R√©cup√©ration des donn√©es techniques
            klines = self.binance_client.get_klines(
                symbol=trade.pair,
                interval=getattr(Client, f'KLINE_INTERVAL_{self.config.TIMEFRAME}'),
                limit=50
            )
            
            if len(klines) < 30:
                return False, ""
            
            # Pr√©paration des donn√©es
            df = pd.DataFrame(klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades_count', 'taker_buy_base', 'taker_buy_quote', 'ignore'
            ])
            
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = df[col].astype(float)
            
            # Calcul RSI
            rsi = talib.RSI(df['close'], timeperiod=self.config.RSI_PERIOD) # type: ignore
            if np.isnan(rsi.iloc[-1]):
                return False, ""
            
            # Calcul MACD
            macd, macdsignal, macdhist = talib.MACD(df['close']) # type: ignore
            if np.isnan(macdhist.iloc[-1]):
                return False, ""
            
            # Conditions de sortie momentum faible
            rsi_condition = rsi.iloc[-1] < self.config.MOMENTUM_RSI_THRESHOLD
            macd_condition = macdhist.iloc[-1] < 0 if self.config.MOMENTUM_MACD_NEGATIVE else True
            
            if rsi_condition and macd_condition:
                reason = f"Momentum faible d√©tect√© (RSI:{rsi.iloc[-1]:.1f}, MACD_hist:{macdhist.iloc[-1]:.6f}, P&L:{pnl_percent:+.2f}%)"
                return True, reason
            
            return False, ""
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification momentum {trade.pair}: {e}")
            return False, ""

    # OPTIMIS√â: Nouvelles fonctions de protection
    def clean_old_trades_from_hour(self):
        """Nettoie les trades de plus d'une heure"""
        now = datetime.now()
        self.trades_per_hour = [
            trade_time for trade_time in self.trades_per_hour 
            if (now - trade_time).total_seconds() < 3600  # 1 heure = 3600 secondes
        ]

    def can_trade_within_hourly_limit(self) -> bool:
        """V√©rifie si on peut trader selon la limite horaire"""
        self.clean_old_trades_from_hour()
        return len(self.trades_per_hour) < self.config.MAX_TRADES_PER_HOUR

    def can_trade_after_consecutive_losses(self) -> bool:
        """V√©rifie si on peut trader apr√®s v√©rification des pertes cons√©cutives"""
        if not self.config.ENABLE_CONSECUTIVE_LOSS_PROTECTION:
            return True
        
        # V√©rifier si on est en pause
        if self.consecutive_loss_pause_until:
            now = datetime.now()
            if now < self.consecutive_loss_pause_until:
                return False  # Encore en pause
            else:
                # Fin de pause - R√âINITIALISATION COMPL√àTE
                old_consecutive_losses = self.consecutive_losses
                self.logger.info(f"‚úÖ FIN DE PAUSE: Reprise du trading apr√®s pause de s√©curit√©")
                self.consecutive_loss_pause_until = None
                
                # üî• R√âINITIALISATION COMPL√àTE DU COMPTEUR
                self.consecutive_losses = 0
                self.last_trade_results = []  # Reset de l'historique des r√©sultats
                
                self.logger.info(f"üîÑ COMPTEURS R√âINITIALIS√âS dans can_trade_after_consecutive_losses:")
                self.logger.info(f"   Pertes cons√©cutives: {old_consecutive_losses} ‚Üí {self.consecutive_losses}")
                
                return True
        
        return self.consecutive_losses < self.config.MAX_CONSECUTIVE_LOSSES

    def update_trade_result(self, is_profit: bool):
        """Met √† jour le suivi des r√©sultats de trades"""
        self.last_trade_results.append(is_profit)
        
        # Garder seulement les 10 derniers trades
        if len(self.last_trade_results) > 10:
            self.last_trade_results.pop(0)
        
        # Si c'est un profit, reset le compteur de pertes cons√©cutives et la pause
        if is_profit:
            if self.consecutive_losses > 0:
                self.logger.info(f"‚úÖ PROFIT: Reset du compteur de pertes cons√©cutives ({self.consecutive_losses} ‚Üí 0)")
            self.consecutive_losses = 0
            self.consecutive_loss_pause_until = None  # Annuler toute pause en cours
        else:
            # Compter les pertes cons√©cutives depuis la fin
            self.consecutive_losses = 0
            for result in reversed(self.last_trade_results):
                if not result:  # Si c'est une perte
                    self.consecutive_losses += 1
                else:  # Si c'est un profit, arr√™ter le comptage
                    break
        
        # Log important si on approche de la limite
        if self.consecutive_losses >= self.config.MAX_CONSECUTIVE_LOSSES - 1:
            self.logger.warning(f"‚ö†Ô∏è ATTENTION: {self.consecutive_losses} pertes cons√©cutives (limite: {self.config.MAX_CONSECUTIVE_LOSSES})")

    def check_breakout_confirmation(self, symbol: str, current_price: float) -> bool:
        """V√©rifie la confirmation de cassure"""
        if not self.config.ENABLE_BREAKOUT_CONFIRMATION:
            return True
        
        try:
            # R√©cup√©rer les derni√®res bougies pour trouver le dernier sommet
            klines = self.binance_client.get_klines(
                symbol=symbol,
                interval=Client.KLINE_INTERVAL_1MINUTE,
                limit=20
            )
            
            if len(klines) < 10:
                return True  # Pas assez de donn√©es, on laisse passer
            
            # Trouver le plus haut des 20 derni√®res minutes
            highs = [float(k[2]) for k in klines[:-1]]  # Exclure la bougie courante
            last_high = max(highs)
            
            # V√©rifier si le prix actuel d√©passe le dernier sommet + seuil
            confirmation_threshold = last_high * (1 + self.config.BREAKOUT_CONFIRMATION_PERCENT / 100)
            
            if current_price > confirmation_threshold:
                self.logger.info(f"‚úÖ Cassure confirm√©e {symbol}: {current_price:.4f} > {confirmation_threshold:.4f}")
                return True
            else:
                self.logger.debug(f"‚ùå Cassure non confirm√©e {symbol}: {current_price:.4f} ‚â§ {confirmation_threshold:.4f}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification cassure {symbol}: {e}")
            return True  # En cas d'erreur, on laisse passer

    async def check_market_volatility(self, top_pairs: List):
        """V√©rifie la volatilit√© moyenne du march√© et envoie des notifications"""
        try:
            if not top_pairs:
                return
            
            # Calcul de la volatilit√© moyenne des top paires
            volatilities = [pair.volatility for pair in top_pairs if hasattr(pair, 'volatility')]
            
            if not volatilities:
                return
            
            avg_volatility = sum(volatilities) / len(volatilities)
            
            # Notification de volatilit√© via le notificateur d'horaires
            await self.hours_notifier.check_volatility_and_notify(avg_volatility)
            
            # Log pour suivi
            self.logger.debug(f"üìä Volatilit√© moyenne march√©: {avg_volatility:.2f}% (sur {len(volatilities)} paires)")
            
            # Firebase logging pour volatilit√© march√©
            if self.firebase_logger and avg_volatility > 5.0:  # Logger seulement si volatilit√© significative
                self.firebase_logger.log_message(
                    level="INFO",
                    message=f"üìä VOLATILIT√â MARCH√â: {avg_volatility:.2f}% (sur {len(volatilities)} paires)",
                    module="market_analysis",
                    additional_data={
                        'avg_volatility': avg_volatility,
                        'pairs_count': len(volatilities),
                        'volatilities': volatilities[:10]  # Top 10 pour √©viter surcharge
                    }
                )
                
                # Log m√©trique volatilit√©
                self.firebase_logger.log_metric("market_volatility", avg_volatility)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification volatilit√© march√©: {e}")
