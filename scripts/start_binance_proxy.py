#!/usr/bin/env python3
"""
Script de d√©marrage pour le service Binance Proxy sur VPS
Gestion des erreurs, restart automatique et monitoring
"""

import argparse
import logging
import os
import signal
import sys
import time
from pathlib import Path

# Ajouter le r√©pertoire parent au PATH pour les imports
sys.path.append(str(Path(__file__).parent.parent))

import asyncio

from utils.binance_proxy_service import BinanceProxyService


class ProxyServiceManager:
    """Gestionnaire du service proxy avec restart automatique"""
    
    def __init__(self, max_retries: int = 5, retry_delay: int = 30):
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        self.service = None
        self.should_restart = True
        self.setup_logging()
        
    def setup_logging(self):
        """Configuration du logging pour le manager"""
        log_dir = Path('/opt/toTheMoon_tradebot/logs')
        log_dir.mkdir(exist_ok=True, parents=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_dir / 'proxy_manager.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger('ProxyManager')
        
    def signal_handler(self, signum, frame):
        """Gestionnaire des signaux syst√®me"""
        self.logger.info(f"üõë Signal {signum} re√ßu - Arr√™t en cours")
        self.should_restart = False
        if self.service:
            self.service.stop_service()
            
    def setup_signal_handlers(self):
        """Configuration des gestionnaires de signaux"""
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
    async def run_service_with_retry(self):
        """Ex√©cute le service avec retry automatique"""
        retry_count = 0
        
        while self.should_restart and retry_count < self.max_retries:
            try:
                self.logger.info(f"üöÄ D√©marrage du service (tentative {retry_count + 1}/{self.max_retries})")
                
                # Cr√©er nouvelle instance du service
                self.service = BinanceProxyService()
                
                # D√©marrer le service
                await self.service.start_service()
                
                # Si on arrive ici, le service s'est arr√™t√© proprement
                self.logger.info("‚úÖ Service arr√™t√© proprement")
                break
                
            except Exception as e:
                retry_count += 1
                self.logger.error(f"‚ùå Erreur service (tentative {retry_count}): {e}")
                
                if retry_count < self.max_retries and self.should_restart:
                    self.logger.info(f"‚è≥ Retry dans {self.retry_delay} secondes...")
                    await asyncio.sleep(self.retry_delay)
                else:
                    self.logger.error("üíÄ Nombre maximum de tentatives atteint")
                    break
        
        self.logger.info("üîö Gestionnaire de service arr√™t√©")
        
    async def start(self):
        """D√©marrage du gestionnaire"""
        self.setup_signal_handlers()
        self.logger.info("üéØ Gestionnaire de service Binance Proxy d√©marr√©")
        
        await self.run_service_with_retry()


def check_environment():
    """V√©rification de l'environnement VPS"""
    required_files = [
        '/opt/toTheMoon_tradebot/.env',
        '/opt/toTheMoon_tradebot/firebase_credentials.json'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå Fichiers manquants:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        return False
    
    # V√©rifier les permissions du r√©pertoire de logs
    log_dir = Path('/opt/toTheMoon_tradebot/logs')
    try:
        log_dir.mkdir(exist_ok=True, parents=True)
        test_file = log_dir / 'test_permissions.tmp'
        test_file.write_text('test')
        test_file.unlink()
    except Exception as e:
        print(f"‚ùå Probl√®me de permissions logs: {e}")
        return False
    
    print("‚úÖ Environnement VPS valid√©")
    return True


def create_systemd_service():
    """G√©n√®re le fichier de service systemd"""
    service_content = """[Unit]
Description=Binance Proxy Service for Trading Bot
After=network.target
Wants=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/toTheMoon_tradebot
ExecStart=/usr/bin/python3 /opt/toTheMoon_tradebot/scripts/start_binance_proxy.py --daemon
Restart=always
RestartSec=10
Environment=PYTHONPATH=/opt/toTheMoon_tradebot

[Install]
WantedBy=multi-user.target
"""
    
    service_path = '/etc/systemd/system/binance-proxy.service'
    
    try:
        with open(service_path, 'w') as f:
            f.write(service_content)
        
        print(f"‚úÖ Service systemd cr√©√©: {service_path}")
        print("\nüìã Commandes pour activer le service:")
        print("   sudo systemctl daemon-reload")
        print("   sudo systemctl enable binance-proxy")
        print("   sudo systemctl start binance-proxy")
        print("   sudo systemctl status binance-proxy")
        
    except PermissionError:
        print("‚ùå Permissions insuffisantes pour cr√©er le service systemd")
        print("   Ex√©cutez avec sudo ou cr√©ez manuellement le fichier")


async def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(description='Gestionnaire du service Binance Proxy')
    parser.add_argument('--daemon', action='store_true', help='Mode d√©mon (pour systemd)')
    parser.add_argument('--check-env', action='store_true', help='V√©rifier l\'environnement')
    parser.add_argument('--create-service', action='store_true', help='Cr√©er le service systemd')
    parser.add_argument('--max-retries', type=int, default=5, help='Nombre max de tentatives')
    parser.add_argument('--retry-delay', type=int, default=30, help='D√©lai entre tentatives (sec)')
    
    args = parser.parse_args()
    
    # V√©rification de l'environnement
    if args.check_env:
        if check_environment():
            print("‚úÖ Environnement pr√™t pour le service")
            return 0
        else:
            print("‚ùå Environnement non pr√™t")
            return 1
    
    # Cr√©ation du service systemd
    if args.create_service:
        create_systemd_service()
        return 0
    
    # V√©rification automatique avant d√©marrage
    if not check_environment():
        print("‚ùå Environnement non pr√™t - V√©rifiez la configuration")
        return 1
    
    # D√©marrage du service
    try:
        manager = ProxyServiceManager(
            max_retries=args.max_retries,
            retry_delay=args.retry_delay
        )
        
        await manager.start()
        return 0
        
    except KeyboardInterrupt:
        print("\nüõë Arr√™t demand√© par l'utilisateur")
        return 0
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)
    exit(exit_code)
