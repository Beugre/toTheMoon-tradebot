#!/usr/bin/env python3
"""
Script de validation post-d√©ploiement VPS
V√©rifie que le service proxy fonctionne correctement
"""

import subprocess
import sys
import time
from datetime import datetime, timedelta


def check_systemd_service():
    """V√©rifier le statut du service systemd"""
    try:
        result = subprocess.run(['systemctl', 'is-active', 'binance-proxy'], 
                               capture_output=True, text=True)
        if result.returncode == 0 and result.stdout.strip() == 'active':
            print("‚úÖ Service binance-proxy actif")
            return True
        else:
            print(f"‚ùå Service binance-proxy inactif: {result.stdout.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur v√©rification service: {e}")
        return False

def check_firebase_data():
    """V√©rifier la pr√©sence de donn√©es Firebase r√©centes"""
    try:
        import firebase_admin
        from firebase_admin import credentials, firestore

        # Initialiser Firebase
        if not firebase_admin._apps:
            cred = credentials.Certificate('/opt/toTheMoon_tradebot/firebase_credentials.json')
            firebase_admin.initialize_app(cred)
        
        db = firestore.client()
        
        # V√©rifier les donn√©es proxy
        doc = db.collection('binance_live').document('recent_trades').get()
        
        if doc.exists:
            data = doc.to_dict()
            timestamp = data.get('timestamp')
            trades_count = len(data.get('trades', []))
            pairs_count = len(data.get('pairs_detected', []))
            
            print(f"‚úÖ Donn√©es Firebase VPS trouv√©es:")
            print(f"   - Derni√®re MAJ: {timestamp}")
            print(f"   - {trades_count} trades collect√©s")
            print(f"   - {pairs_count} paires USDC surveill√©es")
            return True
        else:
            print("‚ùå Aucune donn√©e Firebase proxy trouv√©e")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur v√©rification Firebase: {e}")
        return False

def check_logs():
    """V√©rifier les logs r√©cents"""
    try:
        result = subprocess.run(['journalctl', '-u', 'binance-proxy', '--no-pager', '-n', '10'], 
                               capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Logs service (10 derni√®res lignes):")
            print(result.stdout)
            return True
        else:
            print("‚ùå Impossible de lire les logs")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lecture logs: {e}")
        return False

def main():
    """Validation compl√®te post-d√©ploiement"""
    print("üîç VALIDATION POST-D√âPLOIEMENT VPS")
    print("=" * 40)
    
    checks = []
    
    # Test 1: Service systemd
    print("\n1Ô∏è‚É£ V√©rification service systemd")
    checks.append(check_systemd_service())
    
    # Test 2: Donn√©es Firebase
    print("\n2Ô∏è‚É£ V√©rification donn√©es Firebase")
    checks.append(check_firebase_data())
    
    # Test 3: Logs
    print("\n3Ô∏è‚É£ V√©rification logs")
    checks.append(check_logs())
    
    # R√©sum√©
    print("\n" + "=" * 40)
    print("üìã R√âSUM√â VALIDATION")
    print("=" * 40)
    
    passed = sum(checks)
    total = len(checks)
    
    if passed == total:
        print(f"‚úÖ D√©ploiement VPS r√©ussi ({passed}/{total})")
        print("üöÄ Le proxy Binance est op√©rationnel!")
        print("\nüîó Prochaine √©tape:")
        print("   Lancer monitor_realtime.py en local pour voir les donn√©es VPS")
        return 0
    else:
        print(f"‚ùå Probl√®mes d√©tect√©s ({passed}/{total})")
        print("üîß Consultez les logs pour diagnostiquer")
        return 1

if __name__ == "__main__":
    sys.exit(main())
    sys.exit(main())
