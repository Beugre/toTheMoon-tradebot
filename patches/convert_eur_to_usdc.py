#!/usr/bin/env python3
"""
üí± CONVERSION EUR ‚Üí USDC SUR BINANCE
Script automatis√© pour convertir le capital EUR en USDC
"""

import os
import time

from binance.client import Client
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

def convert_eur_to_usdc():
    print("üí± === CONVERSION EUR ‚Üí USDC ===")
    print()
    
    try:
        # Connexion Binance
        api_key = os.getenv('BINANCE_API_KEY')
        api_secret = os.getenv('BINANCE_SECRET_KEY')
        
        if not api_key or not api_secret:
            print("‚ùå ERREUR: Cl√©s API manquantes")
            return False
            
        client = Client(api_key, api_secret)
        
        # V√©rifier le solde EUR
        account_info = client.get_account()
        eur_balance = 0.0
        
        for balance in account_info['balances']:
            if balance['asset'] == 'EUR':
                eur_balance = float(balance['free'])
                break
        
        if eur_balance < 10:
            print(f"‚ùå Solde EUR insuffisant: {eur_balance:.2f}‚Ç¨")
            return False
        
        print(f"üí∂ Solde EUR actuel: {eur_balance:.2f}‚Ç¨")
        
        # V√©rifier le taux EUR/USDC
        try:
            ticker = client.get_symbol_ticker(symbol='EURUSDC')
            eur_usdc_rate = float(ticker['price'])
            print(f"üí± Taux EUR/USDC: {eur_usdc_rate:.4f}")
        except Exception as e:
            print(f"‚ùå Impossible de r√©cup√©rer le taux EUR/USDC: {e}")
            return False
        
        # Calculer la quantit√© USDC attendue
        expected_usdc = eur_balance * eur_usdc_rate * 0.999  # -0.1% frais
        print(f"üíµ USDC attendu: {expected_usdc:.2f}$ (apr√®s frais)")
        
        # Demander confirmation
        print()
        print("‚ö†Ô∏è  CONFIRMATION REQUISE:")
        print(f"   Convertir {eur_balance:.2f}‚Ç¨ ‚Üí ~{expected_usdc:.2f}$ USDC")
        print("   Frais estim√©s: ~0.1%")
        print()
        
        confirmation = input("Confirmer la conversion ? (oui/non): ").lower().strip()
        if confirmation not in ['oui', 'o', 'yes', 'y']:
            print("‚ùå Conversion annul√©e")
            return False
        
        print()
        print("üîÑ Ex√©cution de la conversion...")
        
        # Ex√©cuter la conversion via order
        # Note: Utilisation d'un ordre market pour conversion imm√©diate
        try:
            # Calculer la quantit√© √† vendre (EUR)
            # On garde une petite marge pour les frais
            eur_to_sell = eur_balance * 0.999
            
            order = client.order_market_sell(
                symbol='EURUSDC',
                quantity=round(eur_to_sell, 2)
            )
            
            print("‚úÖ Ordre de conversion ex√©cut√©!")
            print(f"   Order ID: {order['orderId']}")
            print(f"   Status: {order['status']}")
            
            # Attendre quelques secondes et v√©rifier le r√©sultat
            time.sleep(3)
            
            # V√©rifier les nouveaux soldes
            account_info = client.get_account()
            new_eur_balance = 0.0
            new_usdc_balance = 0.0
            
            for balance in account_info['balances']:
                if balance['asset'] == 'EUR':
                    new_eur_balance = float(balance['free'])
                elif balance['asset'] == 'USDC':
                    new_usdc_balance = float(balance['free'])
            
            print()
            print("üí∞ R√âSULTAT DE LA CONVERSION:")
            print(f"   üí∂ EUR restant: {new_eur_balance:.2f}‚Ç¨")
            print(f"   üíµ USDC obtenu: {new_usdc_balance:.2f}$")
            
            # Calculer l'efficacit√© de la conversion
            actual_rate = new_usdc_balance / (eur_balance - new_eur_balance) if (eur_balance - new_eur_balance) > 0 else 0
            fee_rate = (1 - actual_rate / eur_usdc_rate) * 100 if eur_usdc_rate > 0 else 0
            
            print(f"   üìä Taux r√©alis√©: {actual_rate:.4f}")
            print(f"   üí∏ Frais effectifs: {fee_rate:.3f}%")
            
            if new_usdc_balance > expected_usdc * 0.98:  # Si on a au moins 98% du montant attendu
                print("‚úÖ CONVERSION R√âUSSIE!")
                return True
            else:
                print("‚ö†Ô∏è  Conversion partiellement r√©ussie")
                return True
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la conversion: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        return False

def verify_usdc_balance():
    """V√©rifie le solde USDC final"""
    print("\nüîç === V√âRIFICATION SOLDE FINAL ===")
    
    try:
        api_key = os.getenv('BINANCE_API_KEY')
        api_secret = os.getenv('BINANCE_SECRET_KEY')
        client = Client(api_key, api_secret)
        
        account_info = client.get_account()
        usdc_balance = 0.0
        
        for balance in account_info['balances']:
            if balance['asset'] == 'USDC':
                usdc_balance = float(balance['free'])
                break
        
        print(f"üíµ Solde USDC final: {usdc_balance:.2f}$")
        
        if usdc_balance > 1000:
            print("‚úÖ Solde USDC suffisant pour le trading")
            return True
        else:
            print("‚ö†Ô∏è  Solde USDC faible")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ CONVERSION EUR ‚Üí USDC POUR TRADING BOT")
    print("="*50)
    
    success = convert_eur_to_usdc()
    
    if success:
        verify_usdc_balance()
        print()
        print("üéØ PROCHAINES √âTAPES:")
        print("   1Ô∏è‚É£ Bot migr√© vers USDC ‚úÖ")
        print("   2Ô∏è‚É£ Capital converti ‚úÖ") 
        print("   3Ô∏è‚É£ Red√©marrer le bot")
        print("   4Ô∏è‚É£ Monitorer les performances")
    else:
        print()
        print("‚ùå CONVERSION √âCHOU√âE - NE PAS RED√âMARRER LE BOT")
