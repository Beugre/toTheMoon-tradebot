"""
Logger Google Sheets AM√âLIOR√â pour analyse fine des performances
Version optimis√©e avec suivi d√©taill√© des frais et rentabilit√© par paire
"""

import json
import logging
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional

try:
    import gspread
    from gspread.exceptions import APIError, SpreadsheetNotFound
    from oauth2client.service_account import ServiceAccountCredentials
except ImportError:
    print("‚ö†Ô∏è gspread non install√©. Installez avec: pip install gspread oauth2client")
    gspread = None

from trading_hours import get_current_trading_session, get_trading_intensity


class EnhancedSheetsLogger:
    """Gestionnaire de logging Google Sheets avec analyse fine"""
    
    def __init__(self, credentials_path: str, spreadsheet_id: str = ""):
        self.credentials_path = credentials_path
        self.spreadsheet_id = spreadsheet_id
        self.logger = logging.getLogger(__name__)
        
        # Configuration frais
        self.fee_rate = 0.001  # 0.1% par transaction
        
        # Initialisation des services
        self.client = None
        self.spreadsheet = None
        
        if gspread:
            self.initialize_sheets()
        else:
            self.logger.warning("‚ö†Ô∏è Google Sheets non configur√© - module manquant")

    def initialize_sheets(self):
        """Initialise la connexion Google Sheets"""
        try:
            # D√©finition des scopes
            scope = [
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
            
            # Authentification
            credentials = ServiceAccountCredentials.from_json_keyfile_name( # type: ignore
                self.credentials_path, scope # type: ignore
            )
            
            self.client = gspread.authorize(credentials) # type: ignore
            
            # Ouverture du spreadsheet
            if self.spreadsheet_id:
                self.spreadsheet = self.client.open_by_key(self.spreadsheet_id)
            else:
                # Cr√©ation d'un nouveau spreadsheet
                self.spreadsheet = self.client.create("Trading Bot v3.0 - Analytics")
                self.spreadsheet_id = self.spreadsheet.id
                self.logger.info(f"üìä Nouveau spreadsheet cr√©√©: {self.spreadsheet_id}")
            
            # Cr√©ation des onglets am√©lior√©s
            self.setup_enhanced_worksheets()
            
            self.logger.info("üìä Google Sheets Enhanced initialis√© avec succ√®s")
            
        except FileNotFoundError:
            self.logger.error(f"‚ùå Fichier credentials non trouv√©: {self.credentials_path}")
        except json.JSONDecodeError:
            self.logger.error("‚ùå Fichier credentials JSON invalide")
        except APIError as e:  # type: ignore
            self.logger.error(f"‚ùå Erreur API Google Sheets: {e}")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur initialisation Google Sheets: {e}")

    def setup_enhanced_worksheets(self):
        """Configure les onglets am√©lior√©s du spreadsheet"""
        try:
            # R√©cup√©ration des onglets existants
            existing_sheets = [ws.title for ws in self.spreadsheet.worksheets()] # type: ignore
            
            # Cr√©ation onglet Trades d√©taill√©
            if "Trades_Detailed" not in existing_sheets:
                trades_sheet = self.spreadsheet.add_worksheet(title="Trades_Detailed", rows=2000, cols=25) # type: ignore
                self.setup_enhanced_trades_headers(trades_sheet)
            
            # Cr√©ation onglet Performance par paire
            if "Performance_Pairs" not in existing_sheets:
                pairs_sheet = self.spreadsheet.add_worksheet(title="Performance_Pairs", rows=50, cols=15)  # type: ignore
                self.setup_pairs_performance_headers(pairs_sheet)
            
            # Cr√©ation onglet Analyse horaire
            if "Hourly_Analysis" not in existing_sheets:
                hourly_sheet = self.spreadsheet.add_worksheet(title="Hourly_Analysis", rows=25, cols=12) # type: ignore
                self.setup_hourly_analysis_headers(hourly_sheet)
            
            # Cr√©ation onglet Dashboard Analytics
            if "Analytics_Dashboard" not in existing_sheets:
                dash_sheet = self.spreadsheet.add_worksheet(title="Analytics_Dashboard", rows=30, cols=8) # type: ignore
                self.setup_analytics_dashboard(dash_sheet)
            
            # Suppression de l'onglet par d√©faut si n√©cessaire
            if "Feuille 1" in existing_sheets:
                self.spreadsheet.del_worksheet(self.spreadsheet.worksheet("Feuille 1")) # type: ignore
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur configuration onglets: {e}")

    def setup_enhanced_trades_headers(self, sheet):
        """Configure les en-t√™tes d√©taill√©s de l'onglet Trades"""
        headers = [
            "Date", "Heure", "Paire", "Direction", "Taille (USDC)", 
            "Prix Entr√©e", "Prix Sortie", "Stop Loss", "Take Profit", 
            "P&L Brut (USDC)", "Frais Entr√©e (USDC)", "Frais Sortie (USDC)", 
            "Frais Total (USDC)", "P&L Net (USDC)", "P&L %", "ROI Net %", 
            "Dur√©e", "Raison Sortie", "Capital Avant", "Capital Apr√®s", 
            "Session Trading", "Intensit√© Horaire", "Volatilit√© Paire", 
            "Volume 24h", "Spread %"
        ]
        
        sheet.append_row(headers)
        
        # Formatage des en-t√™tes
        sheet.format("A1:Y1", {
            "backgroundColor": {"red": 0.1, "green": 0.3, "blue": 0.8},
            "textFormat": {"bold": True, "foregroundColor": {"red": 1, "green": 1, "blue": 1}},
            "horizontalAlignment": "CENTER"
        })

    def setup_pairs_performance_headers(self, sheet):
        """Configure les en-t√™tes de performance par paire"""
        headers = [
            "Paire", "Nb Trades", "Volume Total (USDC)", "P&L Brut (USDC)", 
            "Frais Total (USDC)", "P&L Net (USDC)", "Win Rate %", 
            "Profit Factor", "ROI Net %", "Frais/Volume %", "Dur√©e Moy (min)", 
            "Score Rentabilit√©", "Priorit√©", "Derni√®re MAJ"
        ]
        
        sheet.append_row(headers)
        
        # Ajout des formules pour chaque paire prioritaire
        priority_pairs = ['BTCUSDC', 'ETHUSDC', 'SOLUSDC', 'XRPUSDC', 'DOGEUSDC', 
                         'ADAUSDC', 'MATICUSDC', 'LTCUSDC', 'LINKUSDC', 'DOTUSDC']
        
        for i, pair in enumerate(priority_pairs, 2):
            formula_row = [
                pair,
                f'=COUNTIF(Trades_Detailed!C:C,"{pair}")',  # Nb trades
                f'=SUMIF(Trades_Detailed!C:C,"{pair}",Trades_Detailed!E:E)',  # Volume
                f'=SUMIF(Trades_Detailed!C:C,"{pair}",Trades_Detailed!J:J)',  # P&L Brut
                f'=SUMIF(Trades_Detailed!C:C,"{pair}",Trades_Detailed!M:M)',  # Frais
                f'=SUMIF(Trades_Detailed!C:C,"{pair}",Trades_Detailed!N:N)',  # P&L Net
                f'=IFERROR(COUNTIFS(Trades_Detailed!C:C,"{pair}",Trades_Detailed!N:N,">0")/COUNTIF(Trades_Detailed!C:C,"{pair}"),0)',  # Win Rate
                f'=IFERROR(SUMIFS(Trades_Detailed!N:N,Trades_Detailed!C:C,"{pair}",Trades_Detailed!N:N,">0")/ABS(SUMIFS(Trades_Detailed!N:N,Trades_Detailed!C:C,"{pair}",Trades_Detailed!N:N,"<0")),0)',  # Profit Factor
                f'=IFERROR(F{i}/C{i},0)',  # ROI Net %
                f'=IFERROR(E{i}/C{i},0)',  # Frais/Volume %
                f'=IFERROR(AVERAGEIF(Trades_Detailed!C:C,"{pair}",Trades_Detailed!Q:Q),0)',  # Dur√©e moyenne
                f'=IFERROR((F{i}/C{i})*(G{i}/100),0)',  # Score rentabilit√©
                f'=IF(L{i}>0.5,"HIGH",IF(L{i}>0.2,"MEDIUM","LOW"))',  # Priorit√©
                '=NOW()'  # Derni√®re MAJ
            ]
            sheet.append_row(formula_row)
        
        # Formatage
        sheet.format("A1:N1", {
            "backgroundColor": {"red": 0.8, "green": 0.4, "blue": 0.1},
            "textFormat": {"bold": True, "foregroundColor": {"red": 1, "green": 1, "blue": 1}}
        })

    def setup_hourly_analysis_headers(self, sheet):
        """Configure l'analyse horaire"""
        headers = [
            "Heure", "Session", "Nb Trades", "Volume (USDC)", "P&L Net (USDC)", 
            "Frais (USDC)", "Win Rate %", "ROI Horaire %", "Intensit√©", 
            "Score Session"
        ]
        
        sheet.append_row(headers)
        
        # Ajout des donn√©es pour chaque heure
        for hour in range(24):
            hour_str = f"{hour:02d}:00:00"
            next_hour_str = f"{hour+1:02d}:00:00" if hour < 23 else "23:59:59"
            
            # D√©termination de la session
            if 9 <= hour < 12:
                session = "EU_MORNING"
                intensity = "100%"
            elif 15 <= hour < 18:
                session = "EU_US_OVERLAP"
                intensity = "100%"
            elif 18 <= hour < 21:
                session = "US_PRIME"  
                intensity = "100%"
            elif 12 <= hour < 14:
                session = "LUNCH_BREAK"
                intensity = "50%"
            else:
                session = "NORMAL"
                intensity = "70%"
            
            row = [
                f"{hour:02d}h",
                session,
                f'=COUNTIFS(Trades_Detailed!B:B,">={hour_str}",Trades_Detailed!B:B,"<{next_hour_str}")',
                f'=SUMIFS(Trades_Detailed!E:E,Trades_Detailed!B:B,">={hour_str}",Trades_Detailed!B:B,"<{next_hour_str}")',
                f'=SUMIFS(Trades_Detailed!N:N,Trades_Detailed!B:B,">={hour_str}",Trades_Detailed!B:B,"<{next_hour_str}")',
                f'=SUMIFS(Trades_Detailed!M:M,Trades_Detailed!B:B,">={hour_str}",Trades_Detailed!B:B,"<{next_hour_str}")',
                f'=IFERROR(COUNTIFS(Trades_Detailed!B:B,">={hour_str}",Trades_Detailed!B:B,"<{next_hour_str}",Trades_Detailed!N:N,">0")/C{hour+2},0)',
                f'=IFERROR(E{hour+2}/D{hour+2},0)',
                intensity,
                f'=IFERROR(E{hour+2}*G{hour+2}/100,0)'
            ]
            sheet.append_row(row)
        
        # Formatage
        sheet.format("A1:J1", {
            "backgroundColor": {"red": 0.2, "green": 0.7, "blue": 0.2},
            "textFormat": {"bold": True, "foregroundColor": {"red": 1, "green": 1, "blue": 1}}
        })

    def setup_analytics_dashboard(self, sheet):
        """Configure le dashboard d'analytics"""
        dashboard_data = [
            ["üî• TRADING BOT v3.0 - ANALYTICS DASHBOARD", ""],
            ["", ""],
            ["üí∞ M√âTRIQUES FINANCI√àRES", ""],
            ["Capital Initial", "22819.00"],
            ["Capital Actuel", "=MAX(Trades_Detailed!T:T)"],
            ["P&L Total Net", "=SUM(Trades_Detailed!N:N)"],
            ["Frais Total", "=SUM(Trades_Detailed!M:M)"],
            ["ROI Global %", "=IFERROR((E5-D4)/D4*100,0)"],
            ["", ""],
            ["üìä M√âTRIQUES TRADING", ""],
            ["Total Trades", "=COUNTA(Trades_Detailed!C:C)-1"],
            ["Win Rate %", "=IFERROR(COUNTIF(Trades_Detailed!N:N,\">0\")/(D11)*100,0)"],
            ["Profit Factor", "=IFERROR(SUMIF(Trades_Detailed!N:N,\">0\",Trades_Detailed!N:N)/ABS(SUMIF(Trades_Detailed!N:N,\"<0\",Trades_Detailed!N:N)),0)"],
            ["Ratio Frais/Volume", "=IFERROR(D7/SUM(Trades_Detailed!E:E)*100,0)"],
            ["", ""],
            ["üèÜ TOP PAIRES", ""],
            ["Meilleure paire", "=INDEX(Performance_Pairs!A:A,MATCH(MAX(Performance_Pairs!F:F),Performance_Pairs!F:F,0))"],
            ["P&L meilleure", "=MAX(Performance_Pairs!F:F)"],
            ["Pire paire", "=INDEX(Performance_Pairs!A:A,MATCH(MIN(Performance_Pairs!F:F),Performance_Pairs!F:F,0))"],
            ["P&L pire", "=MIN(Performance_Pairs!F:F)"],
            ["", ""],
            ["‚è∞ PERFORMANCE HORAIRE", ""],
            ["Meilleure heure", "=INDEX(Hourly_Analysis!A:A,MATCH(MAX(Hourly_Analysis!E:E),Hourly_Analysis!E:E,0))"],
            ["P&L meilleure heure", "=MAX(Hourly_Analysis!E:E)"],
            ["", ""],
            ["üéØ RECOMMANDATIONS", ""],
            ["Focus sur paires", "=TEXTJOIN(\", \",TRUE,IF(Performance_Pairs!M:M=\"HIGH\",Performance_Pairs!A:A,\"\"))"],
            ["√âviter paires", "=TEXTJOIN(\", \",TRUE,IF(Performance_Pairs!M:M=\"LOW\",Performance_Pairs!A:A,\"\"))"],
            ["Derni√®re MAJ", "=NOW()"]
        ]
        
        for row in dashboard_data:
            sheet.append_row(row)
        
        # Formatage du titre
        sheet.format("A1:B1", {
            "backgroundColor": {"red": 0.9, "green": 0.1, "blue": 0.1},
            "textFormat": {"bold": True, "fontSize": 14, "foregroundColor": {"red": 1, "green": 1, "blue": 1}}
        })
        
        # Formatage des sections
        sheet.format("A3", {
            "backgroundColor": {"red": 0.1, "green": 0.8, "blue": 0.1},
            "textFormat": {"bold": True, "foregroundColor": {"red": 1, "green": 1, "blue": 1}}
        })

    async def log_enhanced_trade(self, trade, action: str, capital_before: float = 0, 
                                capital_after: float = 0, pair_volatility: float = 0,
                                volume_24h: str = "", spread_percent: float = 0):
        """Log un trade avec toutes les m√©triques d'analyse"""
        if not self.client:
            self.logger.warning("‚ö†Ô∏è Google Sheets non initialis√© - trade non logg√©")
            return
        
        try:
            trades_sheet = self.spreadsheet.worksheet("Trades_Detailed") # type: ignore
            
            if action == "OPEN":
                # Calcul des frais d'entr√©e
                entry_fee = trade.size * self.fee_rate
                
                # Session et intensit√© actuelles
                from config import TradingConfig
                config = TradingConfig()
                session = get_current_trading_session()
                intensity = get_trading_intensity(config) * 100
                
                # Log d'ouverture complet
                row = [
                    trade.timestamp.strftime("%Y-%m-%d"),
                    trade.timestamp.strftime("%H:%M:%S"),
                    trade.pair,
                    trade.direction.value,
                    f"{trade.size:.2f}",
                    f"{trade.entry_price:.6f}",
                    "",  # Prix sortie vide
                    f"{trade.stop_loss:.6f}",
                    f"{trade.take_profit:.6f}",
                    "",  # P&L brut vide
                    f"{entry_fee:.4f}",  # Frais entr√©e
                    "",  # Frais sortie vide
                    "",  # Frais total vide
                    "",  # P&L net vide
                    "",  # P&L % vide
                    "",  # ROI net % vide
                    "",  # Dur√©e vide
                    "OUVERT",  # Statut
                    f"{capital_before:.2f}",
                    f"{capital_after:.2f}",
                    session,
                    f"{intensity:.0f}%",
                    f"{pair_volatility:.2f}%" if pair_volatility else "",
                    volume_24h,
                    f"{spread_percent:.3f}%" if spread_percent else ""
                ]
                
                trades_sheet.append_row(row)
                self.logger.debug(f"üìä Trade OPEN d√©taill√© logg√©: {trade.pair}")
            
            elif action in ["CLOSE", "CLOSE_VIRTUAL"]:
                # Recherche et mise √† jour du trade
                all_values = trades_sheet.get_all_values()
                
                for i, row in enumerate(all_values[1:], 2):  # Skip header
                    if (len(row) >= 3 and 
                        row[1] == trade.timestamp.strftime("%H:%M:%S") and 
                        row[2] == trade.pair and
                        row[17] == "OUVERT"):  # Statut ouvert
                        
                        # Calcul des m√©triques compl√®tes
                        exit_price = getattr(trade, 'exit_price', 0)
                        pnl_gross = getattr(trade, 'pnl', 0)
                        exit_reason = getattr(trade, 'exit_reason', action)
                        duration = getattr(trade, 'duration', 'N/A')
                        
                        # Calcul des frais
                        entry_fee = float(row[10]) if row[10] else trade.size * self.fee_rate
                        exit_value = trade.size * (exit_price / trade.entry_price) if trade.entry_price > 0 else 0
                        exit_fee = exit_value * self.fee_rate
                        total_fees = entry_fee + exit_fee
                        
                        # P&L net et pourcentages
                        pnl_net = pnl_gross - total_fees
                        pnl_percent = (pnl_gross / trade.size) * 100 if trade.size > 0 else 0
                        roi_net_percent = (pnl_net / trade.size) * 100 if trade.size > 0 else 0
                        
                        # Dur√©e en minutes
                        duration_minutes = duration.total_seconds() / 60 if hasattr(duration, 'total_seconds') else 0 # type: ignore
                        
                        # Mise √† jour compl√®te de la ligne
                        range_name = f"G{i}:Y{i}"
                        values = [[
                            f"{exit_price:.6f}",           # G: Prix sortie
                            f"{trade.stop_loss:.6f}",      # H: Stop Loss (mis √† jour)
                            f"{trade.take_profit:.6f}",    # I: Take Profit (mis √† jour)
                            f"{pnl_gross:.4f}",            # J: P&L brut
                            f"{entry_fee:.4f}",            # K: Frais entr√©e
                            f"{exit_fee:.4f}",             # L: Frais sortie
                            f"{total_fees:.4f}",           # M: Frais total
                            f"{pnl_net:.4f}",              # N: P&L net
                            f"{pnl_percent:.2f}",          # O: P&L %
                            f"{roi_net_percent:.2f}",      # P: ROI net %
                            f"{duration_minutes:.0f}",     # Q: Dur√©e (min)
                            exit_reason,                    # R: Raison sortie
                            f"{capital_before:.2f}",       # S: Capital avant
                            f"{capital_after:.2f}",        # T: Capital apr√®s
                            row[20] if len(row) > 20 else "",  # U: Session (conserv√©)
                            row[21] if len(row) > 21 else "",  # V: Intensit√© (conserv√©)
                            f"{pair_volatility:.2f}%" if pair_volatility else (row[22] if len(row) > 22 else ""),  # W: Volatilit√©
                            volume_24h if volume_24h else (row[23] if len(row) > 23 else ""),  # X: Volume 24h
                            f"{spread_percent:.3f}%" if spread_percent else (row[24] if len(row) > 24 else "")   # Y: Spread
                        ]]
                        
                        trades_sheet.update(range_name, values)
                        self.logger.debug(f"üìä Trade CLOSE d√©taill√© mis √† jour: {trade.pair} (P&L Net: {pnl_net:.2f})")
                        break
                else:
                    self.logger.warning(f"‚ö†Ô∏è Trade ouvert non trouv√© pour mise √† jour: {trade.pair}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur logging trade enhanced {action}: {e}")
        
        # NOUVEAU: Force le recalcul automatique apr√®s chaque trade (avec gestion d'erreur)
        try:
            await self.force_calculations_after_trade()
        except APIError as e: # type: ignore
            self.logger.warning(f"‚ö†Ô∏è Erreur API Google Sheets (recalcul): {e}")
            # Ne pas interrompre le trading pour des erreurs Sheets
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erreur recalcul automatique: {e}")
            # Continuer le trading m√™me si Sheets a des probl√®mes

    async def force_calculations_after_trade(self):
        """Force le recalcul des m√©triques apr√®s ajout d'un trade"""
        try:
            # R√©cup√©rer les donn√©es actuelles
            trades_sheet = self.spreadsheet.worksheet("Trades_Detailed") # type: ignore
            all_data = trades_sheet.get_all_values()
            
            if len(all_data) <= 1:  # Pas de trades
                return
            
            trades_data = all_data[1:]  # Skip header
            
            # 1. Mise √† jour Performance_Summary
            summary_sheet = self.spreadsheet.worksheet("Performance_Summary") # type: ignore
            
            total_trades = len(trades_data)
            
            # Calcul P&L Net (colonne N = index 13)
            pnl_values = []
            for row in trades_data:
                if len(row) > 13 and row[13]:  # P&L Net non vide
                    try:
                        pnl_values.append(float(row[13]))
                    except:
                        pass
            
            total_pnl = sum(pnl_values)
            winning_trades = len([pnl for pnl in pnl_values if pnl > 0])
            losing_trades = len([pnl for pnl in pnl_values if pnl < 0])
            win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
            
            # Mise √† jour rapide des m√©triques principales avec gestion d'erreur
            try:
                summary_sheet.update('B4', [[total_trades]])
                summary_sheet.update('B5', [[winning_trades]])
                summary_sheet.update('B6', [[losing_trades]])
                summary_sheet.update('B7', [[f"{win_rate:.1f}"]])
                summary_sheet.update('B8', [[f"{total_pnl:.2f}"]])
                self.logger.debug("üìä M√©triques Performance_Summary mises √† jour")
            except APIError as e: # type: ignore
                self.logger.warning(f"‚ö†Ô∏è Erreur mise √† jour m√©triques summary: {e}")
                # Fallback : mise √† jour par batch
                try:
                    summary_values = [
                        [total_trades],
                        [winning_trades], 
                        [losing_trades],
                        [f"{win_rate:.1f}"],
                        [f"{total_pnl:.2f}"]
                    ]
                    summary_sheet.update('B4:B8', summary_values)
                    self.logger.debug("üìä M√©triques summary mises √† jour en batch")
                except Exception as fallback_error:
                    self.logger.error(f"‚ùå Erreur fallback mise √† jour summary: {fallback_error}")
            
            # 2. Mise √† jour Pairs_Analysis pour les paires actives
            pairs_sheet = self.spreadsheet.worksheet("Pairs_Analysis") # type: ignore
            
            # Identifier les paires qui ont des trades
            active_pairs = set()
            for row in trades_data:
                if len(row) > 2 and row[2]:
                    active_pairs.add(row[2])
            
            # Mettre √† jour seulement les paires actives (plus rapide)
            pair_row_mapping = {
                'BTCUSDC': 2, 'ETHUSDC': 3, 'SOLUSDC': 4, 'XRPUSDC': 5, 'DOGEUSDC': 6,
                'ADAUSDC': 7, 'MATICUSDC': 8, 'LTCUSDC': 9, 'LINKUSDC': 10, 'DOTUSDC': 11
            }
            
            for pair in active_pairs:
                if pair in pair_row_mapping:
                    row_num = pair_row_mapping[pair]
                    
                    # Calculer pour cette paire
                    pair_trades = [row for row in trades_data if len(row) > 2 and row[2] == pair]
                    
                    if pair_trades:
                        nb_trades = len(pair_trades)
                        
                        # P&L Net pour cette paire
                        pair_pnl_values = []
                        for row in pair_trades:
                            if len(row) > 13 and row[13]:
                                try:
                                    pair_pnl_values.append(float(row[13]))
                                except:
                                    pass
                        
                        if pair_pnl_values:
                            total_pnl_pair = sum(pair_pnl_values)
                            winning_pair = len([pnl for pnl in pair_pnl_values if pnl > 0])
                            win_rate_pair = (winning_pair / nb_trades * 100) if nb_trades > 0 else 0
                            
                            # Recommandation
                            recommendation = "HIGH" if win_rate_pair > 60 else "MEDIUM" if win_rate_pair > 30 else "LOW"
                            
                            # Mise √† jour rapide avec format liste correct
                            try:
                                pairs_sheet.update(f'B{row_num}', [[nb_trades]])
                                pairs_sheet.update(f'C{row_num}', [[f"{win_rate_pair:.1f}"]])
                                pairs_sheet.update(f'D{row_num}', [[f"{total_pnl_pair:.2f}"]])
                                pairs_sheet.update(f'I{row_num}', [[recommendation]])
                            except APIError as e: # type: ignore
                                self.logger.warning(f"‚ö†Ô∏è Erreur mise √† jour paire {pair}: {e}")
                                # Fallback : mise √† jour par batch
                                try:
                                    pair_values = [
                                        [nb_trades, f"{win_rate_pair:.1f}", f"{total_pnl_pair:.2f}", "", "", "", "", "", recommendation]
                                    ]
                                    pairs_sheet.update(f'B{row_num}:J{row_num}', pair_values)
                                except Exception:
                                    self.logger.warning(f"‚ö†Ô∏è Impossible de mettre √† jour {pair}")
                                    pass
            
            self.logger.debug("üìä Recalcul automatique effectu√©")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur recalcul automatique: {e}")

    def get_pair_performance_summary(self):
        """R√©cup√®re le r√©sum√© de performance par paire"""
        try: 
            pairs_sheet = self.spreadsheet.worksheet("Performance_Pairs") # type: ignore
            data = pairs_sheet.get_all_values()
            
            summary = {}
            for row in data[1:]:  # Skip header
                if len(row) >= 12 and row[0]:  # Paire non vide
                    summary[row[0]] = {
                        'trades': row[1],
                        'volume': row[2], 
                        'pnl_net': row[5],
                        'win_rate': row[6],
                        'score': row[11],
                        'priority': row[12]
                    }
            
            return summary
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration summary: {e}")
            return {}

    # ============================================================================
    # M√âTHODES DE COMPATIBILIT√â AVEC L'ANCIEN SYST√àME
    # ============================================================================
    
    async def log_trade(self, trade, action: str, capital_before: float = 0, capital_after: float = 0):
        """M√©thode de compatibilit√© - redirige vers log_enhanced_trade"""
        await self.log_enhanced_trade(
            trade=trade,
            action=action,
            capital_before=capital_before,
            capital_after=capital_after,
            pair_volatility=0.0,  # Valeurs par d√©faut
            volume_24h="",
            spread_percent=0.0
        )
    
    async def log_daily_performance(self, total_capital: float, daily_pnl: float, 
                                  trades_count: int, status: str):
        """M√©thode de compatibilit√© - log simple pour r√©trocompatibilit√©"""
        self.logger.info(f"üìä Performance quotidienne: Capital={total_capital:.2f}, P&L={daily_pnl:.2f}, Trades={trades_count}")
        # L'Enhanced Logger g√®re automatiquement les performances via les formules
        # Pas besoin de log suppl√©mentaire car tout est calcul√© en temps r√©el
    
    def get_spreadsheet_url(self) -> str:
        """Retourne l'URL du spreadsheet"""
        if self.spreadsheet_id:
            return f"https://docs.google.com/spreadsheets/d/{self.spreadsheet_id}"
        return ""

if __name__ == "__main__":
    print("üìä Enhanced Google Sheets Logger pour Trading Bot v3.0")
    print("‚úÖ Pr√™t pour analyse fine des performances et frais par paire")
