#!/usr/bin/env python3
"""
üïê NOTIFICATEUR HORAIRES DE TRADING
Notifications Telegram amusantes pour les changements d'horaires
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional

import pytz

from config import TradingConfig
from trading_hours import (get_current_trading_session, get_trading_intensity,
                           is_trading_hours_active)
from utils.telegram_notifier import TelegramNotifier


class TradingHoursNotifier:
    """Gestionnaire des notifications d'horaires de trading avec plein d'√©mojis fun ! üéâ"""
    
    def __init__(self, telegram_notifier: TelegramNotifier, config: TradingConfig):
        self.telegram = telegram_notifier
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # Suivi des √©tats pour √©viter les notifications r√©p√©t√©es
        self.last_notification_hour = None
        self.last_notification_state = None
        self.session_start_notified = False
        self.session_end_notified = False
        self.last_volatility_alert = None  # Dernier niveau de volatilit√© notifi√©
        
    async def check_and_notify_schedule_changes(self):
        """V√©rifie et notifie les changements d'horaires de trading"""
        if not self.config.TRADING_HOURS_ENABLED:
            return
            
        tz_fr = pytz.timezone('Europe/Paris')
        now = datetime.now(tz_fr)
        current_hour = now.hour
        current_minute = now.minute
        
        is_active = is_trading_hours_active(self.config)
        
        # Notification de d√©but de session (9h00)
        if (current_hour == self.config.TRADING_START_HOUR and 
            current_minute <= 5 and 
            not self.session_start_notified):
            await self.send_trading_start_notification()
            self.session_start_notified = True
            
        # Notification de fin de session (23h00)
        elif (current_hour == self.config.TRADING_END_HOUR and 
              current_minute <= 5 and 
              not self.session_end_notified):
            await self.send_trading_end_notification()
            self.session_end_notified = True
            
        # Notification lunch time (12h-14h)
        elif current_hour == 12 and current_minute <= 5 and self.last_notification_hour != 12:
            await self.send_lunch_time_notification()
            self.last_notification_hour = 12
            
        # Notification retour lunch (14h)
        elif current_hour == 14 and current_minute <= 5 and self.last_notification_hour != 14:
            await self.send_back_from_lunch_notification()
            self.last_notification_hour = 14
            
        # Notification power hour (21h-22h pour session US)
        elif current_hour == 21 and current_minute <= 5 and self.last_notification_hour != 21:
            await self.send_power_hour_notification()
            self.last_notification_hour = 21
            
        # Reset des flags quotidiens √† minuit
        if current_hour == 0 and current_minute <= 5:
            self.session_start_notified = False
            self.session_end_notified = False
            self.last_notification_hour = None

    async def send_trading_start_notification(self):
        """üåÖ Notification de d√©but de trading (9h00)"""
        tz_fr = pytz.timezone('Europe/Paris')
        now = datetime.now(tz_fr)
        
        session_info = get_current_trading_session()
        intensity = get_trading_intensity(self.config)
        
        message = f"""
üåÖ **GOOD MORNING TRADERS !** üåÖ

üîî **{now.strftime('%H:%M')} - D√âBUT DE SESSION** üîî

üöÄ **C'EST PARTI POUR UNE NOUVELLE JOURN√âE !** üöÄ
üí∞ Trading en mode **{session_info}**
üìä Intensit√©: **{intensity:.0%}** ‚ö°

üéØ **OBJECTIFS DU JOUR:**
‚Ä¢ üìà Scalping haute fr√©quence
‚Ä¢ üíé Focus sur les paires USDC liquides
‚Ä¢ üõ°Ô∏è Stop Loss √† {self.config.STOP_LOSS_PERCENT}%
‚Ä¢ üéØ Take Profit √† {self.config.TAKE_PROFIT_PERCENT}%

‚è∞ **PLANNING:**
‚Ä¢ üåÖ **09h-12h**: Session EU matinale
‚Ä¢ üçΩÔ∏è **12h-14h**: Lunch time (trading r√©duit)
‚Ä¢ ‚ö° **14h-18h**: Session EU apr√®s-midi
‚Ä¢ üåç **18h-21h**: Transition EU‚ÜíUS
‚Ä¢ üá∫üá∏ **21h-23h**: Power Hour US

**LET'S MAKE SOME MONEY !** üí∏üí∏üí∏

*{now.strftime('%A %d %B %Y')}* üìÖ
"""
        
        await self.telegram.send_message(message)
        self.logger.info("üåÖ Notification d√©but de trading envoy√©e")

    async def send_trading_end_notification(self):
        """üåô Notification de fin de trading (23h00)"""
        tz_fr = pytz.timezone('Europe/Paris')
        now = datetime.now(tz_fr)
        
        message = f"""
üåô **BONNE NUIT TRADERS !** üåô

üîï **{now.strftime('%H:%M')} - FIN DE SESSION** üîï

üò¥ **TRADING SUSPENDU JUSQU'√Ä 9H** üò¥

üìä **BILAN DE LA JOURN√âE:**
‚Ä¢ ‚è∞ Session termin√©e apr√®s 14h de trading
‚Ä¢ üéØ Toutes les positions ferm√©es
‚Ä¢ üí§ Bot en veille jusqu'√† demain 9h

üõèÔ∏è **REPOS BIEN M√âRIT√â !**
‚Ä¢ üí° Analyse des performances en cours
‚Ä¢ üîÑ Pr√©paration de demain
‚Ä¢ üìà Optimisation des strat√©gies

**√Ä DEMAIN POUR DE NOUVEAUX PROFITS !** üöÄ

üåü **Sweet dreams & profitable tomorrows!** üåü

*Prochaine session: {(now + timedelta(days=1)).strftime('%A %d %B')} √† 09h00* ‚è∞
"""
        
        await self.telegram.send_message(message)
        self.logger.info("üåô Notification fin de trading envoy√©e")

    async def send_lunch_time_notification(self):
        """üçΩÔ∏è Notification lunch time (12h-14h)"""
        tz_fr = pytz.timezone('Europe/Paris')
        now = datetime.now(tz_fr)
        
        reduced_intensity = get_trading_intensity(self.config) * 0.6  # R√©duction lunch
        
        message = f"""
üçΩÔ∏è **LUNCH TIME !** üçΩÔ∏è

üïõ **{now.strftime('%H:%M')} - PAUSE D√âJEUNER** üïõ

üçï **TRADING EN MODE RELAX** üçï
‚Ä¢ üìâ Intensit√© r√©duite: **{reduced_intensity:.0%}** (au lieu de 100%)
‚Ä¢ üßò Volatilit√© g√©n√©ralement plus faible
‚Ä¢ üçî Markets europ√©ens au ralenti

‚ö†Ô∏è **PARAM√àTRES AJUST√âS:**
‚Ä¢ üéØ Seuils plus s√©lectifs
‚Ä¢ ‚è±Ô∏è Timeouts plus courts
‚Ä¢ üîí Positions plus prudentes

üç∞ **BON APP√âTIT !** üç∞
*Trading reprend √† pleine intensit√© √† 14h* ‚ö°

üç∑ **Enjoy your meal!** üç∑
"""
        
        await self.telegram.send_message(message)
        self.logger.info("üçΩÔ∏è Notification lunch time envoy√©e")

    async def send_back_from_lunch_notification(self):
        """‚ö° Notification retour de lunch (14h)"""
        tz_fr = pytz.timezone('Europe/Paris')
        now = datetime.now(tz_fr)
        
        message = f"""
‚ö° **RETOUR EN FORCE !** ‚ö°

üïê **{now.strftime('%H:%M')} - SESSION APR√àS-MIDI** üïê

üî• **LUNCH TIME IS OVER !** üî•
‚Ä¢ üìà Intensit√© maximale: **100%** üöÄ
‚Ä¢ ‚ö° Volatilit√© en hausse
‚Ä¢ üí™ Markets europ√©ens r√©activ√©s

üéØ **OBJECTIFS APR√àS-MIDI:**
‚Ä¢ üèÉ Profiter du regain d'activit√©
‚Ä¢ üìä Exploiter les mouvements EU
‚Ä¢ üåç Pr√©parer la transition vers les US

‚è∞ **PROCHAINES √âTAPES:**
‚Ä¢ **14h-18h**: Session EU productive
‚Ä¢ **18h-21h**: Transition EU‚ÜíUS
‚Ä¢ **21h-23h**: Power Hour finale

**BACK TO BUSINESS !** üíºüí∞

üöÄ **Let's scalp some profits!** üöÄ
"""
        
        await self.telegram.send_message(message)
        self.logger.info("‚ö° Notification retour de lunch envoy√©e")

    async def send_power_hour_notification(self):
        """üá∫üá∏ Notification power hour US (21h-22h)"""
        tz_fr = pytz.timezone('Europe/Paris')
        now = datetime.now(tz_fr)
        
        message = f"""
üá∫üá∏ **POWER HOUR !** üá∫üá∏

üïò **{now.strftime('%H:%M')} - SESSION US PEAK** üïò

üî• **MAXIMUM VOLATILITY TIME !** üî•
‚Ä¢ üöÄ Markets US √† pleine puissance
‚Ä¢ ‚ö° Volume maximum sur toutes les paires
‚Ä¢ üíé Opportunit√©s premium disponibles

üìä **CONDITIONS OPTIMALES:**
‚Ä¢ üåä Liquidit√© maximum
‚Ä¢ üìà Spreads minimum
‚Ä¢ ‚ö° Signaux de qualit√© sup√©rieure

üéØ **STRAT√âGIE POWER HOUR:**
‚Ä¢ üí∞ Positions plus agressives possibles
‚Ä¢ üéØ Take profits plus rapides
‚Ä¢ üîÑ Rotation active des positions

‚è∞ **DERNI√àRE LIGNE DROITE !**
*Plus que 2h avant la fermeture √† 23h* 

**THIS IS THE MOMENT !** üí™üí∏

üèÜ **Make it count!** üèÜ
"""
        
        await self.telegram.send_message(message)
        self.logger.info("üá∫üá∏ Notification power hour envoy√©e")

    async def send_weekend_mode_notification(self):
        """üå¥ Notification mode week-end"""
        if not self.config.WEEKEND_TRADING_ENABLED:
            message = f"""
üå¥ **WEEK-END MODE !** üå¥

üèñÔ∏è **REPOS TOTAL** üèñÔ∏è
‚Ä¢ üò¥ Trading compl√®tement suspendu
‚Ä¢ üåä Markets ferm√©s
‚Ä¢ üçπ Time to relax!

üìÖ **REPRISE LUNDI 9H** üìÖ

**ENJOY YOUR WEEK-END !** üéâ
"""
        else:
            reduced_intensity = self.config.WEEKEND_REDUCTION_FACTOR
            message = f"""
üå¥ **WEEK-END MODE !** üå¥

üèñÔ∏è **TRADING RELAX** üèñÔ∏è
‚Ä¢ üìâ Intensit√© r√©duite: **{reduced_intensity:.0%}**
‚Ä¢ üåä Volatilit√© plus faible
‚Ä¢ üòå Mode tranquille activ√©

‚è∞ **HORAIRES WEEK-END:**
‚Ä¢ üïò **{self.config.WEEKEND_START_HOUR}h-{self.config.WEEKEND_END_HOUR}h**
‚Ä¢ üßò Trading zen et d√©contract√©

**WEEK-END PROFITS !** üí∞üå¥
"""
        
        await self.telegram.send_message(message)
        self.logger.info("üå¥ Notification mode week-end envoy√©e")

    async def send_market_closure_warning(self, minutes_until_close: int):
        """‚ö†Ô∏è Notification d'approche de fermeture"""
        message = f"""
‚ö†Ô∏è **ATTENTION - FERMETURE PROCHE !** ‚ö†Ô∏è

‚è∞ **Plus que {minutes_until_close} minutes** avant fermeture !

üîÑ **ACTIONS EN COURS:**
‚Ä¢ üìä V√©rification des positions ouvertes
‚Ä¢ üõ°Ô∏è S√©curisation des profits
‚Ä¢ üîí Pr√©paration de la fermeture

**DERNI√àRE CHANCE POUR LES TRADES !** ‚ö°
"""
        
        await self.telegram.send_message(message)
        self.logger.info(f"‚ö†Ô∏è Notification fermeture -{minutes_until_close}min envoy√©e")

    async def send_volatility_alert(self, volatility_level: str):
        """üìä Notification d'alerte volatilit√©"""
        # √âviter les notifications r√©p√©t√©es
        if self.last_volatility_alert == volatility_level:
            return
            
        self.last_volatility_alert = volatility_level
        
        if volatility_level == "HIGH":
            emoji = "üî•"
            message = f"""
{emoji} **VOLATILIT√â √âLEV√âE D√âTECT√âE !** {emoji}

‚ö° **OPPORTUNIT√âS PREMIUM** ‚ö°
‚Ä¢ üöÄ Mouvements rapides en cours
‚Ä¢ üíé Signaux de qualit√© maximale
‚Ä¢ ‚ö° Profits potentiels √©lev√©s
‚Ä¢ üìà Spreads potentiellement plus larges

üéØ **STRAT√âGIE RECOMMAND√âE:**
‚Ä¢ üéØ Take profits plus rapides
‚Ä¢ üõ°Ô∏è Stop loss plus serr√©s
‚Ä¢ ‚ö° R√©activit√© maximale
‚Ä¢ üí∞ Positions possiblement plus petites

**SOYEZ PR√äTS POUR L'ACTION !** üéØ
"""
        elif volatility_level == "LOW":
            emoji = "üò¥"
            message = f"""
{emoji} **VOLATILIT√â FAIBLE** {emoji}

üßò **MARCH√â CALME** üßò
‚Ä¢ üìâ Mouvements r√©duits
‚Ä¢ ‚è±Ô∏è Timeouts plus courts activ√©s
‚Ä¢ üîí Seuils plus s√©lectifs
‚Ä¢ üåä Spreads g√©n√©ralement plus serr√©s

üéØ **STRAT√âGIE ADAPT√âE:**
‚Ä¢ ‚è≥ Patience requise
‚Ä¢ üéØ Take profits plus patients
‚Ä¢ üìä Focus sur les signaux de qualit√©
‚Ä¢ üîç Attendre les meilleures opportunit√©s

**PATIENCE, LES BONNES CHOSES ARRIVENT...** ‚è≥
"""
        else:  # NORMAL
            return  # Pas de notification pour volatilit√© normale
            
        await self.telegram.send_message(message)
        self.logger.info(f"üìä Notification volatilit√© {volatility_level} envoy√©e")

    async def check_volatility_and_notify(self, current_volatility: float):
        """V√©rifie la volatilit√© et envoie des notifications si n√©cessaire"""
        # Seuils de volatilit√© (√† ajuster selon les donn√©es historiques)
        HIGH_VOLATILITY_THRESHOLD = 2.0  # 2% de volatilit√© = √©lev√©e
        LOW_VOLATILITY_THRESHOLD = 0.5   # 0.5% de volatilit√© = faible
        
        if current_volatility > HIGH_VOLATILITY_THRESHOLD:
            await self.send_volatility_alert("HIGH")
        elif current_volatility < LOW_VOLATILITY_THRESHOLD:
            await self.send_volatility_alert("LOW")
        # Si entre les deux seuils, c'est "NORMAL" et on ne notifie pas

    async def reset_daily_notifications(self):
        """Remet √† z√©ro les flags de notification quotidiens"""
        self.session_start_notified = False
        self.session_end_notified = False
        self.last_notification_hour = None
        self.last_volatility_alert = None
        self.logger.info("üîÑ Flags de notification quotidiens remis √† z√©ro")


async def main():
    """Test du notificateur d'horaires"""
    from config import APIConfig, TradingConfig
    
    config = TradingConfig()
    api_config = APIConfig()
    
    # Cr√©er le notificateur Telegram
    telegram_notifier = TelegramNotifier(
        bot_token=api_config.TELEGRAM_BOT_TOKEN,
        chat_id=api_config.TELEGRAM_CHAT_ID
    )
    
    # Cr√©er le notificateur d'horaires
    hours_notifier = TradingHoursNotifier(telegram_notifier, config)
    
    print("üß™ Test des notifications d'horaires...")
    
    # Test notification de d√©but
    print("üåÖ Test notification d√©but de trading...")
    await hours_notifier.send_trading_start_notification()
    
    await asyncio.sleep(2)
    
    # Test notification lunch
    print("üçΩÔ∏è Test notification lunch time...")
    await hours_notifier.send_lunch_time_notification()
    
    await asyncio.sleep(2)
    
    # Test notification power hour
    print("üá∫üá∏ Test notification power hour...")
    await hours_notifier.send_power_hour_notification()
    
    await asyncio.sleep(2)
    
    # Test notification fin
    print("üåô Test notification fin de trading...")
    await hours_notifier.send_trading_end_notification()
    
    print("‚úÖ Tests termin√©s !")


if __name__ == "__main__":
    asyncio.run(main())
