"""
Monitoring en temps r√©el des trades - Audit Binance vs Firebase
Interface Streamlit pour surveillance continue de l'int√©grit√© des donn√©es
"""

import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from binance.client import Client
from dotenv import load_dotenv
import os

# Import de l'auditeur am√©lior√©
from audit_trades_simple import TradeAuditorSimple
from utils.firebase_logger import FirebaseLogger


class TradingMonitor:
    """Monitoring en temps r√©el des trades avec interface Streamlit"""
    
    def __init__(self):
        load_dotenv()
        self.setup_binance_client()
        self.setup_firebase()
        self.auditor = TradeAuditorSimple(self.binance_client, self.firebase_logger.firestore_db)
        
    def setup_binance_client(self):
        """Configuration du client Binance"""
        try:
            self.binance_client = Client(
                api_key=os.getenv('BINANCE_API_KEY'),
                api_secret=os.getenv('BINANCE_SECRET_KEY')
            )
            st.success("‚úÖ Binance connect√©")
        except Exception as e:
            st.error(f"‚ùå Erreur Binance: {e}")
            
    def setup_firebase(self):
        """Configuration Firebase"""
        try:
            self.firebase_logger = FirebaseLogger()
            st.success("‚úÖ Firebase connect√©")
        except Exception as e:
            st.error(f"‚ùå Erreur Firebase: {e}")


def main():
    """Interface principale Streamlit"""
    st.set_page_config(
        page_title="üîç Trading Monitor - Audit Temps R√©el",
        page_icon="üîç",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("üîç Trading Monitor - Audit Temps R√©el")
    st.markdown("**Surveillance continue de l'int√©grit√© des trades Binance vs Firebase**")
    
    # Sidebar pour les contr√¥les
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        
        # S√©lection de la p√©riode
        monitoring_mode = st.selectbox(
            "Mode de monitoring",
            ["Temps r√©el (1h)", "Derni√®res 24h", "Derni√®res 4h", "Personnalis√©"]
        )
        
        if monitoring_mode == "Personnalis√©":
            hours_back = st.slider("Heures en arri√®re", 1, 168, 24)
        elif monitoring_mode == "Temps r√©el (1h)":
            hours_back = 1
        elif monitoring_mode == "Derni√®res 4h":
            hours_back = 4
        else:  # Derni√®res 24h
            hours_back = 24
            
        # Auto-refresh
        auto_refresh = st.checkbox("üîÑ Auto-refresh (30s)", value=True)
        
        # Paires √† surveiller
        default_pairs = ['BNBUSDC', 'ETHUSDC', 'BTCUSDC', 'SOLUSDC']
        monitored_pairs = st.multiselect(
            "Paires √† surveiller",
            options=default_pairs + ['ADAUSDC', 'XRPUSDC', 'DOGEUSDC'],
            default=default_pairs
        )
        
        # Seuils d'alerte
        st.subheader("üö® Seuils d'alerte")
        price_tolerance = st.slider("Tol√©rance prix (%)", 0.1, 5.0, 2.0, 0.1)
        time_tolerance = st.slider("Tol√©rance temps (min)", 5, 240, 60, 5)
        
    # Initialisation du monitor
    if 'monitor' not in st.session_state:
        with st.spinner("üîÑ Initialisation du monitoring..."):
            try:
                st.session_state.monitor = TradingMonitor()
            except Exception as e:
                st.error(f"‚ùå Erreur d'initialisation: {e}")
                return
    
    monitor = st.session_state.monitor
    
    # P√©riode d'analyse
    end_date = datetime.now()
    start_date = end_date - timedelta(hours=hours_back)
    
    # R√©cup√©ration des donn√©es
    with st.spinner(f"üîÑ R√©cup√©ration des donn√©es ({monitoring_mode})..."):
        try:
            # Donn√©es Binance
            binance_df = monitor.auditor.get_binance_trades(monitored_pairs, start_date, end_date)
            
            # Donn√©es Firebase
            firebase_df = monitor.auditor.get_firebase_trades(start_date, end_date)
            
            # Comparaison intelligente
            matched_df, unmatched_binance, unmatched_firebase = monitor.auditor.compare_trades(binance_df, firebase_df)
            
            # Analyse des cycles
            cycle_analysis = monitor.auditor.analyze_trading_cycles(binance_df, firebase_df)
            
            # M√©triques
            metrics = monitor.auditor.calculate_metrics(matched_df, unmatched_binance, unmatched_firebase)
            
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es: {e}")
            return
    
    # Interface principale
    display_monitoring_dashboard(
        binance_df, firebase_df, matched_df, unmatched_binance, unmatched_firebase,
        cycle_analysis, metrics, monitoring_mode, price_tolerance, time_tolerance
    )
    
    # Auto-refresh
    if auto_refresh:
        time.sleep(30)
        st.rerun()


def display_monitoring_dashboard(binance_df, firebase_df, matched_df, unmatched_binance, 
                               unmatched_firebase, cycle_analysis, metrics, monitoring_mode,
                               price_tolerance, time_tolerance):
    """Affichage du dashboard principal"""
    
    # M√©triques en temps r√©el
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üéØ Trades Binance", metrics['total_binance_trades'])
        if not binance_df.empty and 'fragment_count' in binance_df.columns:
            fragments = binance_df['fragment_count'].sum()
            st.caption(f"üß© {fragments} fragments")
            
    with col2:
        st.metric("üî• Trades Firebase", metrics['total_firebase_trades'])
        
    with col3:
        match_rate = metrics['match_rate']
        st.metric("‚úÖ Taux de match", f"{match_rate:.1f}%")
        
    with col4:
        st.metric("‚ùå Manqu√©s", metrics['missing_in_firebase'])
        
    with col5:
        st.metric("üëª Fant√¥mes", metrics['phantom_in_firebase'])
    
    # Alertes si probl√®mes d√©tect√©s
    if metrics['match_rate'] < 90:
        st.warning(f"‚ö†Ô∏è Taux de match faible: {metrics['match_rate']:.1f}%")
        
    if cycle_analysis['orphaned_closes'] > 0:
        st.error(f"üö® {cycle_analysis['orphaned_closes']} SELL orphelins d√©tect√©s!")
        
    if cycle_analysis['orphaned_opens'] > 0:
        st.warning(f"‚ö†Ô∏è {cycle_analysis['orphaned_opens']} BUY orphelins d√©tect√©s!")
    
    # Graphiques
    if not matched_df.empty:
        display_matching_charts(matched_df)
    
    # D√©tails des trades
    display_trade_details(binance_df, firebase_df, matched_df, unmatched_binance, unmatched_firebase)
    
    # Cycles incomplets
    if cycle_analysis['incomplete_cycles']:
        display_incomplete_cycles(cycle_analysis['incomplete_cycles'])


def display_matching_charts(matched_df):
    """Affichage des graphiques de matching"""
    st.subheader("üìä Analyse des matches")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Graphique de confiance de matching
        if 'match_confidence' in matched_df.columns:
            fig = px.histogram(
                matched_df, x='match_confidence',
                title="Distribution de la confiance de matching",
                nbins=20
            )
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Diff√©rences de prix
        if 'price_diff_percent' in matched_df.columns:
            fig = px.histogram(
                matched_df, x='price_diff_percent',
                title="Distribution des diff√©rences de prix (%)",
                nbins=20
            )
            st.plotly_chart(fig, use_container_width=True)


def display_trade_details(binance_df, firebase_df, matched_df, unmatched_binance, unmatched_firebase):
    """Affichage des d√©tails des trades"""
    
    tab1, tab2, tab3, tab4 = st.tabs(["‚úÖ Trades Match√©s", "üéØ Binance", "üî• Firebase", "‚ùå Non Match√©s"])
    
    with tab1:
        if not matched_df.empty:
            st.dataframe(matched_df, use_container_width=True)
        else:
            st.info("Aucun trade match√©")
    
    with tab2:
        if not binance_df.empty:
            st.dataframe(binance_df, use_container_width=True)
        else:
            st.info("Aucun trade Binance")
    
    with tab3:
        if not firebase_df.empty:
            st.dataframe(firebase_df, use_container_width=True)
        else:
            st.info("Aucun trade Firebase")
    
    with tab4:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Manqu√©s dans Firebase")
            if not unmatched_binance.empty:
                st.dataframe(unmatched_binance, use_container_width=True)
            else:
                st.success("Aucun trade manqu√©")
        
        with col2:
            st.subheader("Fant√¥mes dans Firebase")
            if not unmatched_firebase.empty:
                st.dataframe(unmatched_firebase, use_container_width=True)
            else:
                st.success("Aucun trade fant√¥me")


def display_incomplete_cycles(incomplete_cycles):
    """Affichage des cycles incomplets"""
    st.subheader("üö® Cycles de Trading Incomplets")
    
    for cycle in incomplete_cycles:
        if cycle['type'] == 'ORPHANED_CLOSE':
            st.error(f"""
            **üî¥ SELL Orphelin** - {cycle['pair']}
            - **Timestamp**: {cycle['close_time'].strftime('%Y-%m-%d %H:%M:%S')}
            - **Prix entr√©e**: {cycle.get('entry_price', 'N/A')}
            - **Prix sortie**: {cycle.get('exit_price', 'N/A')}
            - **Trade ID**: {cycle.get('trade_id', 'N/A')}
            - **Probl√®me**: {cycle['issue']}
            """)
        elif cycle['type'] == 'ORPHANED_OPEN':
            st.warning(f"""
            **üü° BUY Orphelin** - {cycle['pair']}
            - **Timestamp**: {cycle['open_time'].strftime('%Y-%m-%d %H:%M:%S')}
            - **Prix entr√©e**: {cycle.get('entry_price', 'N/A')}
            - **Trade ID**: {cycle.get('trade_id', 'N/A')}
            - **Probl√®me**: {cycle['issue']}
            """)


if __name__ == "__main__":
    main()
            return pd.DataFrame()
        
        df = pd.DataFrame(all_trades)
        
        # Conversion et nettoyage
        df['time'] = pd.to_datetime(df['time'], unit='ms')
        df['price'] = pd.to_numeric(df['price'])
        df['qty'] = pd.to_numeric(df['qty'])
        df['commission'] = pd.to_numeric(df['commission'])
        df['quoteQty'] = pd.to_numeric(df['quoteQty'])
        
        # Cl√© de matching robuste
        df['match_key'] = df.apply(lambda row: f"{row['symbol']}_{row['orderId']}_{int(row['time'].timestamp())}", axis=1)
        
        return df
    
    def get_firebase_trades(self, start_date: datetime, end_date: datetime) -> pd.DataFrame:
        """R√©cup√®re les trades depuis Firebase"""
        try:
            docs = self.firebase_db.collection("trades").where(
                "timestamp", ">=", start_date.isoformat()
            ).where(
                "timestamp", "<=", end_date.isoformat()
            ).stream()
            
            data = []
            for doc in docs:
                trade_data = doc.to_dict()
                trade_data['doc_id'] = doc.id
                data.append(trade_data)
            
            if not data:
                return pd.DataFrame()
            
            df = pd.DataFrame(data)
            
            # Nettoyage et conversion
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            df['entry_price'] = pd.to_numeric(df['entry_price'], errors='coerce')
            df['size'] = pd.to_numeric(df['size'], errors='coerce')
            df['pnl_amount'] = pd.to_numeric(df.get('pnl_amount', 0), errors='coerce')
            
            # Cl√© de matching
            df['match_key'] = df.apply(lambda row: self._create_firebase_match_key(row), axis=1)
            
            return df
            
        except Exception as e:
            st.error(f"‚ùå Erreur r√©cup√©ration Firebase: {e}")
            return pd.DataFrame()
    
    def _create_firebase_match_key(self, row) -> str:
        """Cr√©e une cl√© de matching pour Firebase"""
        binance_id = row.get('binance_order_id', 'UNKNOWN')
        timestamp = int(pd.to_datetime(row['timestamp']).timestamp())
        return f"{row['pair']}_{binance_id}_{timestamp}"
    
    def compare_trades(self, binance_df: pd.DataFrame, firebase_df: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
        """Compare les trades entre Binance et Firebase"""
        # Cas o√π les deux DataFrames sont vides
        if binance_df.empty and firebase_df.empty:
            return pd.DataFrame(), pd.DataFrame(), pd.DataFrame()
        
        # Cas o√π seul Binance est vide
        if binance_df.empty:
            return pd.DataFrame(), pd.DataFrame(), firebase_df.copy()
        
        # Cas o√π seul Firebase est vide
        if firebase_df.empty:
            return pd.DataFrame(), binance_df.copy(), pd.DataFrame()
        
        # Cas normal - les deux ont des donn√©es
        # V√©rifier que les cl√©s de matching existent
        if 'match_key' not in binance_df.columns:
            st.error("‚ùå Colonne 'match_key' manquante dans les donn√©es Binance")
            return pd.DataFrame(), binance_df.copy(), firebase_df.copy()
        
        if 'match_key' not in firebase_df.columns:
            st.error("‚ùå Colonne 'match_key' manquante dans les donn√©es Firebase")
            return pd.DataFrame(), binance_df.copy(), firebase_df.copy()
        
        # Merge sur la cl√© de matching
        merged = pd.merge(
            binance_df, 
            firebase_df, 
            on='match_key', 
            how='outer', 
            indicator=True,
            suffixes=('_binance', '_firebase')
        )
        
        # S√©paration des r√©sultats
        matched = merged[merged['_merge'] == 'both'].copy()
        only_binance = merged[merged['_merge'] == 'left_only'].copy()
        only_firebase = merged[merged['_merge'] == 'right_only'].copy()
        
        return matched, only_binance, only_firebase
    
    def calculate_metrics(self, matched: pd.DataFrame, only_binance: pd.DataFrame, only_firebase: pd.DataFrame) -> Dict:
        """Calcule les m√©triques de coh√©rence"""
        total_binance = len(matched) + len(only_binance)
        total_firebase = len(matched) + len(only_firebase)
        
        metrics = {
            'total_binance_trades': total_binance,
            'total_firebase_trades': total_firebase,
            'matched_trades': len(matched),
            'missing_in_firebase': len(only_binance),
            'phantom_in_firebase': len(only_firebase),
            'match_rate': (len(matched) / max(total_binance, 1)) * 100,
            'firebase_coverage': (len(matched) / max(total_binance, 1)) * 100,
            'binance_coverage': (len(matched) / max(total_firebase, 1)) * 100
        }
        
        return metrics

def main():
    """Interface Streamlit principale"""
    st.set_page_config(
        page_title="üîç Audit Trades Binance vs Firebase",
        page_icon="üîç",
        layout="wide"
    )
    
    st.title("üîç Audit des Trades : Binance vs Firebase")
    st.markdown("**Comparaison et validation de l'int√©grit√© des donn√©es de trading**")
    
    # Configuration des dates
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input(
            "üìÖ Date de d√©but",
            value=datetime.now() - timedelta(days=7),
            max_value=datetime.now()
        )
    with col2:
        end_date = st.date_input(
            "üìÖ Date de fin",
            value=datetime.now(),
            max_value=datetime.now()
        )
    
    # S√©lection des paires
    try:
        from config import PRIORITY_USDC_PAIRS
        available_pairs = PRIORITY_USDC_PAIRS
    except ImportError:
        # Fallback si PRIORITY_USDC_PAIRS n'est pas disponible
        available_pairs = ['BNBUSDC', 'ETHUSDC', 'BTCUSDC', 'ADAUSDC', 'SOLUSDC']
    
    selected_pairs = st.multiselect(
        "üéØ Paires √† analyser",
        options=available_pairs,
        default=available_pairs[:5]
    )
    
    if st.button("üöÄ Lancer l'audit", type="primary"):
        if not selected_pairs:
            st.warning("‚ö†Ô∏è Veuillez s√©lectionner au moins une paire")
            return
        
        # Initialisation des services
        try:
            from utils.firebase_logger import FirebaseLogger
            firebase_logger = FirebaseLogger()
            
            # Configuration Binance (√† adapter selon votre setup)
            import os

            from binance.client import Client
            
            binance_client = Client(
                api_key=os.getenv('BINANCE_API_KEY'),
                api_secret=os.getenv('BINANCE_API_SECRET')
            )
            
            auditor = TradeAuditor(binance_client, firebase_logger.firestore_db)
            
        except Exception as e:
            st.error(f"‚ùå Erreur d'initialisation: {e}")
            return
        
        # R√©cup√©ration des donn√©es
        with st.spinner("üîÑ R√©cup√©ration des donn√©es Binance..."):
            start_datetime = datetime.combine(start_date, datetime.min.time())
            end_datetime = datetime.combine(end_date, datetime.max.time())
            
            binance_df = auditor.get_binance_trades(selected_pairs, start_datetime, end_datetime)
        
        with st.spinner("üîÑ R√©cup√©ration des donn√©es Firebase..."):
            firebase_df = auditor.get_firebase_trades(start_datetime, end_datetime)
        
        # Comparaison
        matched, only_binance, only_firebase = auditor.compare_trades(binance_df, firebase_df)
        metrics = auditor.calculate_metrics(matched, only_binance, only_firebase)
        
        # Affichage des m√©triques
        st.header("üìä R√©sum√© de l'audit")
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üéØ Trades Binance", metrics['total_binance_trades'])
        with col2:
            st.metric("üî• Trades Firebase", metrics['total_firebase_trades'])
        with col3:
            st.metric("‚úÖ Match√©s", metrics['matched_trades'])
        with col4:
            st.metric("üìà Taux de match", f"{metrics['match_rate']:.1f}%")
        
        # Graphique de coh√©rence
        st.subheader("üìà Visualisation de la coh√©rence")
        
        fig = go.Figure(data=[
            go.Bar(name='Match√©s', x=['Trades'], y=[metrics['matched_trades']], marker_color='green'),
            go.Bar(name='Manqu√©s Firebase', x=['Trades'], y=[metrics['missing_in_firebase']], marker_color='orange'),
            go.Bar(name='Fant√¥mes Firebase', x=['Trades'], y=[metrics['phantom_in_firebase']], marker_color='red')
        ])
        
        fig.update_layout(
            title="R√©partition des trades par cat√©gorie",
            barmode='stack',
            yaxis_title="Nombre de trades"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # D√©tails des incoh√©rences
        if len(only_binance) > 0:
            st.subheader("‚ùå Trades manqu√©s dans Firebase")
            st.warning(f"‚ö†Ô∏è {len(only_binance)} trades ex√©cut√©s sur Binance mais non enregistr√©s dans Firebase")
            
            display_cols = ['symbol', 'time', 'price', 'qty', 'quoteQty', 'commission', 'orderId']
            available_cols = [col for col in display_cols if col in only_binance.columns]
            st.dataframe(only_binance[available_cols])
        
        if len(only_firebase) > 0:
            st.subheader("‚ùå Trades fant√¥mes dans Firebase")
            st.error(f"üö® {len(only_firebase)} trades enregistr√©s dans Firebase mais non trouv√©s sur Binance")
            
            display_cols = ['pair', 'timestamp', 'entry_price', 'size', 'pnl_amount', 'trade_id']
            available_cols = [col for col in display_cols if col in only_firebase.columns]
            st.dataframe(only_firebase[available_cols])
        
        # Trades match√©s avec diff√©rences
        if len(matched) > 0:
            st.subheader("‚úÖ Trades match√©s")
            st.success(f"‚úÖ {len(matched)} trades correctement synchronis√©s")
            
            # Analyse des diff√©rences de prix/quantit√©
            if 'price' in matched.columns and 'entry_price' in matched.columns:
                matched['price_diff'] = abs(matched['price'] - matched['entry_price'])
                matched['price_diff_pct'] = (matched['price_diff'] / matched['price']) * 100
                
                significant_diffs = matched[matched['price_diff_pct'] > 0.1]  # Plus de 0.1% de diff√©rence
                
                if len(significant_diffs) > 0:
                    st.warning(f"‚ö†Ô∏è {len(significant_diffs)} trades avec diff√©rences de prix significatives")
                    
                    display_cols = ['symbol', 'time', 'price', 'entry_price', 'price_diff_pct']
                    available_cols = [col for col in display_cols if col in significant_diffs.columns]
                    st.dataframe(significant_diffs[available_cols])
        
        # Recommandations
        st.header("üí° Recommandations")
        
        if metrics['match_rate'] < 95:
            st.error("üö® Taux de coh√©rence critique ! V√©rifiez le syst√®me de logging.")
        elif metrics['match_rate'] < 98:
            st.warning("‚ö†Ô∏è Taux de coh√©rence √† am√©liorer.")
        else:
            st.success("‚úÖ Excellente coh√©rence des donn√©es !")
        
        if metrics['missing_in_firebase'] > 0:
            st.info(f"üí° Ajoutez l'ID Binance dans vos logs Firebase pour am√©liorer le matching")
        
        if metrics['phantom_in_firebase'] > 0:
            st.info(f"üí° V√©rifiez la logique de validation des trades avant enregistrement")

if __name__ == "__main__":
    main()
